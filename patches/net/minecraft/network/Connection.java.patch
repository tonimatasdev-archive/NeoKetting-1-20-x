--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -79,6 +_,11 @@
     private final Queue<Consumer<Connection>> pendingActions = Queues.newConcurrentLinkedQueue();
     private Channel channel;
     private SocketAddress address;
+    // Spigot Start
+    public java.util.UUID spoofedUUID;
+    public com.mojang.authlib.properties.Property[] spoofedProfile;
+    public boolean preparing = true;
+    // Spigot End
     @Nullable
     private volatile PacketListener disconnectListener;
     @Nullable
@@ -97,6 +_,7 @@
     private volatile Component delayedDisconnect;
     @Nullable
     BandwidthDebugMonitor bandwidthDebugMonitor;
+    public String hostname = ""; // CraftBukkit - add field
 
     public Connection(PacketFlow p_129482_) {
         this.receiving = p_129482_;
@@ -107,9 +_,13 @@
         super.channelActive(p_129525_);
         this.channel = p_129525_.channel();
         this.address = this.channel.remoteAddress();
+        // Spigot Start
+        this.preparing = false;
+        // Spigot End
         if (this.delayedDisconnect != null) {
             this.disconnect(this.delayedDisconnect);
         }
+        net.neoforged.neoforge.network.connection.ConnectionUtils.setConnection(p_129525_, this);
     }
 
     public static void setInitialProtocolAttributes(Channel p_294962_) {
@@ -120,6 +_,7 @@
     @Override
     public void channelInactive(ChannelHandlerContext p_129527_) {
         this.disconnect(Component.translatable("disconnect.endOfStream"));
+        net.neoforged.neoforge.network.connection.ConnectionUtils.removeConnection(p_129527_);
     }
 
     @Override
@@ -135,6 +_,14 @@
                     this.disconnect(Component.translatable("disconnect.timeout"));
                 } else {
                     Component component = Component.translatable("disconnect.genericReason", "Internal Exception: " + p_129534_);
+                    PacketListener listener = this.packetListener;
+                    if (listener != null) {
+                        ConnectionProtocol protocol = listener.protocol();
+                        if (protocol == ConnectionProtocol.CONFIGURATION || protocol == ConnectionProtocol.PLAY) {
+                            // Neo: Always log critical network exceptions for config and play packets
+                            LOGGER.error("Exception caught in connection", p_129534_);
+                        }
+                    }
                     if (flag) {
                         LOGGER.debug("Failed to sent packet", p_129534_);
                         if (this.getSending() == PacketFlow.CLIENTBOUND) {
@@ -155,6 +_,7 @@
                 }
             }
         }
+        if (net.minecraft.server.MinecraftServer.getServer().isDebugging()) p_129534_.printStackTrace(); // Spigot
     }
 
     protected void channelRead0(ChannelHandlerContext p_129487_, Packet<?> p_129488_) {
@@ -380,11 +_,14 @@
         if (this.address == null) {
             return "local";
         } else {
-            return p_295875_ ? this.address.toString() : "IP hidden";
+            return p_295875_ ? net.neoforged.neoforge.network.DualStackUtils.getAddressString(this.address) : "IP hidden";
         }
     }
 
     public void disconnect(Component p_129508_) {
+        // Spigot Start
+        this.preparing = false;
+        // Spigot End
         if (this.channel == null) {
             this.delayedDisconnect = p_129508_;
         }
@@ -419,6 +_,7 @@
     }
 
     public static ChannelFuture connect(InetSocketAddress p_290034_, boolean p_290035_, final Connection p_290031_) {
+        net.neoforged.neoforge.network.DualStackUtils.checkIPv6(p_290034_.getAddress());
         Class<? extends SocketChannel> oclass;
         EventLoopGroup eventloopgroup;
         if (Epoll.isAvailable() && p_290035_) {
@@ -569,6 +_,14 @@
 
     public float getAverageSentPackets() {
         return this.averageSentPackets;
+    }
+
+    public Channel channel() {
+        return this.channel;
+    }
+
+    public PacketFlow getDirection() {
+        return this.receiving;
     }
 
     public void setBandwidthLogger(SampleLogger p_299187_) {
