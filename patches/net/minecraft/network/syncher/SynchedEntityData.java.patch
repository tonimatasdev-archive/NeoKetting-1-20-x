--- a/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/net/minecraft/network/syncher/SynchedEntityData.java
@@ -36,11 +_,13 @@
     }
 
     public static <T> EntityDataAccessor<T> defineId(Class<? extends Entity> p_135354_, EntityDataSerializer<T> p_135355_) {
-        if (LOGGER.isDebugEnabled()) {
+        if (true || LOGGER.isDebugEnabled()) { // Forge: This is very useful for mods that register keys on classes that are not their own
             try {
                 Class<?> oclass = Class.forName(Thread.currentThread().getStackTrace()[2].getClassName());
                 if (!oclass.equals(p_135354_)) {
-                    LOGGER.debug("defineId called for: {} from {}", p_135354_, oclass, new RuntimeException());
+                    // Forge: log at warn, mods should not add to classes that they don't own, and only add stacktrace when in debug is enabled as it is mostly not needed and consumes time
+                    if (LOGGER.isDebugEnabled()) LOGGER.warn("defineId called for: {} from {}", p_135354_, oclass, new RuntimeException());
+                    else LOGGER.warn("defineId called for: {} from {}", p_135354_, oclass);
                 }
             } catch (ClassNotFoundException classnotfoundexception) {
             }
@@ -72,7 +_,9 @@
         }
     }
 
+    public boolean registrationLocked; // Spigot
     public <T> void define(EntityDataAccessor<T> p_135373_, T p_135374_) {
+        // if (this.registrationLocked) throw new IllegalStateException("Registering datawatcher object after entity initialization"); // Spigot //Ketting - let mods define
         int i = p_135373_.getId();
         if (i > 254) {
             throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is 254)");
@@ -124,6 +_,10 @@
 
     public <T> void set(EntityDataAccessor<T> p_276368_, T p_276363_, boolean p_276370_) {
         SynchedEntityData.DataItem<T> dataitem = this.getItem(p_276368_);
+        if (!dataitem.getValue().getClass().isAssignableFrom(p_276363_.getClass())){
+            org.kettingpowered.ketting.core.Ketting.LOGGER.error("Bad set of EntityDataAccessor value. Ignoring", new IllegalStateException());
+            return;
+        }
         if (p_276370_ || ObjectUtils.notEqual(p_276363_, dataitem.getValue())) {
             dataitem.setValue(p_276363_);
             this.entity.onSyncedDataUpdated(p_276368_);
@@ -132,6 +_,13 @@
         }
     }
 
+    // CraftBukkit start - add method from above
+    public <T> void markDirty(EntityDataAccessor<T> datawatcherobject) {
+        this.getItem(datawatcherobject).setDirty(true);
+        this.isDirty = true;
+    }
+    // CraftBukkit end
+
     public boolean isDirty() {
         return this.isDirty;
     }
@@ -219,6 +_,18 @@
     public boolean isEmpty() {
         return this.itemsById.isEmpty();
     }
+
+    // CraftBukkit start
+    public void refresh(net.minecraft.server.level.ServerPlayer to) {
+        if (!this.isEmpty()) {
+            List<SynchedEntityData.DataValue<?>> list = this.getNonDefaultValues();
+
+            if (list != null) {
+                to.connection.send(new net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket(this.entity.getId(), list));
+            }
+        }
+    }
+    // CraftBukkit end
 
     public static class DataItem<T> {
         final EntityDataAccessor<T> accessor;
