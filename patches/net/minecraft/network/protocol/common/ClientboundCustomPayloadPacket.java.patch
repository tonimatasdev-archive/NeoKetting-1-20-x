--- a/net/minecraft/network/protocol/common/ClientboundCustomPayloadPacket.java
+++ b/net/minecraft/network/protocol/common/ClientboundCustomPayloadPacket.java
@@ -29,44 +_,61 @@
 
 public record ClientboundCustomPayloadPacket(CustomPacketPayload payload) implements Packet<ClientCommonPacketListener> {
     private static final int MAX_PAYLOAD_SIZE = 1048576;
-    public static final Map<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>> KNOWN_TYPES = ImmutableMap.<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>>builder(
-            
-        )
-        .put(BrandPayload.ID, BrandPayload::new)
-        .put(BeeDebugPayload.ID, BeeDebugPayload::new)
-        .put(BrainDebugPayload.ID, BrainDebugPayload::new)
-        .put(BreezeDebugPayload.ID, BreezeDebugPayload::new)
-        .put(GameEventDebugPayload.ID, GameEventDebugPayload::new)
-        .put(GameEventListenerDebugPayload.ID, GameEventListenerDebugPayload::new)
-        .put(GameTestAddMarkerDebugPayload.ID, GameTestAddMarkerDebugPayload::new)
-        .put(GameTestClearMarkersDebugPayload.ID, GameTestClearMarkersDebugPayload::new)
-        .put(GoalDebugPayload.ID, GoalDebugPayload::new)
-        .put(HiveDebugPayload.ID, HiveDebugPayload::new)
-        .put(NeighborUpdatesDebugPayload.ID, NeighborUpdatesDebugPayload::new)
-        .put(PathfindingDebugPayload.ID, PathfindingDebugPayload::new)
-        .put(PoiAddedDebugPayload.ID, PoiAddedDebugPayload::new)
-        .put(PoiRemovedDebugPayload.ID, PoiRemovedDebugPayload::new)
-        .put(PoiTicketCountDebugPayload.ID, PoiTicketCountDebugPayload::new)
-        .put(RaidsDebugPayload.ID, RaidsDebugPayload::new)
-        .put(StructuresDebugPayload.ID, StructuresDebugPayload::new)
-        .put(VillageSectionsDebugPayload.ID, VillageSectionsDebugPayload::new)
-        .put(WorldGenAttemptDebugPayload.ID, WorldGenAttemptDebugPayload::new)
-        .build();
+    public static final Map<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>> KNOWN_TYPES = ImmutableMap.<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>>builder().build(); // CraftBukkit - no special handling
 
+    /**
+     * @deprecated Use {@link #ClientboundCustomPayloadPacket(FriendlyByteBuf, io.netty.channel.ChannelHandlerContext, net.minecraft.network.ConnectionProtocol)} instead, as this variant can only read vanilla payloads.
+     */
+    @Deprecated()
     public ClientboundCustomPayloadPacket(FriendlyByteBuf p_295835_) {
         this(readPayload(p_295835_.readResourceLocation(), p_295835_));
     }
 
+    /**
+     * Reads a custom payload packet from the given buffer.
+     *
+     * @param buffer The buffer to read from
+     * @param context The context of the channel in which this packet is read
+     * @param protocol The protocol of the connection
+     */
+    public ClientboundCustomPayloadPacket(FriendlyByteBuf buffer, io.netty.channel.ChannelHandlerContext context, net.minecraft.network.ConnectionProtocol protocol) {
+        this(readPayload(buffer.readResourceLocation(), buffer, context, protocol));
+    }
+
+    /**
+     * Reads the payload from the given buffer.
+     *
+     * @param p_294367_ The id of the payload
+     * @param p_294321_ The buffer to read from
+     * @param context The context of the channel in which this packet is read
+     * @param protocol The protocol of the connection
+     * @return The payload
+     */
+    private static CustomPacketPayload readPayload(ResourceLocation p_294367_, FriendlyByteBuf p_294321_, io.netty.channel.ChannelHandlerContext context, net.minecraft.network.ConnectionProtocol protocol) {
+        try {
+            FriendlyByteBuf.Reader<? extends CustomPacketPayload> reader = net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().getReader(p_294367_, context, protocol, KNOWN_TYPES);
+            return (CustomPacketPayload) (reader != null ? reader.apply(p_294321_) : readUnknownPayload(p_294367_, p_294321_));
+        } catch (RuntimeException e) {
+            throw new RuntimeException("Failed reading custom payload " + p_294367_ + ": " + e, e); // Make it easier to debug which mod payload failed to be decoded
+        }
+    }
+
+    /**
+     * @deprecated Use {@link #readPayload(ResourceLocation, FriendlyByteBuf, io.netty.channel.ChannelHandlerContext, net.minecraft.network.ConnectionProtocol)} instead, as this variant can only read vanilla payloads.
+     */
+    @Deprecated
     private static CustomPacketPayload readPayload(ResourceLocation p_294802_, FriendlyByteBuf p_294886_) {
         FriendlyByteBuf.Reader<? extends CustomPacketPayload> reader = KNOWN_TYPES.get(p_294802_);
         return (CustomPacketPayload)(reader != null ? reader.apply(p_294886_) : readUnknownPayload(p_294802_, p_294886_));
     }
 
-    private static DiscardedPayload readUnknownPayload(ResourceLocation p_295991_, FriendlyByteBuf p_295803_) {
+    private static UnknownPayload readUnknownPayload(ResourceLocation p_295991_, FriendlyByteBuf p_295803_) { // CraftBukkit
         int i = p_295803_.readableBytes();
         if (i >= 0 && i <= 1048576) {
             p_295803_.skipBytes(i);
-            return new DiscardedPayload(p_295991_);
+            // CraftBukkit start
+            return new UnknownPayload(p_295991_, p_295803_.readBytes(i));
+            // CraftBukkit end
         } else {
             throw new IllegalArgumentException("Payload may not be larger than 1048576 bytes");
         }
@@ -75,10 +_,24 @@
     @Override
     public void write(FriendlyByteBuf p_295630_) {
         p_295630_.writeResourceLocation(this.payload.id());
+        try {
         this.payload.write(p_295630_);
+        } catch (RuntimeException e) {
+            throw new RuntimeException("Failed writing custom payload " + this.payload.id() + ": " + e, e); // Make it easier to debug which mod payload failed to be encoded
+        }
     }
 
     public void handle(ClientCommonPacketListener p_295761_) {
         p_295761_.handleCustomPayload(this);
     }
+
+    // CraftBukkit start
+    public record UnknownPayload(ResourceLocation id, io.netty.buffer.ByteBuf data) implements CustomPacketPayload {
+
+        @Override
+        public void write(FriendlyByteBuf packetdataserializer) {
+            packetdataserializer.writeBytes(data);
+        }
+    }
+    // CraftBukkit end
 }
