--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -60,14 +_,17 @@
     public final List<ConsoleInput> consoleInput = Collections.synchronizedList(Lists.newArrayList());
     @Nullable
     private QueryThreadGs4 queryThreadGs4;
-    private final RconConsoleSource rconConsoleSource;
+    // private final RconConsoleSource rconConsoleSource; // CraftBukkit - remove field
     @Nullable
     private RconThread rconThread;
     public DedicatedServerSettings settings;
     @Nullable
     private MinecraftServerGui gui;
+    public org.kettingpowered.ketting.common.betterservergui.BetterServerGUI betterGui; //Ketting
     @Nullable
     private final TextFilterClient textFilterClient;
+    @Nullable
+    private net.minecraft.client.server.LanServerPinger dediLanPinger;
 
     public DedicatedServer(
         Thread p_214789_,
@@ -81,7 +_,7 @@
     ) {
         super(p_214789_, p_214790_, p_214791_, p_214792_, Proxy.NO_PROXY, p_214794_, p_214795_, p_214796_);
         this.settings = p_214793_;
-        this.rconConsoleSource = new RconConsoleSource(this);
+        // this.rconConsoleSource = new RconConsoleSource(this); // CraftBukkit - remove field
         this.textFilterClient = TextFilterClient.createFromConfig(p_214793_.getProperties().textFilteringConfig);
     }
 
@@ -90,18 +_,73 @@
         Thread thread = new Thread("Server console handler") {
             @Override
             public void run() {
-                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
+                if (net.neoforged.neoforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
+                
+                // CraftBukkit start
+                if (!org.bukkit.craftbukkit.Main.useConsole) {
+                    return;
+                }
+                jline.console.ConsoleReader bufferedreader = reader;
+
+                // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+                try {
+                    System.in.available();
+                } catch (IOException ex) {
+                    return;
+                }
+                // CraftBukkit end
 
                 String s1;
                 try {
-                    while(!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (s1 = bufferedreader.readLine()) != null) {
-                        DedicatedServer.this.handleConsoleInput(s1, DedicatedServer.this.createCommandSourceStack());
+                    // CraftBukkit start - JLine disabling compatibility
+                    while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning()) {
+                        if (org.bukkit.craftbukkit.Main.useJline) {
+                            s1 = bufferedreader.readLine(">", null);
+                        } else {
+                            s1 = bufferedreader.readLine();
+                        }
+
+                        // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                        if (s1 == null) {
+                            try {
+                                Thread.sleep(50L);
+                            } catch (InterruptedException ex) {
+                                Thread.currentThread().interrupt();
+                            }
+                            continue;
+                        }
+                        if (s1.trim().length() > 0) { // Trim to filter lines which are just spaces
+                            DedicatedServer.this.handleConsoleInput(s1, DedicatedServer.this.createCommandSourceStack());
+                        }
+                        // CraftBukkit end
                     }
                 } catch (IOException ioexception1) {
                     DedicatedServer.LOGGER.error("Exception handling console input", (Throwable)ioexception1);
                 }
             }
         };
+
+        // CraftBukkit start - TODO: handle command-line logging arguments
+        java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+        global.setUseParentHandlers(false);
+        for (java.util.logging.Handler handler : global.getHandlers()) {
+            global.removeHandler(handler);
+        }
+        global.addHandler(new org.bukkit.craftbukkit.v1_20_R3.util.ForwardLogHandler());
+
+        final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) org.apache.logging.log4j.LogManager.getRootLogger());
+        for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+            if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+                logger.removeAppender(appender);
+            }
+        }
+
+        // new org.bukkit.craftbukkit.v1_20_R3.util.TerminalConsoleWriterThread(System.out, this.reader).start(); //Ketting - disable for now
+
+        System.setOut(org.apache.logging.log4j.io.IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.INFO).buildPrintStream());
+        System.setErr(org.apache.logging.log4j.io.IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.WARN).buildPrintStream());
+        // CraftBukkit end
+        
         thread.setDaemon(true);
         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
         thread.start();
@@ -120,12 +_,21 @@
             this.setLocalIp(dedicatedserverproperties.serverIp);
         }
 
+        // Spigot start
+        this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage));
+        org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+        org.spigotmc.SpigotConfig.registerCommands();
+        // Spigot end
+
+        org.kettingpowered.ketting.inject.ForgeInject.doInjectingMagic(); //Ketting
+        org.kettingpowered.ketting.command.commands.KettingCommands.registerCommands(this); //Ketting
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
         super.setPlayerIdleTimeout(dedicatedserverproperties.playerIdleTimeout.get());
         this.setEnforceWhitelist(dedicatedserverproperties.enforceWhitelist);
-        this.worldData.setGameType(dedicatedserverproperties.gamemode);
+        // this.worldData.setGameType(dedicatedserverproperties.gamemode); // CraftBukkit - moved to world loading
         LOGGER.info("Default game type: {}", dedicatedserverproperties.gamemode);
         InetAddress inetaddress = null;
         if (!this.getLocalIp().isEmpty()) {
@@ -148,9 +_,23 @@
             return false;
         }
 
+        // CraftBukkit start
+        // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // Spigot - moved up
+        server.loadPlugins();
+        server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+        // CraftBukkit end
+
         if (!this.usesAuthentication()) {
             LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
+            // Spigot start
+            if (org.spigotmc.SpigotConfig.bungee) {
+                DedicatedServer.LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+                DedicatedServer.LOGGER.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+            } else {
+                DedicatedServer.LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+            }
+            // Spigot end
             LOGGER.warn(
                 "While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose."
             );
@@ -164,15 +_,18 @@
         if (!OldUsersConverter.serverReadyAfterUserconversion(this)) {
             return false;
         } else {
-            this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage));
+            // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // CraftBukkit - moved up
             long i = Util.getNanos();
             SkullBlockEntity.setup(this.services, this);
             GameProfileCache.setUsesAuthentication(this.usesAuthentication());
+            net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerAboutToStart(this);
             LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
+            this.prepareLoadLevel(storageSource.getLevelId()); //Ketting
             this.loadLevel();
             long j = Util.getNanos() - i;
             String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9);
             LOGGER.info("Done ({})! For help, type \"help\"", s);
+            this.nextTickTimeNanos = Util.getNanos(); // Neo: Update server time to prevent watchdog/spaming during long load.
             if (dedicatedserverproperties.announcePlayerAchievements != null) {
                 this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(dedicatedserverproperties.announcePlayerAchievements, this);
             }
@@ -187,7 +_,7 @@
                 this.rconThread = RconThread.create(this);
             }
 
-            if (this.getMaxTickLength() > 0L) {
+            if (false && this.getMaxTickLength() > 0L) { // Spigot - disable
                 Thread thread1 = new Thread(new ServerWatchdog(this));
                 thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(LOGGER));
                 thread1.setName("Server Watchdog");
@@ -200,6 +_,14 @@
                 LOGGER.info("JMX monitoring enabled");
             }
 
+            if (net.neoforged.neoforge.common.NeoForgeConfig.SERVER.advertiseDedicatedServerToLan.get()) {
+                this.dediLanPinger = new net.minecraft.client.server.LanServerPinger(this.getMotd(), String.valueOf(this.getServerPort()));
+                this.dediLanPinger.start();
+            }
+
+            org.kettingpowered.ketting.metrics.MetricManager.init(this); //Ketting
+
+            net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStarting(this);
             return true;
         }
     }
@@ -267,9 +_,16 @@
             this.textFilterClient.close();
         }
 
-        if (this.gui != null) {
-            this.gui.close();
+        //Ketting start
+       /*
+       if (this.gui != null) {
+          this.gui.close();
+       }
+       */
+        if (this.betterGui != null) {
+            this.betterGui.close();
         }
+        //Ketting end
 
         if (this.rconThread != null) {
             this.rconThread.stop();
@@ -278,6 +_,10 @@
         if (this.queryThreadGs4 != null) {
             this.queryThreadGs4.stop();
         }
+        if (this.dediLanPinger != null) {
+            this.dediLanPinger.interrupt();
+            this.dediLanPinger = null;
+        }
     }
 
     @Override
@@ -296,10 +_,22 @@
     }
 
     public void handleConsoleInputs() {
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.serverCommandTimer.startTiming(); // Spigot
         while(!this.consoleInput.isEmpty()) {
             ConsoleInput consoleinput = this.consoleInput.remove(0);
-            this.getCommands().performPrefixedCommand(consoleinput.source, consoleinput.msg);
+            
+            // CraftBukkit start - ServerCommand for preprocessing
+            org.bukkit.event.server.ServerCommandEvent event = new org.bukkit.event.server.ServerCommandEvent(console, consoleinput.msg);
+            server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) continue;
+            consoleinput = new ConsoleInput(event.getCommand(), consoleinput.source);
+
+            // this.getCommands().performPrefixedCommand(consoleinput.source, consoleinput.msg); // Called in dispatchServerCommand
+            server.dispatchServerCommand(console, consoleinput);
+            // CraftBukkit end
         }
+
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     @Override
@@ -342,14 +_,28 @@
     }
 
     public void showGui() {
-        if (this.gui == null) {
-            this.gui = MinecraftServerGui.showFrameFor(this);
+        //Ketting start
+       /*
+       if (this.gui == null) {
+          this.gui = MinecraftServerGui.showFrameFor(this);
+       }
+ 
+       */
+        if (this.betterGui == null) {
+            final org.kettingpowered.ketting.adapters.BetterServerGUIAdapterImpl adapter = new org.kettingpowered.ketting.adapters.BetterServerGUIAdapterImpl(this);
+            this.betterGui = new org.kettingpowered.ketting.common.betterservergui.BetterServerGUI.Builder()
+                    .setAdapter(adapter)
+                    .build();
+            adapter.startAppender(this.betterGui);
+            this.addTickable(betterGui::tick);
         }
+        //Ketting end
     }
 
     @Override
     public boolean hasGui() {
-        return this.gui != null;
+        //return this.gui != null; //Ketting
+        return this.betterGui != null;
     }
 
     @Override
@@ -515,14 +_,52 @@
 
     @Override
     public String getPluginNames() {
-        return "";
+        // CraftBukkit start - Whole method
+        StringBuilder result = new StringBuilder();
+        org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+        result.append(server.getName());
+        result.append(" on Bukkit ");
+        result.append(server.getBukkitVersion());
+
+        if (plugins.length > 0 && server.getQueryPlugins()) {
+            result.append(": ");
+
+            for (int i = 0; i < plugins.length; i++) {
+                if (i > 0) {
+                    result.append("; ");
+                }
+
+                result.append(plugins[i].getDescription().getName());
+                result.append(" ");
+                result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+            }
+        }
+
+        return result.toString();
+        // CraftBukkit end
     }
 
     @Override
     public String runCommand(String p_139644_) {
-        this.rconConsoleSource.prepareForCommand();
-        this.executeBlocking(() -> this.getCommands().performPrefixedCommand(this.rconConsoleSource.createCommandSourceStack(), p_139644_));
-        return this.rconConsoleSource.getCommandResponse();
+        // CraftBukkit start - fire RemoteServerCommandEvent
+        throw new UnsupportedOperationException("Not supported - remote source required.");
+    }
+
+    public String runCommand(RconConsoleSource rconConsoleSource, String s) {
+        rconConsoleSource.prepareForCommand();
+        this.executeBlocking(() -> {
+            CommandSourceStack wrapper = rconConsoleSource.createCommandSourceStack();
+            org.bukkit.event.server.RemoteServerCommandEvent event = new org.bukkit.event.server.RemoteServerCommandEvent(rconConsoleSource.getBukkitSender(wrapper), s);
+            server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return;
+            }
+            ConsoleInput consoleInput = new ConsoleInput(event.getCommand(), wrapper);
+            server.dispatchServerCommand(event.getSender(), consoleInput);
+        });
+        return rconConsoleSource.getCommandResponse();
+        // CraftBukkit end
     }
 
     public void storeUsingWhiteList(boolean p_139689_) {
@@ -531,7 +_,12 @@
 
     @Override
     public void stopServer() {
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.GameShuttingDownEvent());
         super.stopServer();
+        if (this.dediLanPinger != null) {
+            this.dediLanPinger.interrupt();
+            this.dediLanPinger = null;
+        }
         Util.shutdownExecutors();
         SkullBlockEntity.clear();
     }
@@ -571,4 +_,49 @@
     public Optional<MinecraftServer.ServerResourcePackInfo> getServerResourcePack() {
         return this.settings.getProperties().serverResourcePackInfo;
     }
+
+    // CraftBukkit start
+    public boolean isDebugging() {
+        return this.getProperties().debug;
+    }
+
+    @Override
+    public org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper) {
+        return console;
+    }
+
+    public void initWorld(ServerLevel worldserver, net.minecraft.world.level.storage.PrimaryLevelData iworlddataserver, net.minecraft.world.level.storage.PrimaryLevelData saveData, net.minecraft.world.level.levelgen.WorldOptions worldoptions) {
+        boolean flag = saveData.isDebugWorld();
+        // CraftBukkit start
+        if (worldserver.generator != null) {
+            worldserver.getWorld().getPopulators().addAll(worldserver.generator.getDefaultPopulators(worldserver.getWorld()));
+        }
+        net.minecraft.world.level.border.WorldBorder worldborder = worldserver.getWorldBorder();
+        worldborder.applySettings(iworlddataserver.getWorldBorder()); // CraftBukkit - move up so that net.minecraft.world.level.border.WorldBorder is set during WorldInitEvent
+        this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(worldserver.getWorld())); // CraftBukkit - SPIGOT-5569: Call WorldInitEvent before any chunks are generated
+
+        if (!iworlddataserver.isInitialized()) {
+            try {
+                setInitialSpawn(worldserver, iworlddataserver, worldoptions.generateBonusChest(), flag);
+                iworlddataserver.setInitialized(true);
+                if (flag) {
+                    this.setupDebugLevel(this.worldData);
+                }
+            } catch (Throwable throwable) {
+                net.minecraft.CrashReport crashreport = net.minecraft.CrashReport.forThrowable(throwable, "Exception initializing level");
+
+                try {
+                    worldserver.fillReportDetails(crashreport);
+                } catch (Throwable throwable1) {
+                    ;
+                }
+
+                throw new net.minecraft.ReportedException(crashreport);
+            }
+
+            iworlddataserver.setInitialized(true);
+        }
+
+    }
+    // CraftBukkit end
 }
