--- a/net/minecraft/server/level/ServerEntity.java
+++ b/net/minecraft/server/level/ServerEntity.java
@@ -63,8 +_,13 @@
     private boolean wasOnGround;
     @Nullable
     private List<SynchedEntityData.DataValue<?>> trackedDataValues;
+    // CraftBukkit start
+    private final Set<net.minecraft.server.network.ServerPlayerConnection> trackedPlayers;
+    public static Set<net.minecraft.server.network.ServerPlayerConnection> init$trackedPlayers = null; // Ketting
 
     public ServerEntity(ServerLevel p_8528_, Entity p_8529_, int p_8530_, boolean p_8531_, Consumer<Packet<?>> p_8532_) {
+        this.trackedPlayers = init$trackedPlayers == null ? new java.util.HashSet<>() : init$trackedPlayers; // Ketting
+        // CraftBukkit end
         this.level = p_8528_;
         this.broadcast = p_8532_;
         this.entity = p_8529_;
@@ -81,7 +_,7 @@
     public void sendChanges() {
         List<Entity> list = this.entity.getPassengers();
         if (!list.equals(this.lastPassengers)) {
-            this.broadcast.accept(new ClientboundSetPassengersPacket(this.entity));
+            this.broadcastAndSend(new ClientboundSetPassengersPacket(this.entity)); // CraftBukkit
             removedPassengers(list, this.lastPassengers)
                 .forEach(
                     p_311547_ -> {
@@ -95,17 +_,23 @@
         }
 
         Entity $$11 = this.entity;
-        if ($$11 instanceof ItemFrame itemframe && this.tickCount % 10 == 0) {
-            ItemStack itemstack = itemframe.getItem();
-            if (itemstack.getItem() instanceof MapItem) {
-                Integer integer = MapItem.getMapId(itemstack);
-                MapItemSavedData mapitemsaveddata = MapItem.getSavedData(integer, this.level);
-                if (mapitemsaveddata != null) {
-                    for(ServerPlayer serverplayer : this.level.players()) {
-                        mapitemsaveddata.tickCarriedBy(serverplayer, itemstack);
-                        Packet<?> packet = mapitemsaveddata.getUpdatePacket(integer, serverplayer);
-                        if (packet != null) {
-                            serverplayer.connection.send(packet);
+        if ($$11 instanceof ItemFrame itemframe) {
+            if (true || this.tickCount % 10 == 0) { // CraftBukkit - Moved below, should always enter this block
+                ItemStack itemstack = itemframe.getItem();
+
+                if (this.tickCount % 10 == 0 && itemstack.getItem() instanceof MapItem) { // CraftBukkit - Moved this.tickCounter % 10 logic here so item frames do not enter the other blocks
+                    Integer integer = MapItem.getMapId(itemstack);
+                    MapItemSavedData mapitemsaveddata = MapItem.getSavedData(itemstack, this.level);
+
+                    if (mapitemsaveddata != null) {
+                        for (net.minecraft.server.network.ServerPlayerConnection connection : this.trackedPlayers) { // CraftBukkit
+                            ServerPlayer serverplayer = connection.getPlayer(); // CraftBukkit
+
+                            mapitemsaveddata.tickCarriedBy(serverplayer, itemstack);
+                            Packet<?> packet = mapitemsaveddata.getUpdatePacket(integer, serverplayer);
+                            if (packet != null) {
+                                serverplayer.connection.send(packet);
+                            }
                         }
                     }
                 }
@@ -207,7 +_,27 @@
 
         ++this.tickCount;
         if (this.entity.hurtMarked) {
-            this.broadcastAndSend(new ClientboundSetEntityMotionPacket(this.entity));
+            // CraftBukkit start - Create PlayerVelocity event
+            boolean cancelled = false;
+
+            if (this.entity instanceof ServerPlayer) {
+                org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.entity.getBukkitEntity();
+                org.bukkit.util.Vector velocity = player.getVelocity();
+
+                org.bukkit.event.player.PlayerVelocityEvent event = new org.bukkit.event.player.PlayerVelocityEvent(player, velocity.clone());
+                this.entity.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    cancelled = true;
+                } else if (!velocity.equals(event.getVelocity())) {
+                    player.setVelocity(event.getVelocity());
+                }
+            }
+
+            if (!cancelled) {
+                this.broadcastAndSend(new ClientboundSetEntityMotionPacket(this.entity));
+            }
+            // CraftBukkit end
             this.entity.hurtMarked = false;
         }
     }
@@ -219,23 +_,29 @@
     public void removePairing(ServerPlayer p_8535_) {
         this.entity.stopSeenByPlayer(p_8535_);
         p_8535_.connection.send(new ClientboundRemoveEntitiesPacket(this.entity.getId()));
+        net.neoforged.neoforge.event.EventHooks.onStopEntityTracking(this.entity, p_8535_);
     }
 
     public void addPairing(ServerPlayer p_8542_) {
-        List<Packet<ClientGamePacketListener>> list = new ArrayList<>();
-        this.sendPairingData(p_8542_, list::add);
+        List<Packet<? super ClientGamePacketListener>> list = new ArrayList<>();
+        this.sendPairingData(p_8542_, new net.neoforged.neoforge.network.bundle.PacketAndPayloadAcceptor<>(list::add));
         p_8542_.connection.send(new ClientboundBundlePacket(list));
         this.entity.startSeenByPlayer(p_8542_);
+        net.neoforged.neoforge.event.EventHooks.onStartEntityTracking(this.entity, p_8542_);
     }
 
-    public void sendPairingData(ServerPlayer p_289562_, Consumer<Packet<ClientGamePacketListener>> p_289563_) {
+    public void sendPairingData(ServerPlayer p_289562_, net.neoforged.neoforge.network.bundle.PacketAndPayloadAcceptor<net.minecraft.network.protocol.game.ClientGamePacketListener> p_289563_) {
         if (this.entity.isRemoved()) {
-            LOGGER.warn("Fetching packet for removed entity {}", this.entity);
+            // CraftBukkit start - Remove useless error spam, just return
+            // LOGGER.warn("Fetching packet for removed entity {}", (Object)this.entity);
+            return;
+            // CraftBukkit end
         }
 
         Packet<ClientGamePacketListener> packet = this.entity.getAddEntityPacket();
         this.yHeadRotp = Mth.floor(this.entity.getYHeadRot() * 256.0F / 360.0F);
         p_289563_.accept(packet);
+        this.entity.sendPairingData(p_289562_, p_289563_::accept);
         if (this.trackedDataValues != null) {
             p_289563_.accept(new ClientboundSetEntityDataPacket(this.entity.getId(), this.trackedDataValues));
         }
@@ -243,6 +_,11 @@
         boolean flag = this.trackDelta;
         if (this.entity instanceof LivingEntity) {
             Collection<AttributeInstance> collection = ((LivingEntity)this.entity).getAttributes().getSyncableAttributes();
+            // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
+            if (this.entity.getId() == p_289562_.getId()) {
+                ((ServerPlayer) this.entity).getBukkitEntity().injectScaledMaxHealth(collection, false);
+            }
+            // CraftBukkit end
             if (!collection.isEmpty()) {
                 p_289563_.accept(new ClientboundUpdateAttributesPacket(this.entity.getId(), collection));
             }
@@ -270,7 +_,14 @@
             if (!list.isEmpty()) {
                 p_289563_.accept(new ClientboundSetEquipmentPacket(this.entity.getId(), list));
             }
-        }
+            ((LivingEntity) this.entity).detectEquipmentUpdatesPublic(); // CraftBukkit - SPIGOT-3789: sync again immediately after sending
+        }
+
+        // CraftBukkit start - MC-109346: Fix for nonsensical head yaw
+        if (this.entity instanceof ServerPlayer) {
+            p_289563_.accept(new ClientboundRotateHeadPacket(this.entity, (byte) Mth.floor(this.entity.getYHeadRot() * 256.0F / 360.0F)));
+        }
+        // CraftBukkit end
 
         if (!this.entity.getPassengers().isEmpty()) {
             p_289563_.accept(new ClientboundSetPassengersPacket(this.entity));
@@ -297,6 +_,11 @@
         if (this.entity instanceof LivingEntity) {
             Set<AttributeInstance> set = ((LivingEntity)this.entity).getAttributes().getDirtyAttributes();
             if (!set.isEmpty()) {
+                // CraftBukkit start - Send scaled max health
+                if (this.entity instanceof ServerPlayer) {
+                    ((ServerPlayer) this.entity).getBukkitEntity().injectScaledMaxHealth(set, false);
+                }
+                // CraftBukkit end
                 this.broadcastAndSend(new ClientboundUpdateAttributesPacket(this.entity.getId(), set));
             }
 
