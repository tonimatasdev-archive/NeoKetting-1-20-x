--- a/net/minecraft/server/network/ServerConnectionListener.java
+++ b/net/minecraft/server/network/ServerConnectionListener.java
@@ -48,11 +_,12 @@
 
 public class ServerConnectionListener {
     private static final Logger LOGGER = LogUtils.getLogger();
+    private static final int READ_TIMEOUT = Integer.parseInt(System.getProperty("neoforge.readTimeout", "30"));
     public static final Supplier<NioEventLoopGroup> SERVER_EVENT_GROUP = Suppliers.memoize(
-        () -> new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Server IO #%d").setDaemon(true).build())
+        () -> new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).setThreadFactory(net.neoforged.fml.util.thread.SidedThreadGroups.SERVER).build())
     );
     public static final Supplier<EpollEventLoopGroup> SERVER_EPOLL_EVENT_GROUP = Suppliers.memoize(
-        () -> new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build())
+        () -> new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).setThreadFactory(net.neoforged.fml.util.thread.SidedThreadGroups.SERVER).build())
     );
     final MinecraftServer server;
     public volatile boolean running;
@@ -65,6 +_,8 @@
     }
 
     public void startTcpServerListener(@Nullable InetAddress p_9712_, int p_9713_) throws IOException {
+        if (p_9712_ == null) p_9712_ = new java.net.InetSocketAddress(p_9713_).getAddress();
+        net.neoforged.neoforge.network.DualStackUtils.checkIPv6(p_9712_);
         synchronized(this.channels) {
             Class<? extends ServerSocketChannel> oclass;
             EventLoopGroup eventloopgroup;
@@ -94,7 +_,7 @@
                                     }
                 
                                     ChannelPipeline channelpipeline = p_9729_.pipeline()
-                                        .addLast("timeout", new ReadTimeoutHandler(30))
+                                        .addLast("timeout", new ReadTimeoutHandler(READ_TIMEOUT))
                                         .addLast("legacy_query", new LegacyQueryHandler(ServerConnectionListener.this.getServer()));
                                     Connection.configureSerialization(channelpipeline, PacketFlow.SERVERBOUND, null);
                                     int i = ServerConnectionListener.this.server.getRateLimitPacketsPerSecond();
@@ -115,6 +_,16 @@
         }
     }
 
+    // CraftBukkit start
+    public void acceptConnections() {
+        synchronized (this.channels) {
+            for (ChannelFuture future : this.channels) {
+                future.channel().config().setAutoRead(true);
+            }
+        }
+    }
+    // CraftBukkit end
+
     public SocketAddress startMemoryChannel() {
         ChannelFuture channelfuture;
         synchronized(this.channels) {
@@ -160,6 +_,13 @@
 
     public void tick() {
         synchronized(this.connections) {
+            // Spigot Start
+            // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
+            if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
+            {
+                Collections.shuffle( this.connections );
+            }
+            // Spigot End
             Iterator<Connection> iterator = this.connections.iterator();
 
             while(iterator.hasNext()) {
@@ -179,6 +_,10 @@
                             connection.setReadOnly();
                         }
                     } else {
+                        // Spigot Start
+                        // Fix a race condition where a NetworkManager could be unregistered just before connection.
+                        if (connection.preparing) continue;
+                        // Spigot End
                         iterator.remove();
                         connection.handleDisconnection();
                     }
