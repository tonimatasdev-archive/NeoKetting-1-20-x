--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -109,7 +_,7 @@
     private static final int SEND_PLAYER_INFO_INTERVAL = 600;
     private static final SimpleDateFormat BAN_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
     private final MinecraftServer server;
-    public final List<ServerPlayer> players = Lists.newArrayList();
+    public final List<ServerPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - java.util.ArrayList -> CopyOnWriteArrayList: java.util.Iterator safety
     private final Map<UUID, ServerPlayer> playersByUUID = Maps.newHashMap();
     private final UserBanList bans = new UserBanList(USERBANLIST_FILE);
     private final IpBanList ipBans = new IpBanList(IPBANLIST_FILE);
@@ -126,8 +_,17 @@
     private boolean allowCheatsForAllPlayers;
     private static final boolean ALLOW_LOGOUTIVATOR = false;
     private int sendAllPlayerInfoIn;
+    private final List<ServerPlayer> playersView = java.util.Collections.unmodifiableList(players);
+    // CraftBukkit start
+    private org.bukkit.craftbukkit.v1_20_R3.CraftServer cserver;
+    private final Map<String, ServerPlayer> playersByName = new java.util.HashMap<>();
 
     public PlayerList(MinecraftServer p_203842_, LayeredRegistryAccess<RegistryLayer> p_251844_, PlayerDataStorage p_203844_, int p_203845_) {
+        this.cserver = p_203842_.server = new org.bukkit.craftbukkit.v1_20_R3.CraftServer((net.minecraft.server.dedicated.DedicatedServer) p_203842_, this);
+        p_203842_.console = org.bukkit.craftbukkit.v1_20_R3.command.ColouredConsoleSender.getInstance();
+        p_203842_.reader.addCompleter(new org.bukkit.craftbukkit.v1_20_R3.command.ConsoleCommandCompleter(p_203842_.server));
+        // CraftBukkit end
+
         this.server = p_203842_;
         this.registries = p_251844_;
         this.maxPlayers = p_203845_;
@@ -147,9 +_,14 @@
         }
 
         CompoundTag compoundtag = this.load(p_11263_);
-        ResourceKey<Level> resourcekey = compoundtag != null
-            ? DimensionType.parseLegacy(new Dynamic<>(NbtOps.INSTANCE, compoundtag.get("Dimension"))).resultOrPartial(LOGGER::error).orElse(Level.OVERWORLD)
-            : Level.OVERWORLD;
+        // CraftBukkit start - Better rename detection
+        if (compoundtag != null && compoundtag.contains("bukkit")) {
+            CompoundTag bukkit = compoundtag.getCompound("bukkit");
+            s = bukkit.contains("lastKnownName", 8) ? bukkit.getString("lastKnownName") : s;
+        }
+        // CraftBukkit end
+
+        ResourceKey<Level> resourcekey = compoundtag != null ? DimensionType.parseLegacy(new Dynamic<>(NbtOps.INSTANCE, compoundtag.get("Dimension"))).resultOrPartial(LOGGER::error).orElse(p_11263_.serverLevel().dimension()) : p_11263_.serverLevel().dimension();
         ServerLevel serverlevel = this.server.getLevel(resourcekey);
         ServerLevel serverlevel1;
         if (serverlevel == null) {
@@ -161,15 +_,21 @@
 
         p_11263_.setServerLevel(serverlevel1);
         String s1 = p_11262_.getLoggableAddress(this.server.logIPs());
-        LOGGER.info(
-            "{}[{}] logged in with entity id {} at ({}, {}, {})",
-            p_11263_.getName().getString(),
-            s1,
-            p_11263_.getId(),
-            p_11263_.getX(),
-            p_11263_.getY(),
-            p_11263_.getZ()
-        );
+        // Spigot start - spawn location event
+        org.bukkit.entity.Player spawnPlayer = p_11263_.getBukkitEntity();
+        org.spigotmc.event.player.PlayerSpawnLocationEvent ev = new org.spigotmc.event.player.PlayerSpawnLocationEvent(spawnPlayer, spawnPlayer.getLocation());
+        cserver.getPluginManager().callEvent(ev);
+
+        org.bukkit.Location loc = ev.getSpawnLocation();
+        serverlevel1 = ((org.bukkit.craftbukkit.v1_20_R3.CraftWorld) loc.getWorld()).getHandle();
+
+        p_11263_.spawnIn(serverlevel1);
+        p_11263_.gameMode.setLevel((ServerLevel) p_11263_.level());
+        p_11263_.absMoveTo(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch());
+        // Spigot end
+
+        // CraftBukkit - Moved message to after join
+        // LOGGER.info("{}[{}] logged in with entity id {} at ({}, {}, {})", p_11263_.getName().getString(), s1, p_11263_.getId(), p_11263_.getX(), p_11263_.getY(), p_11263_.getZ());
         LevelData leveldata = serverlevel1.getLevelData();
         p_11263_.loadGameTypes(compoundtag);
         ServerGamePacketListenerImpl servergamepacketlistenerimpl = new ServerGamePacketListenerImpl(this.server, p_11262_, p_11263_, p_301988_);
@@ -177,23 +_,13 @@
         boolean flag = gamerules.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
         boolean flag1 = gamerules.getBoolean(GameRules.RULE_REDUCEDDEBUGINFO);
         boolean flag2 = gamerules.getBoolean(GameRules.RULE_LIMITED_CRAFTING);
-        servergamepacketlistenerimpl.send(
-            new ClientboundLoginPacket(
-                p_11263_.getId(),
-                leveldata.isHardcore(),
-                this.server.levelKeys(),
-                this.getMaxPlayers(),
-                this.viewDistance,
-                this.simulationDistance,
-                flag1,
-                !flag,
-                flag2,
-                p_11263_.createCommonSpawnInfo(serverlevel1)
-            )
-        );
+        // Spigot - view distance
+        servergamepacketlistenerimpl.send(new ClientboundLoginPacket(p_11263_.getId(), leveldata.isHardcore(), this.server.levelKeys(), this.getMaxPlayers(), serverlevel1.spigotConfig.viewDistance, serverlevel1.spigotConfig.simulationDistance, flag1, !flag, flag2, p_11263_.createCommonSpawnInfo(serverlevel1)));
+        p_11263_.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
         servergamepacketlistenerimpl.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
         servergamepacketlistenerimpl.send(new ClientboundPlayerAbilitiesPacket(p_11263_.getAbilities()));
         servergamepacketlistenerimpl.send(new ClientboundSetCarriedItemPacket(p_11263_.getInventory().selected));
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.OnDatapackSyncEvent(this, p_11263_));
         servergamepacketlistenerimpl.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes()));
         this.sendPlayerPermissionLevel(p_11263_);
         p_11263_.getStats().markAllDirty();
@@ -207,30 +_,85 @@
             mutablecomponent = Component.translatable("multiplayer.player.joined.renamed", p_11263_.getDisplayName(), s);
         }
 
-        this.broadcastSystemMessage(mutablecomponent.withStyle(ChatFormatting.YELLOW), false);
+        // CraftBukkit start
+        mutablecomponent.withStyle(ChatFormatting.YELLOW);
+        String joinMessage = org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage.fromComponent(mutablecomponent);
         servergamepacketlistenerimpl.teleport(p_11263_.getX(), p_11263_.getY(), p_11263_.getZ(), p_11263_.getYRot(), p_11263_.getXRot());
         ServerStatus serverstatus = this.server.getStatus();
         if (serverstatus != null) {
             p_11263_.sendServerStatus(serverstatus);
         }
 
-        p_11263_.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(this.players));
+        // p_11263_.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(this.players)); // CraftBukkit - replaced with loop below
         this.players.add(p_11263_);
+        this.playersByName.put(p_11263_.getScoreboardName().toLowerCase(java.util.Locale.ROOT), p_11263_); // Spigot
         this.playersByUUID.put(p_11263_.getUUID(), p_11263_);
-        this.broadcastAll(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(p_11263_)));
+        // this.broadcastAll(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(p_11263_))); // CraftBukkit - replaced with loop below
+
+        // CraftBukkit start
+        org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer bukkitPlayer = p_11263_.getBukkitEntity();
+
+        // Ensure that player inventory is populated with its viewer
+        org.kettingpowered.ketting.utils.InventoryViewHelper.setContainerOwner(p_11263_); //Ketting
+        p_11263_.containerMenu.transferTo(p_11263_.containerMenu, bukkitPlayer);
+        org.kettingpowered.ketting.utils.InventoryViewHelper.clearContainerOwner(); //Ketting
+
+        org.bukkit.event.player.PlayerJoinEvent playerJoinEvent = new org.bukkit.event.player.PlayerJoinEvent(bukkitPlayer, joinMessage);
+        cserver.getPluginManager().callEvent(playerJoinEvent);
+
+        if (!p_11263_.connection.isAcceptingMessages()) {
+            return;
+        }
+
+        joinMessage = playerJoinEvent.getJoinMessage();
+
+        if (joinMessage != null && joinMessage.length() > 0) {
+            for (Component line : org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage.fromString(joinMessage)) {
+                server.getPlayerList().broadcastSystemMessage(line, false);
+            }
+        }
+        // CraftBukkit end
+
+        // CraftBukkit start - sendAll above replaced with this loop
+        ClientboundPlayerInfoUpdatePacket packet = ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(p_11263_));
+        for (ServerPlayer player : this.players) {
+            if (player.getBukkitEntity().canSee(bukkitPlayer)) {
+                player.connection.send(packet);
+            }
+
+            if (!bukkitPlayer.canSee(player.getBukkitEntity())) {
+                continue;
+            }
+
+            p_11263_.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(player)));
+        }
+        p_11263_.sentListPacket = true;
+        // CraftBukkit end
+
+        p_11263_.getEntityData().refresh(p_11263_); // CraftBukkit - BungeeCord#2321, send complete data to self on spawn
+
         this.sendLevelInfo(p_11263_, serverlevel1);
-        serverlevel1.addNewPlayer(p_11263_);
-        this.server.getCustomBossEvents().onPlayerConnect(p_11263_);
-
-        for(MobEffectInstance mobeffectinstance : p_11263_.getActiveEffects()) {
+        // CraftBukkit start - Only add if the player wasn't moved in the event
+        if (p_11263_.level() == serverlevel1 && !serverlevel1.players().contains(p_11263_)) {
+            serverlevel1.addNewPlayer(p_11263_);
+            this.server.getCustomBossEvents().onPlayerConnect(p_11263_);
+        }
+
+        serverlevel1 = p_11263_.serverLevel(); // CraftBukkit - Update in case join event changed it
+        // CraftBukkit end
+
+        for (MobEffectInstance mobeffectinstance : p_11263_.getActiveEffects()) {
             servergamepacketlistenerimpl.send(new ClientboundUpdateMobEffectPacket(p_11263_.getId(), mobeffectinstance));
         }
 
         if (compoundtag != null && compoundtag.contains("RootVehicle", 10)) {
             CompoundTag compoundtag1 = compoundtag.getCompound("RootVehicle");
-            Entity entity1 = EntityType.loadEntityRecursive(
-                compoundtag1.getCompound("Entity"), serverlevel1, p_215603_ -> !serverlevel1.addWithUUID(p_215603_) ? null : p_215603_
-            );
+            // CraftBukkit start
+            ServerLevel finalServerLevel = serverlevel1;
+            Entity entity1 = EntityType.loadEntityRecursive(compoundtag1.getCompound("Entity"), finalServerLevel, (p_215603_) -> {
+                return !finalServerLevel.addWithUUID(p_215603_) ? null : p_215603_;
+                // CraftBukkit end
+            });
             if (entity1 != null) {
                 UUID uuid;
                 if (compoundtag1.hasUUID("Attach")) {
@@ -262,6 +_,9 @@
         }
 
         p_11263_.initInventoryMenu();
+        net.neoforged.neoforge.event.EventHooks.firePlayerLoggedIn( p_11263_ );
+        // CraftBukkit - Moved from above, added world
+        LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", p_11263_.getName().getString(), s1, p_11263_.getId(), serverlevel1.serverLevelData.getLevelName(), p_11263_.getX(), p_11263_.getY(), p_11263_.getZ());
     }
 
     public void updateEntireScoreboard(ServerScoreboard p_11274_, ServerPlayer p_11275_) {
@@ -284,30 +_,31 @@
     }
 
     public void addWorldborderListener(ServerLevel p_184210_) {
+        if (playerIo != null) return; // CraftBukkit
         p_184210_.getWorldBorder().addListener(new BorderChangeListener() {
             @Override
             public void onBorderSizeSet(WorldBorder p_11321_, double p_11322_) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderSizePacket(p_11321_));
+                PlayerList.this.broadcastAll(new ClientboundSetBorderSizePacket(p_11321_), p_11321_.world); // CraftBukkit
             }
 
             @Override
             public void onBorderSizeLerping(WorldBorder p_11328_, double p_11329_, double p_11330_, long p_11331_) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderLerpSizePacket(p_11328_));
+                PlayerList.this.broadcastAll(new ClientboundSetBorderLerpSizePacket(p_11328_), p_11328_.world); // CraftBukkit
             }
 
             @Override
             public void onBorderCenterSet(WorldBorder p_11324_, double p_11325_, double p_11326_) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderCenterPacket(p_11324_));
+                PlayerList.this.broadcastAll(new ClientboundSetBorderCenterPacket(p_11324_), p_11324_.world); // CraftBukkit
             }
 
             @Override
             public void onBorderSetWarningTime(WorldBorder p_11333_, int p_11334_) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDelayPacket(p_11333_));
+                PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDelayPacket(p_11333_), p_11333_.world); // CraftBukkit
             }
 
             @Override
             public void onBorderSetWarningBlocks(WorldBorder p_11339_, int p_11340_) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDistancePacket(p_11339_));
+                PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDistancePacket(p_11339_), p_11339_.world); // CraftBukkit
             }
 
             @Override
@@ -328,6 +_,7 @@
             compoundtag1 = compoundtag;
             p_11225_.load(compoundtag);
             LOGGER.debug("loading single player");
+            net.neoforged.neoforge.event.EventHooks.firePlayerLoadingEvent(p_11225_, this.playerIo, p_11225_.getUUID().toString());
         } else {
             compoundtag1 = this.playerIo.load(p_11225_);
         }
@@ -336,21 +_,43 @@
     }
 
     protected void save(ServerPlayer p_11277_) {
+        if (!p_11277_.getBukkitEntity().isPersistent()) return; // CraftBukkit
+        if (p_11277_.connection == null) return;
         this.playerIo.save(p_11277_);
-        ServerStatsCounter serverstatscounter = this.stats.get(p_11277_.getUUID());
+        ServerStatsCounter serverstatscounter = p_11277_.getStats(); // CraftBukkit
         if (serverstatscounter != null) {
             serverstatscounter.save();
         }
 
-        PlayerAdvancements playeradvancements = this.advancements.get(p_11277_.getUUID());
+        PlayerAdvancements playeradvancements = p_11277_.getAdvancements(); // CraftBukkit
         if (playeradvancements != null) {
             playeradvancements.save();
         }
     }
 
+    public String ketting$remove$returnValue = "";
+    public String removeString(ServerPlayer p_11287_) { // CraftBukkit - return string
+        remove(p_11287_);
+        return ketting$remove$returnValue;
+    }
     public void remove(ServerPlayer p_11287_) {
+        net.neoforged.neoforge.event.EventHooks.firePlayerLoggedOut(p_11287_);
         ServerLevel serverlevel = p_11287_.serverLevel();
         p_11287_.awardStat(Stats.LEAVE_GAME);
+
+        // CraftBukkit start - Quitting must be before we do final save of data, in case plugins need to modify it
+        // See SPIGOT-5799, SPIGOT-6145
+        if (p_11287_.containerMenu != p_11287_.inventoryMenu) {
+            p_11287_.closeContainer();
+        }
+
+        org.bukkit.event.player.PlayerQuitEvent playerQuitEvent = new org.bukkit.event.player.PlayerQuitEvent(p_11287_.getBukkitEntity(), p_11287_.kickLeaveMessage != null ? p_11287_.kickLeaveMessage : "\u00A7e" + p_11287_.getScoreboardName() + " left the game");
+        cserver.getPluginManager().callEvent(playerQuitEvent);
+        p_11287_.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
+
+        p_11287_.doTick(); // SPIGOT-924
+        // CraftBukkit end
+
         this.save(p_11287_);
         if (p_11287_.isPassenger()) {
             Entity entity = p_11287_.getRootVehicle();
@@ -365,6 +_,7 @@
         serverlevel.removePlayerImmediately(p_11287_, Entity.RemovalReason.UNLOADED_WITH_PLAYER);
         p_11287_.getAdvancements().stopListening();
         this.players.remove(p_11287_);
+        this.playersByName.remove(p_11287_.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         this.server.getCustomBossEvents().onPlayerDisconnect(p_11287_);
         UUID uuid = p_11287_.getUUID();
         ServerPlayer serverplayer = this.playersByUUID.get(uuid);
@@ -372,9 +_,25 @@
             this.playersByUUID.remove(uuid);
             this.stats.remove(uuid);
             this.advancements.remove(uuid);
-        }
-
-        this.broadcastAll(new ClientboundPlayerInfoRemovePacket(List.of(p_11287_.getUUID())));
+            // CraftBukkit start
+            // CraftBukkit end
+        }
+
+        // CraftBukkit start
+        // this.broadcastAll(new ClientboundPlayerInfoRemovePacket(List.of(p_11287_.getUUID())));
+        ClientboundPlayerInfoRemovePacket packet = new ClientboundPlayerInfoRemovePacket(List.of(p_11287_.getUUID()));
+        for (ServerPlayer player : this.players) {
+            if (player.getBukkitEntity().canSee(p_11287_.getBukkitEntity())) {
+                player.connection.send(packet);
+            } else {
+                player.getBukkitEntity().onEntityRemove(p_11287_);
+            }
+        }
+        // This removes the scoreboard (and player reference) for the specific player in the manager
+        cserver.getScoreboardManager().removePlayer(p_11287_.getBukkitEntity());
+        // CraftBukkit end
+
+        ketting$remove$returnValue = playerQuitEvent.getQuitMessage(); // CraftBukkit
     }
 
     @Nullable
@@ -408,10 +_,83 @@
         }
     }
 
+    // CraftBukkit start - Whole method, SocketAddress to LoginListener, added hostname to signature, return EntityPlayer
+    public ServerPlayer canPlayerLogin(net.minecraft.server.network.ServerLoginPacketListenerImpl loginlistener, GameProfile gameprofile) {
+        MutableComponent mutablecomponent;
+
+        // Moved from pprocessLogin
+        UUID uuid = gameprofile.getId();
+        List<ServerPlayer> list = Lists.newArrayList();
+
+        for (ServerPlayer player : this.players) {
+            if (player.getUUID().equals(uuid)) {
+                list.add(player);
+            }
+        }
+
+        for (ServerPlayer serverPlayer : list) {
+            save(serverPlayer); // CraftBukkit - Force the player's inventory to be saved
+            serverPlayer.connection.disconnect(Component.translatable("multiplayer.disconnect.duplicate_login"));
+        }
+
+        // Instead of kicking then returning, we need to store the kick reason
+        // in the event, check with plugins to see if it's ok, and THEN kick
+        // depending on the outcome.
+        SocketAddress socketaddress = loginlistener.connection.getRemoteAddress();
+
+        ServerPlayer player = new ServerPlayer(this.server, this.server.overworld(), gameprofile, ClientInformation.createDefault());
+        org.bukkit.entity.Player bukkitPlayer = player.getBukkitEntity();
+        org.bukkit.event.player.PlayerLoginEvent event = new org.bukkit.event.player.PlayerLoginEvent(bukkitPlayer, loginlistener.connection.hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.connection.channel.remoteAddress()).getAddress());
+
+        if (getBans().isBanned(gameprofile) && !getBans().get(gameprofile).hasExpired()) {
+            UserBanListEntry gameprofilebanentry = this.bans.get(gameprofile);
+
+            mutablecomponent = Component.translatable("multiplayer.disconnect.banned.reason", gameprofilebanentry.getReason());
+            if (gameprofilebanentry.getExpires() != null) {
+                mutablecomponent.append(Component.translatable("multiplayer.disconnect.banned.expiration", PlayerList.BAN_DATE_FORMAT.format(gameprofilebanentry.getExpires())));
+            }
+
+            // return chatmessage;
+            event.disallow(org.bukkit.event.player.PlayerLoginEvent.Result.KICK_BANNED, org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage.fromComponent(mutablecomponent));
+        } else if (!this.isWhiteListed(gameprofile)) {
+            mutablecomponent = Component.translatable("multiplayer.disconnect.not_whitelisted");
+            event.disallow(org.bukkit.event.player.PlayerLoginEvent.Result.KICK_WHITELIST, org.spigotmc.SpigotConfig.whitelistMessage); // Spigot
+        } else if (getIpBans().isBanned(socketaddress) && !getIpBans().get(socketaddress).hasExpired()) {
+            IpBanListEntry ipbanentry = this.ipBans.get(socketaddress);
+
+            mutablecomponent = Component.translatable("multiplayer.disconnect.banned_ip.reason", ipbanentry.getReason());
+            if (ipbanentry.getExpires() != null) {
+                mutablecomponent.append(Component.translatable("multiplayer.disconnect.banned_ip.expiration", PlayerList.BAN_DATE_FORMAT.format(ipbanentry.getExpires())));
+            }
+
+            // return chatmessage;
+            event.disallow(org.bukkit.event.player.PlayerLoginEvent.Result.KICK_BANNED, org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage.fromComponent(mutablecomponent));
+        } else {
+            // return this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(gameprofile) ? IChatBaseComponent.translatable("multiplayer.disconnect.server_full") : null;
+            if (this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(gameprofile)) {
+                event.disallow(org.bukkit.event.player.PlayerLoginEvent.Result.KICK_FULL, org.spigotmc.SpigotConfig.serverFullMessage); // Spigot
+            }
+        }
+
+        cserver.getPluginManager().callEvent(event);
+        if (event.getResult() != org.bukkit.event.player.PlayerLoginEvent.Result.ALLOWED) {
+            loginlistener.disconnect(event.getKickMessage());
+            return null;
+        }
+        return player;
+    }
+
     public ServerPlayer getPlayerForLogin(GameProfile p_215625_, ClientInformation p_302018_) {
         return new ServerPlayer(this.server, this.server.overworld(), p_215625_, p_302018_);
     }
 
+    // CraftBukkit start - added EntityPlayer
+    public ServerPlayer getPlayerForLogin(GameProfile gameprofile, ClientInformation clientinformation, ServerPlayer player) {
+        player.updateOptions(clientinformation);
+        return player;
+        // CraftBukkit end
+    }
+
     public boolean disconnectAllPlayersWithProfile(GameProfile p_295670_) {
         UUID uuid = p_295670_.getId();
         Set<ServerPlayer> set = Sets.newIdentityHashSet();
@@ -428,18 +_,50 @@
         }
 
         for(ServerPlayer serverplayer1 : set) {
+            save(serverplayer1); // CraftBukkit - Force the player's inventory to be saved
             serverplayer1.connection.disconnect(DUPLICATE_LOGIN_DISCONNECT_MESSAGE);
         }
 
         return !set.isEmpty();
     }
 
+    // Ketting end
+    // CraftBukkit start - Moved up
+    public boolean disconnectAllPlayersWithProfile(GameProfile p_299278_, ServerPlayer player) { // CraftBukkit - added EntityPlayer
+        return player == null;
+    }
+    // CraftBukkit end
+    //Ketting start
+    public final java.util.concurrent.atomic.AtomicReference<org.bukkit.event.player.PlayerRespawnEvent.RespawnReason> ketting$respawn$reason = new java.util.concurrent.atomic.AtomicReference<>(org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.OTHER);
+    public final java.util.concurrent.atomic.AtomicReference<org.bukkit.Location> ketting$respawn$location = new java.util.concurrent.atomic.AtomicReference<>(null);
+    public final java.util.concurrent.atomic.AtomicReference<ServerLevel> ketting$respawn$level = new java.util.concurrent.atomic.AtomicReference<>(null);
+    public final java.util.concurrent.atomic.AtomicBoolean ketting$respawn$avoidSuffocation = new java.util.concurrent.atomic.AtomicBoolean(true);
+    public ServerPlayer respawn(ServerPlayer p_11237_, boolean p_11238_, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason reason) {
+        ketting$respawn$reason.set(reason);
+        return respawn(p_11237_, p_11238_);
+    }
+    public ServerPlayer respawn(ServerPlayer player, ServerLevel level, boolean flag, org.bukkit.Location location, boolean avoidSuffocation, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason reason) {
+        ketting$respawn$reason.set(reason);
+        return respawn(player, level, flag, location, avoidSuffocation);
+    }
+    public ServerPlayer respawn(ServerPlayer p_11237_, ServerLevel level, boolean p_11238_, org.bukkit.Location location, boolean avoidSuffocation) {
+        ketting$respawn$location.set(location);
+        ketting$respawn$level.set(level);
+        ketting$respawn$avoidSuffocation.set(avoidSuffocation);
+        return this.respawn(p_11237_, p_11238_);
+    }
+    //Ketting end
     public ServerPlayer respawn(ServerPlayer p_11237_, boolean p_11238_) {
+        ServerLevel level = ketting$respawn$level.getAndSet(null);
+        if (level == null) level = this.server.getLevel(p_11237_.getRespawnDimension());
+        p_11237_.stopRiding(); // CraftBukkit
         this.players.remove(p_11237_);
+        this.playersByName.remove(p_11237_.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         p_11237_.serverLevel().removePlayerImmediately(p_11237_, Entity.RemovalReason.DISCARDED);
         BlockPos blockpos = p_11237_.getRespawnPosition();
         float f = p_11237_.getRespawnAngle();
         boolean flag = p_11237_.isRespawnForced();
+        /* CraftBukkit start
         ServerLevel serverlevel = this.server.getLevel(p_11237_.getRespawnDimension());
         Optional<Vec3> optional;
         if (serverlevel != null && blockpos != null) {
@@ -450,6 +_,11 @@
 
         ServerLevel serverlevel1 = serverlevel != null && optional.isPresent() ? serverlevel : this.server.overworld();
         ServerPlayer serverplayer = new ServerPlayer(this.server, serverlevel1, p_11237_.getGameProfile(), p_11237_.clientInformation());
+         */
+        ServerPlayer serverplayer = p_11237_;
+        org.bukkit.World fromWorld = p_11237_.getBukkitEntity().getWorld();
+        serverplayer.wonGame = false;
+        
         serverplayer.connection = p_11237_.connection;
         serverplayer.restoreFrom(p_11237_, p_11238_);
         serverplayer.setId(p_11237_.getId());
@@ -460,6 +_,19 @@
         }
 
         boolean flag2 = false;
+        // CraftBukkit start - fire PlayerRespawnEvent
+        org.bukkit.Location location = ketting$respawn$location.getAndSet(null);
+        if (location == null) {
+            boolean isBedSpawn = false;
+            ServerLevel serverlevel1 = this.server.getLevel(p_11237_.getRespawnDimension());
+            if (serverlevel1 != null) {
+                Optional<Vec3> optional;
+
+                if (blockpos != null) {
+                    optional = Player.findRespawnPositionAndUseSpawnBlock(serverlevel1, blockpos, f, flag, p_11238_);
+                } else {
+                    optional = Optional.empty();
+                }
         if (optional.isPresent()) {
             BlockState blockstate = serverlevel1.getBlockState(blockpos);
             boolean flag1 = blockstate.is(Blocks.RESPAWN_ANCHOR);
@@ -473,13 +_,46 @@
             }
 
             serverplayer.moveTo(vec3.x, vec3.y, vec3.z, f1, 0.0F);
-            serverplayer.setRespawnPosition(serverlevel1.dimension(), blockpos, f, flag, false);
+            // entityplayer1.setRespawnPosition(serverlevel1.dimension(), blockposition, f, flag, false); // CraftBukkit - not required, just copies old location into reused entity
             flag2 = !p_11238_ && flag1;
+            isBedSpawn = true;
+            location = org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation.toBukkit(vec3, serverlevel1.getWorld(), f1, 0.0F);
         } else if (blockpos != null) {
             serverplayer.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
-        }
-
-        while(!serverlevel1.noCollision(serverplayer) && serverplayer.getY() < (double)serverlevel1.getMaxBuildHeight()) {
+            serverplayer.setRespawnPosition(null, null, 0f, false, false, org.bukkit.event.player.PlayerSpawnChangeEvent.Cause.RESET); // CraftBukkit - SPIGOT-5988: Clear respawn location when obstructed
+        }
+            }
+
+            if (location == null) {
+                serverlevel1 = this.server.overworld();
+                blockpos = serverplayer.getSpawnPoint(serverlevel1);
+                location = org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation.toBukkit(blockpos, serverlevel1.getWorld()).add(0.5F, 0.1F, 0.5F);
+            }
+
+            org.bukkit.entity.Player respawnPlayer = serverplayer.getBukkitEntity();
+            org.bukkit.event.player.PlayerRespawnEvent respawnEvent = new org.bukkit.event.player.PlayerRespawnEvent(respawnPlayer, location, isBedSpawn && !flag2, flag2, ketting$respawn$reason.getAndSet(org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.OTHER));
+            cserver.getPluginManager().callEvent(respawnEvent);
+            // Spigot Start
+            if (p_11237_.connection.isDisconnected()) {
+                ketting$respawn$avoidSuffocation.set(true);
+                return p_11237_;
+            }
+            // Spigot End
+
+            location = respawnEvent.getRespawnLocation();
+            if (!p_11238_) p_11237_.reset(); // SPIGOT-4785
+        } else {
+            ketting$respawn$reason.set(org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.OTHER);
+            location.setWorld(level.getWorld());
+        }
+        ServerLevel serverlevel1 = ((org.bukkit.craftbukkit.v1_20_R3.CraftWorld) location.getWorld()).getHandle();
+        serverplayer.spawnIn(serverlevel1);
+        serverplayer.unsetRemoved();
+        serverplayer.setShiftKeyDown(false);
+        serverplayer.forceSetPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+
+        while (ketting$respawn$avoidSuffocation.get() && !level.noCollision((Entity) serverplayer) && serverplayer.getY() < (double) serverlevel1.getMaxBuildHeight()) {
+            // CraftBukkit end
             serverplayer.setPos(serverplayer.getX(), serverplayer.getY() + 1.0, serverplayer.getZ());
         }
 
@@ -487,18 +_,24 @@
         ServerLevel serverlevel2 = serverplayer.serverLevel();
         LevelData leveldata = serverlevel2.getLevelData();
         serverplayer.connection.send(new ClientboundRespawnPacket(serverplayer.createCommonSpawnInfo(serverlevel2), b0));
-        serverplayer.connection.teleport(serverplayer.getX(), serverplayer.getY(), serverplayer.getZ(), serverplayer.getYRot(), serverplayer.getXRot());
+        serverplayer.connection.send(new ClientboundSetChunkCacheRadiusPacket(serverlevel1.spigotConfig.viewDistance)); // Spigot
+        serverplayer.connection.send(new ClientboundSetSimulationDistancePacket(serverlevel1.spigotConfig.simulationDistance)); // Spigot
+        serverplayer.connection.teleport(org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation.toBukkit(serverplayer.position(), serverlevel2.getWorld(), serverplayer.getYRot(), serverplayer.getXRot())); // CraftBukkit
         serverplayer.connection.send(new ClientboundSetDefaultSpawnPositionPacket(serverlevel1.getSharedSpawnPos(), serverlevel1.getSharedSpawnAngle()));
         serverplayer.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
         serverplayer.connection
             .send(new ClientboundSetExperiencePacket(serverplayer.experienceProgress, serverplayer.totalExperience, serverplayer.experienceLevel));
         this.sendLevelInfo(serverplayer, serverlevel1);
         this.sendPlayerPermissionLevel(serverplayer);
+        if (!p_11237_.connection.isDisconnected()) {
         serverlevel1.addRespawnedPlayer(serverplayer);
         this.players.add(serverplayer);
+            this.playersByName.put(serverplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT), serverplayer); // Spigot
         this.playersByUUID.put(serverplayer.getUUID(), serverplayer);
-        serverplayer.initInventoryMenu();
         serverplayer.setHealth(serverplayer.getHealth());
+        net.neoforged.neoforge.event.EventHooks.firePlayerRespawnEvent(serverplayer, p_11238_);
+        }
+        // serverplayer.initInventoryMenu();
         if (flag2) {
             serverplayer.connection
                 .send(
@@ -515,6 +_,28 @@
                 );
         }
 
+        // Added from changeDimension
+        sendAllPlayerInfo(serverplayer); // Update health, etc...
+        serverplayer.onUpdateAbilities();
+        for (MobEffectInstance mobEffect : serverplayer.getActiveEffects()) {
+            serverplayer.connection.send(new ClientboundUpdateMobEffectPacket(serverplayer.getId(), mobEffect));
+        }
+
+        // Fire advancement trigger
+        serverplayer.triggerDimensionChangeTriggers(((org.bukkit.craftbukkit.v1_20_R3.CraftWorld) fromWorld).getHandle());
+
+        // Don't fire on respawn
+        if (fromWorld != location.getWorld()) {
+            org.bukkit.event.player.PlayerChangedWorldEvent event = new org.bukkit.event.player.PlayerChangedWorldEvent(serverplayer.getBukkitEntity(), fromWorld);
+            server.server.getPluginManager().callEvent(event);
+        }
+
+        // Save p_11237_ file again if they were disconnected
+        if (serverplayer.connection.isDisconnected()) {
+            this.save(serverplayer);
+        }
+        // CraftBukkit end
+
         return serverplayer;
     }
 
@@ -526,7 +_,18 @@
 
     public void tick() {
         if (++this.sendAllPlayerInfoIn > 600) {
-            this.broadcastAll(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY), this.players));
+            // CraftBukkit start
+            for (int i = 0; i < this.players.size(); ++i) {
+                final ServerPlayer target = this.players.get(i);
+
+                target.connection.send(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY), this.players.stream().filter(new Predicate<ServerPlayer>() {
+                    @Override
+                    public boolean test(ServerPlayer input) {
+                        return target.getBukkitEntity().canSee(input.getBukkitEntity());
+                    }
+                }).collect(java.util.stream.Collectors.toList())));
+            }
+            // CraftBukkit end
             this.sendAllPlayerInfoIn = 0;
         }
     }
@@ -537,6 +_,22 @@
         }
     }
 
+    // CraftBukkit start - add a world/entity limited version
+    public void broadcastAll(Packet packet, Player player) {
+        for (ServerPlayer serverPlayer : this.players) {
+            if (serverPlayer != null && serverPlayer.getBukkitEntity().canSee(player.getBukkitEntity())) {
+                serverPlayer.connection.send(packet);
+            }
+        }
+    }
+
+    public void broadcastAll(Packet<?> p_11269_, Level level) {
+        for(Player player : level.players()) {
+            ((ServerPlayer) player).connection.send(p_11269_);
+        }
+    }
+    // CraftBukkit end
+
     public void broadcastAll(Packet<?> p_11271_, ResourceKey<Level> p_11272_) {
         for(ServerPlayer serverplayer : this.players) {
             if (serverplayer.level().dimension() == p_11272_) {
@@ -590,6 +_,7 @@
     }
 
     public void op(GameProfile p_11254_) {
+        if (net.neoforged.neoforge.event.EventHooks.onPermissionChanged(p_11254_, this.server.getOperatorUserPermissionLevel(), this)) return;
         this.ops.add(new ServerOpListEntry(p_11254_, this.server.getOperatorUserPermissionLevel(), this.ops.canBypassPlayerLimit(p_11254_)));
         ServerPlayer serverplayer = this.getPlayer(p_11254_.getId());
         if (serverplayer != null) {
@@ -598,6 +_,7 @@
     }
 
     public void deop(GameProfile p_11281_) {
+        if (net.neoforged.neoforge.event.EventHooks.onPermissionChanged(p_11281_, 0, this)) return;
         this.ops.remove(p_11281_);
         ServerPlayer serverplayer = this.getPlayer(p_11281_.getId());
         if (serverplayer != null) {
@@ -619,6 +_,7 @@
             p_11227_.connection.send(new ClientboundEntityEventPacket(p_11227_, b0));
         }
 
+        p_11227_.getBukkitEntity().recalculatePermissions(); // CraftBukkit
         this.server.getCommands().sendCommands(p_11227_);
     }
 
@@ -634,16 +_,7 @@
 
     @Nullable
     public ServerPlayer getPlayerByName(String p_11256_) {
-        int i = this.players.size();
-
-        for(int j = 0; j < i; ++j) {
-            ServerPlayer serverplayer = this.players.get(j);
-            if (serverplayer.getGameProfile().getName().equalsIgnoreCase(p_11256_)) {
-                return serverplayer;
-            }
-        }
-
-        return null;
+        return this.playersByName.get(p_11256_.toLowerCase(java.util.Locale.ROOT)); // Spigot
     }
 
     public void broadcast(
@@ -651,6 +_,13 @@
     ) {
         for(int i = 0; i < this.players.size(); ++i) {
             ServerPlayer serverplayer = this.players.get(i);
+
+            // CraftBukkit start - Test if player receiving packet can see the source of the packet
+            if (p_11242_ != null && !serverplayer.getBukkitEntity().canSee(p_11242_.getBukkitEntity())) {
+                continue;
+            }
+            // CraftBukkit end
+
             if (serverplayer != p_11242_ && serverplayer.level().dimension() == p_11247_) {
                 double d0 = p_11243_ - serverplayer.getX();
                 double d1 = p_11244_ - serverplayer.getY();
@@ -688,15 +_,19 @@
     }
 
     public void sendLevelInfo(ServerPlayer p_11230_, ServerLevel p_11231_) {
-        WorldBorder worldborder = this.server.overworld().getWorldBorder();
+        WorldBorder worldborder = p_11230_.level().getWorldBorder(); // CraftBukkit
         p_11230_.connection.send(new ClientboundInitializeBorderPacket(worldborder));
         p_11230_.connection
             .send(new ClientboundSetTimePacket(p_11231_.getGameTime(), p_11231_.getDayTime(), p_11231_.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
         p_11230_.connection.send(new ClientboundSetDefaultSpawnPositionPacket(p_11231_.getSharedSpawnPos(), p_11231_.getSharedSpawnAngle()));
         if (p_11231_.isRaining()) {
-            p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F));
-            p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, p_11231_.getRainLevel(1.0F)));
-            p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, p_11231_.getThunderLevel(1.0F)));
+            // CraftBukkit start - handle player weather
+            // p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F));
+            // p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, p_11231_.getRainLevel(1.0F)));
+            // p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, p_11231_.getThunderLevel(1.0F)));
+            p_11230_.setPlayerWeather(org.bukkit.WeatherType.DOWNFALL, false);
+            p_11230_.updateWeather(-p_11231_.rainLevel, p_11231_.rainLevel, -p_11231_.thunderLevel, p_11231_.thunderLevel);
+            // CraftBukkit end
         }
 
         p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.LEVEL_CHUNKS_LOAD_START, 0.0F));
@@ -705,8 +_,16 @@
 
     public void sendAllPlayerInfo(ServerPlayer p_11293_) {
         p_11293_.inventoryMenu.sendAllDataToRemote();
-        p_11293_.resetSentInfo();
+        // p_11293_.resetSentInfo();
+        p_11293_.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
+        p_11293_.getEntityData().refresh(p_11293_); // CraftBukkkit - SPIGOT-7218: sync metadata
         p_11293_.connection.send(new ClientboundSetCarriedItemPacket(p_11293_.getInventory().selected));
+        // CraftBukkit start - from GameRules
+        int i = p_11293_.level().getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) ? 22 : 23;
+        p_11293_.connection.send(new ClientboundEntityEventPacket(p_11293_, (byte) i));
+        float immediateRespawn = p_11293_.level().getGameRules().getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN) ? 1.0F: 0.0F;
+        p_11293_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.IMMEDIATE_RESPAWN, immediateRespawn));
+        // CraftBukkit end
     }
 
     public int getPlayerCount() {
@@ -759,10 +_,21 @@
     }
 
     public void removeAll() {
-        for(int i = 0; i < this.players.size(); ++i) {
-            this.players.get(i).connection.disconnect(Component.translatable("multiplayer.disconnect.server_shutdown"));
-        }
-    }
+        // CraftBukkit start - disconnect safely
+        for (ServerPlayer player : this.players) {
+            player.connection.disconnect(this.server.server.getShutdownMessage()); // CraftBukkit - add custom shutdown message
+        }
+        // CraftBukkit end
+
+    }
+
+    // CraftBukkit start
+    public void broadcastMessage(Component[] iChatBaseComponents) {
+        for (Component component : iChatBaseComponents) {
+            broadcastSystemMessage(component, false);
+        }
+    }
+    // CraftBukkit end
 
     public void broadcastSystemMessage(Component p_240618_, boolean p_240644_) {
         this.broadcastSystemMessage(p_240618_, p_215639_ -> p_240618_, p_240644_);
@@ -810,36 +_,53 @@
         return p_251384_.hasSignature() && !p_251384_.hasExpiredServer(Instant.now());
     }
 
+    //Ketting start - keep compat
     public ServerStatsCounter getPlayerStats(Player p_11240_) {
-        UUID uuid = p_11240_.getUUID();
-        ServerStatsCounter serverstatscounter = this.stats.get(uuid);
-        if (serverstatscounter == null) {
+        if (p_11240_ instanceof ServerPlayer sp) return getPlayerStats(sp);
+        Component name = p_11240_.getDisplayName();
+        return getPlayerStats(p_11240_.getUUID(), name!=null?name.getString():"");
+    }
+    //Ketting end
+    // CraftBukkit start
+    public ServerStatsCounter getPlayerStats(ServerPlayer p_11240_) {
+        ServerStatsCounter stats = p_11240_.getStats();
+        return stats == null ? getPlayerStats(p_11240_.getUUID(), p_11240_.getDisplayName().getString()) : stats;
+    }
+
+    public ServerStatsCounter getPlayerStats(UUID uuid, String displayName) {
+        ServerPlayer player = this.getPlayer(uuid);
+        ServerStatsCounter stats = player == null ? null : player.getStats();
+        // CraftBukkit end
+
+        if (stats == null) {
             File file1 = this.server.getWorldPath(LevelResource.PLAYER_STATS_DIR).toFile();
             File file2 = new File(file1, uuid + ".json");
             if (!file2.exists()) {
-                File file3 = new File(file1, p_11240_.getName().getString() + ".json");
+                File file3 = new File(file1, displayName + ".json"); // CraftBukkit
                 Path path = file3.toPath();
                 if (FileUtil.isPathNormalized(path) && FileUtil.isPathPortable(path) && path.startsWith(file1.getPath()) && file3.isFile()) {
                     file3.renameTo(file2);
                 }
             }
 
-            serverstatscounter = new ServerStatsCounter(this.server, file2);
-            this.stats.put(uuid, serverstatscounter);
+            stats = new ServerStatsCounter(this.server, file2);
         }
-
-        return serverstatscounter;
+        this.stats.put(uuid, stats); // Ketting
+        return stats;
     }
 
     public PlayerAdvancements getPlayerAdvancements(ServerPlayer p_11297_) {
         UUID uuid = p_11297_.getUUID();
-        PlayerAdvancements playeradvancements = this.advancements.get(uuid);
+        PlayerAdvancements playeradvancements = p_11297_.getAdvancements(); // CraftBukkit
         if (playeradvancements == null) {
             Path path = this.server.getWorldPath(LevelResource.PLAYER_ADVANCEMENTS_DIR).resolve(uuid + ".json");
             playeradvancements = new PlayerAdvancements(this.server.getFixerUpper(), this, this.server.getAdvancements(), path, p_11297_);
             this.advancements.put(uuid, playeradvancements);
         }
 
+        this.advancements.put(uuid, playeradvancements); // Ketting
+        // Forge: don't overwrite active player with a fake one.
+        if (!(p_11297_ instanceof net.neoforged.neoforge.common.util.FakePlayer))
         playeradvancements.setPlayer(p_11297_);
         return playeradvancements;
     }
@@ -867,7 +_,7 @@
     }
 
     public List<ServerPlayer> getPlayers() {
-        return this.players;
+        return this.playersView; //Unmodifiable view, we don't want people removing things without us knowing.
     }
 
     @Nullable
@@ -880,10 +_,19 @@
     }
 
     public void reloadResources() {
-        for(PlayerAdvancements playeradvancements : this.advancements.values()) {
-            playeradvancements.reload(this.server.getAdvancements());
+        // CraftBukkit start
+       /*
+       for(PlayerAdvancements playeradvancements : this.advancements.values()) {
+          playeradvancements.reload(this.server.getAdvancements());
+       }*/
+
+        for (ServerPlayer player : this.players) {
+            player.getAdvancements().reload(this.server.getAdvancements());
+            player.getAdvancements().flushDirty(player); // CraftBukkit - trigger immediate flush of advancements
         }
+        // CraftBukkit end
 
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.OnDatapackSyncEvent(this, null));
         this.broadcastAll(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(this.registries)));
         ClientboundUpdateRecipesPacket clientboundupdaterecipespacket = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes());
 
