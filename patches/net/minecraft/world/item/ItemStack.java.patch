--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -81,12 +_,13 @@
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import org.slf4j.Logger;
 
-public final class ItemStack {
+public final class ItemStack extends net.neoforged.neoforge.attachment.AttachmentHolder implements net.neoforged.neoforge.common.extensions.IItemStackExtension {
     public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create(
         p_311716_ -> p_311716_.group(
                     BuiltInRegistries.ITEM.holderByNameCodec().fieldOf("id").forGetter(ItemStack::getItemHolder),
                     Codec.INT.fieldOf("Count").forGetter(ItemStack::getCount),
-                    CompoundTag.CODEC.optionalFieldOf("tag").forGetter(p_281115_ -> Optional.ofNullable(p_281115_.getTag()))
+                    CompoundTag.CODEC.optionalFieldOf("tag").forGetter(p_281115_ -> Optional.ofNullable(p_281115_.getTag())),
+                    ExtraCodecs.strictOptionalField(CompoundTag.CODEC, ATTACHMENTS_NBT_KEY).forGetter(s -> Optional.ofNullable(s.serializeAttachments()))
                 )
                 .apply(p_311716_, ItemStack::new)
     );
@@ -97,14 +_,17 @@
     public static final Codec<ItemStack> ADVANCEMENT_ICON_CODEC = RecordCodecBuilder.create(
         p_311717_ -> p_311717_.group(
                     BuiltInRegistries.ITEM.holderByNameCodec().fieldOf("item").forGetter(ItemStack::getItemHolder),
-                    ExtraCodecs.strictOptionalField(TagParser.AS_CODEC, "nbt").forGetter(p_311718_ -> Optional.ofNullable(p_311718_.getTag()))
+                    ExtraCodecs.strictOptionalField(TagParser.AS_CODEC, "nbt").forGetter(p_311718_ -> Optional.ofNullable(p_311718_.getTag())),
+                    ExtraCodecs.strictOptionalField(TagParser.AS_CODEC, ATTACHMENTS_NBT_KEY).forGetter(s -> Optional.ofNullable(s.serializeAttachments()))
                 )
-                .apply(p_311717_, (p_311722_, p_311723_) -> new ItemStack(p_311722_, 1, p_311723_))
+                .apply(p_311717_, (p_311722_, p_311723_, attachments) -> new ItemStack(p_311722_, 1, p_311723_, attachments))
     );
     public static final Codec<ItemStack> ITEM_WITH_COUNT_CODEC = RecordCodecBuilder.create(
         p_311720_ -> p_311720_.group(
                     ITEM_NON_AIR_CODEC.fieldOf("item").forGetter(ItemStack::getItem),
-                    ExtraCodecs.strictOptionalField(ExtraCodecs.POSITIVE_INT, "count", 1).forGetter(ItemStack::getCount)
+                    ExtraCodecs.strictOptionalField(ExtraCodecs.POSITIVE_INT, "count", 1).forGetter(ItemStack::getCount),
+                    ExtraCodecs.strictOptionalField(net.neoforged.neoforge.common.crafting.CraftingHelper.TAG_CODEC, "nbt").forGetter(stack -> java.util.Optional.ofNullable(net.neoforged.neoforge.common.crafting.CraftingHelper.getTagForWriting(stack))),
+                    ExtraCodecs.strictOptionalField(net.neoforged.neoforge.common.crafting.CraftingHelper.TAG_CODEC, ATTACHMENTS_NBT_KEY).forGetter(s -> Optional.ofNullable(s.serializeAttachments()))
                 )
                 .apply(p_311720_, ItemStack::new)
     );
@@ -139,7 +_,7 @@
     private int popTime;
     @Deprecated
     @Nullable
-    private final Item item;
+    private Item item;
     @Nullable
     private CompoundTag tag;
     @Nullable
@@ -162,18 +_,30 @@
     }
 
     public ItemStack(Holder<Item> p_312081_, int p_41605_, Optional<CompoundTag> p_41606_) {
+        this(p_312081_.value(), p_41605_, p_41606_);
+    }
+    public ItemStack(ItemLike p_312081_, int p_41605_, Optional<CompoundTag> p_41606_) {
         this(p_312081_, p_41605_);
         p_41606_.ifPresent(this::setTag);
     }
+    private ItemStack(Holder<Item> p_312081_, int p_41605_, Optional<CompoundTag> p_41606_, Optional<CompoundTag> attachmentsNbt) {
+        this(p_312081_.value(), p_41605_, p_41606_, attachmentsNbt);
+    }
+    private ItemStack(ItemLike p_312081_, int p_41605_, Optional<CompoundTag> p_41606_, Optional<CompoundTag> attachmentsNbt) {
+        this(p_312081_, p_41605_, attachmentsNbt.orElse(null));
+        p_41606_.ifPresent(this::setTag);
+    }
 
     public ItemStack(Holder<Item> p_220155_, int p_220156_) {
         this(p_220155_.value(), p_220156_);
     }
 
-    public ItemStack(ItemLike p_41601_, int p_41602_) {
+    public ItemStack(ItemLike p_41601_, int p_41602_) { this(p_41601_, p_41602_, (CompoundTag) null); }
+    public ItemStack(ItemLike p_41601_, int p_41602_, @Nullable CompoundTag attachmentsNbt) {
         this.item = p_41601_.asItem();
         this.count = p_41602_;
-        if (this.item.canBeDepleted()) {
+        if (attachmentsNbt != null) deserializeAttachments(attachmentsNbt);
+        if (this.item.isDamageable(this)) {
             this.setDamageValue(this.getDamageValue());
         }
     }
@@ -187,11 +_,30 @@
         this.count = p_41608_.getByte("Count");
         if (p_41608_.contains("tag", 10)) {
             this.tag = p_41608_.getCompound("tag").copy();
+            if (this.tag.contains(ATTACHMENTS_NBT_KEY, Tag.TAG_COMPOUND)) { // Neo: Read contained attachments
+                deserializeAttachments(this.tag.getCompound(ATTACHMENTS_NBT_KEY));
+                this.tag = net.neoforged.neoforge.attachment.AttachmentInternals.cleanTag(this.tag);
+            }
+            if (this.tag != null)
             this.getItem().verifyTagAfterLoad(this.tag);
         }
 
-        if (this.getItem().canBeDepleted()) {
+        if (this.getItem().isDamageable(this)) {
             this.setDamageValue(this.getDamageValue());
+        }
+    }
+
+    // Called to run this stack through the data converter to handle older storage methods and serialized items
+    public void convertStack(int version) {
+        if (0 < version && version < org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers.INSTANCE.getDataVersion()) {
+          /* org.kettingpowered.ketting.core.Ketting start
+          CompoundTag savedStack = new CompoundTag();
+          this.save(savedStack);
+          savedStack = (CompoundTag) MinecraftServer.getServer().fixerUpper.update(References.ITEM_STACK, new Dynamic(NbtOps.INSTANCE, savedStack), version, org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+          this.load(savedStack);
+          */
+            org.kettingpowered.ketting.core.Ketting.LOGGER.warn("Legacy ItemStack being used, updates will not applied: {}", this);
+            //Ketting end
         }
     }
 
@@ -250,7 +_,7 @@
     }
 
     public boolean is(Holder<Item> p_220166_) {
-        return this.getItem().builtInRegistryHolder() == p_220166_;
+        return is(p_220166_.value()); // Neo: Fix comparing for custom holders such as DeferredHolders
     }
 
     public boolean is(HolderSet<Item> p_298683_) {
@@ -262,6 +_,23 @@
     }
 
     public InteractionResult useOn(UseOnContext p_41662_) {
+        if (p_41662_.getPlayer() != null) { // TODO 1.20.5: Make event accept nullable player, and remove this check.
+            var e = net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent(p_41662_, net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent.UsePhase.ITEM_AFTER_BLOCK));
+            if (e.isCanceled()) return e.getCancellationResult();
+        }
+        if (!p_41662_.getLevel().isClientSide) return net.neoforged.neoforge.common.CommonHooks.onPlaceItemIntoWorld(p_41662_);
+        return onItemUse(p_41662_, (c) -> getItem().useOn(p_41662_));
+    }
+
+    public InteractionResult onItemUseFirst(UseOnContext p_41662_) {
+        if (p_41662_.getPlayer() != null) { // TODO 1.20.5: Make event accept nullable player, and remove this check.
+            var e = net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent(p_41662_, net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent.UsePhase.ITEM_BEFORE_BLOCK));
+            if (e.isCanceled()) return e.getCancellationResult();
+        }
+        return onItemUse(p_41662_, (c) -> getItem().onItemUseFirst(this, p_41662_));
+    }
+
+    private InteractionResult onItemUse(UseOnContext p_41662_, java.util.function.Function<UseOnContext, InteractionResult> callback) {
         Player player = p_41662_.getPlayer();
         BlockPos blockpos = p_41662_.getClickedPos();
         BlockInWorld blockinworld = new BlockInWorld(p_41662_.getLevel(), blockpos, false);
@@ -271,10 +_,191 @@
             return InteractionResult.PASS;
         } else {
             Item item = this.getItem();
-            InteractionResult interactionresult = item.useOn(p_41662_);
+            // CraftBukkit start - handle all block place event logic here
+            CompoundTag oldData = this.getTagClone();
+            int oldCount = this.getCount();
+            net.minecraft.server.level.ServerLevel world = (net.minecraft.server.level.ServerLevel) p_41662_.getLevel();
+
+            if (!(item instanceof BucketItem || item instanceof SolidBucketItem)) { // if not bucket
+                world.captureBlockStates = true;
+                // special case bonemeal
+                if (item == Items.BONE_MEAL) {
+                    world.captureTreeGeneration = true;
+                }
+            }
+
+            InteractionResult interactionresult;
+            try {
+                interactionresult = callback.apply(p_41662_);
+            } finally {
+                world.captureBlockStates = false;
+            }
+            CompoundTag newData = this.getTagClone();
+            int newCount = this.getCount();
+            this.setCount(oldCount);
+            this.setTagClone(oldData);
+            if (interactionresult.consumesAction() && world.captureTreeGeneration && world.capturedBlockStates.size() > 0) {
+                world.captureTreeGeneration = false;
+                org.bukkit.Location location = org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation.toBukkit(blockpos, world.getWorld());
+                org.bukkit.TreeType treeType = net.minecraft.world.level.block.SaplingBlock.treeType;
+                net.minecraft.world.level.block.SaplingBlock.treeType = null;
+                List<org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
+                world.capturedBlockStates.clear();
+                org.bukkit.event.world.StructureGrowEvent structureEvent = null;
+                if (treeType != null) {
+                    boolean isBonemeal = getItem() == Items.BONE_MEAL;
+                    structureEvent = new org.bukkit.event.world.StructureGrowEvent(location, treeType, isBonemeal, (org.bukkit.entity.Player) player.getBukkitEntity(), (List) blocks);
+                    org.bukkit.Bukkit.getPluginManager().callEvent(structureEvent);
+                }
+
+                org.bukkit.event.block.BlockFertilizeEvent fertilizeEvent = new org.bukkit.event.block.BlockFertilizeEvent(org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock.at(world, blockpos), (org.bukkit.entity.Player) player.getBukkitEntity(), (List) blocks);
+                fertilizeEvent.setCancelled(structureEvent != null && structureEvent.isCancelled());
+                org.bukkit.Bukkit.getPluginManager().callEvent(fertilizeEvent);
+
+                if (!fertilizeEvent.isCancelled()) {
+                    // Change the stack to its new contents if it hasn't been tampered with.
+                    if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
+                        this.setTag(newData);
+                        this.setCount(newCount);
+                    }
+                    for (org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockState blockstate : blocks) {
+                        blockstate.update(true); //Ketting
+                        //world.setBlock(blockstate.getPosition(),blockstate.getHandle(), blockstate.getFlag()); // SPIGOT-7248 - manual update to avoid physics where appropriate
+                    }
+                    player.awardStat(Stats.ITEM_USED.get(item)); // SPIGOT-7236 - award stat
+                }
+
+                SignItem.openSign = null; // SPIGOT-6758 - Reset on early return
+                return interactionresult;
+            }
+            world.captureTreeGeneration = false;
+
             if (player != null && interactionresult.shouldAwardStats()) {
                 player.awardStat(Stats.ITEM_USED.get(item));
+                InteractionHand enumhand = p_41662_.getHand();
+                org.bukkit.event.block.BlockPlaceEvent placeEvent = null;
+                List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
+                world.capturedBlockStates.clear();
+                if (blocks.size() > 1) {
+                    placeEvent = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callBlockMultiPlaceEvent(world, player, enumhand, blocks, blockpos.getX(), blockpos.getY(), blockpos.getZ());
+                } else if (blocks.size() == 1) {
+                    placeEvent = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callBlockPlaceEvent(world, player, enumhand, blocks.get(0), blockpos.getX(), blockpos.getY(), blockpos.getZ());
+                }
+
+                if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
+                    interactionresult = InteractionResult.FAIL;
+                    // PAIL: Remove this when MC-99075 fixed
+                    placeEvent.getPlayer().updateInventory();
+                    // revert back all captured blocks
+                    world.preventPoiUpdated = true; // CraftBukkit - SPIGOT-5710
+                    for (org.bukkit.block.BlockState blockstate : blocks) {
+                        blockstate.update(true, false);
+                    }
+                    world.preventPoiUpdated = false;
+
+                    // Brute force all possible updates
+                    BlockPos placedPos = ((org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock) placeEvent.getBlock()).getPosition();
+                    for (net.minecraft.core.Direction dir : net.minecraft.core.Direction.values()) {
+                        ((ServerPlayer) player).connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(world, placedPos.relative(dir)));
+                    }
+                    SignItem.openSign = null; // SPIGOT-6758 - Reset on early return
+                } else {
+                    // Change the stack to its new contents if it hasn't been tampered with.
+                    if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
+                        this.setTag(newData);
+                        this.setCount(newCount);
+                    }
+
+                    for (java.util.Map.Entry<BlockPos, net.minecraft.world.level.block.entity.BlockEntity> e : world.capturedTileEntities.entrySet()) {
+                        world.setBlockEntity(e.getValue());
+                    }
+
+                    for (org.bukkit.block.BlockState blockstate : blocks) {
+                        int updateFlag = ((org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockState) blockstate).getFlag();
+                        BlockState oldBlock = ((org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockState) blockstate).getHandle();
+                        BlockPos newblockposition = ((org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockState) blockstate).getPosition();
+                        BlockState block = world.getBlockState(newblockposition);
+
+                        if (!(block.getBlock() instanceof net.minecraft.world.level.block.BaseEntityBlock)) { // Containers get placed automatically
+                            block.getBlock().onPlace(block, world, newblockposition, oldBlock, true);
+                        }
+
+                        world.markAndNotifyBlock(newblockposition, null, oldBlock, block, updateFlag, 512); // send null chunk as chunk.k() returns false by this point
+                    }
+
+                    // Special case juke boxes as they update their tile entity. Copied from ItemRecord.
+                    // PAIL: checkme on updates.
+                    if (this.item instanceof RecordItem) {
+                        net.minecraft.world.level.block.entity.BlockEntity tileentity = world.getBlockEntity(blockpos);
+
+                        if (tileentity instanceof net.minecraft.world.level.block.entity.JukeboxBlockEntity jukebox) {
+                            // There can only be one
+                            ItemStack record = this.copy();
+                            if (!record.isEmpty()) {
+                                record.setCount(1);
+                            }
+
+                            jukebox.setTheItem(record);
+                            world.gameEvent(net.minecraft.world.level.gameevent.GameEvent.BLOCK_CHANGE, blockpos, net.minecraft.world.level.gameevent.GameEvent.Context.of(player, world.getBlockState(blockpos)));
+                        }
+
+                        this.shrink(1);
+                        player.awardStat(Stats.PLAY_RECORD);
+                    }
+
+                    if (this.item == Items.WITHER_SKELETON_SKULL) { // Special case skulls to allow wither spawns to be cancelled
+                        BlockPos bp = blockpos;
+                        if (!world.getBlockState(blockpos).canBeReplaced()) {
+                            if (!world.getBlockState(blockpos).isSolid()) {
+                                bp = null;
+                            } else {
+                                bp = bp.relative(p_41662_.getClickedFace());
+                            }
+                        }
+                        if (bp != null) {
+                            net.minecraft.world.level.block.entity.BlockEntity te = world.getBlockEntity(bp);
+                            if (te instanceof net.minecraft.world.level.block.entity.SkullBlockEntity) {
+                                net.minecraft.world.level.block.WitherSkullBlock.checkSpawn(world, bp, (net.minecraft.world.level.block.entity.SkullBlockEntity) te);
+                            }
+                        }
+                    }
+
+                    // SPIGOT-4678
+                    if (this.item instanceof SignItem && SignItem.openSign != null) {
+                        try {
+                            if (world.getBlockEntity(SignItem.openSign) instanceof net.minecraft.world.level.block.entity.SignBlockEntity tileentitysign) {
+                                if (world.getBlockState(SignItem.openSign).getBlock() instanceof net.minecraft.world.level.block.SignBlock blocksign) {
+                                    blocksign.openTextEdit(player, tileentitysign, true, org.bukkit.event.player.PlayerSignOpenEvent.Cause.PLACE); // Craftbukkit
+                                }
+                            }
+                        } finally {
+                            SignItem.openSign = null;
+                        }
+                    }
+
+                    // SPIGOT-7315: Moved from BlockBed#setPlacedBy
+                    if (placeEvent != null && this.item instanceof BedItem) {
+                        BlockPos position = ((org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock) placeEvent.getBlock()).getPosition();
+                        BlockState blockData = world.getBlockState(position);
+
+                        if (blockData.getBlock() instanceof net.minecraft.world.level.block.BedBlock) {
+                            world.blockUpdated(position, net.minecraft.world.level.block.Blocks.AIR);
+                            blockData.updateNeighbourShapes(world, position, 3);
+                        }
+                    }
+
+                    // SPIGOT-1288 - play sound stripped from ItemBlock
+                    if (this.item instanceof BlockItem) {
+                        net.minecraft.world.level.block.SoundType soundeffecttype = ((BlockItem) this.item).getBlock().defaultBlockState().getSoundType(); // TODO: not strictly correct, however currently only affects decorated pots
+                        world.playSound(player, blockpos, soundeffecttype.getPlaceSound(), net.minecraft.sounds.SoundSource.BLOCKS, (soundeffecttype.getVolume() + 1.0F) / 2.0F, soundeffecttype.getPitch() * 0.8F);
+                    }
+
+                    player.awardStat(Stats.ITEM_USED.get(item));
+                }
             }
+            world.capturedTileEntities.clear();
+            world.capturedBlockStates.clear();
+            // CraftBukkit end
 
             return interactionresult;
         }
@@ -296,15 +_,16 @@
         ResourceLocation resourcelocation = BuiltInRegistries.ITEM.getKey(this.getItem());
         p_41740_.putString("id", resourcelocation == null ? "minecraft:air" : resourcelocation.toString());
         p_41740_.putByte("Count", (byte)this.count);
-        if (this.tag != null) {
-            p_41740_.put("tag", this.tag.copy());
+        var tag = net.neoforged.neoforge.attachment.AttachmentInternals.addAttachmentsToTag(this.tag, this, true);
+        if (tag != null) {
+            p_41740_.put("tag", tag);
         }
 
         return p_41740_;
     }
 
     public int getMaxStackSize() {
-        return this.getItem().getMaxStackSize();
+        return this.getItem().getMaxStackSize(this);
     }
 
     public boolean isStackable() {
@@ -312,7 +_,7 @@
     }
 
     public boolean isDamageableItem() {
-        if (!this.isEmpty() && this.getItem().getMaxDamage() > 0) {
+        if (!this.isEmpty() && this.getItem().isDamageable(this)) {
             CompoundTag compoundtag = this.getTag();
             return compoundtag == null || !compoundtag.getBoolean("Unbreakable");
         } else {
@@ -321,19 +_,19 @@
     }
 
     public boolean isDamaged() {
-        return this.isDamageableItem() && this.getDamageValue() > 0;
+        return this.isDamageableItem() && getItem().isDamaged(this);
     }
 
     public int getDamageValue() {
-        return this.tag == null ? 0 : this.tag.getInt("Damage");
+        return this.getItem().getDamage(this);
     }
 
     public void setDamageValue(int p_41722_) {
-        this.getOrCreateTag().putInt("Damage", Math.max(0, p_41722_));
+        this.getItem().setDamage(this, p_41722_);
     }
 
     public int getMaxDamage() {
-        return this.getItem().getMaxDamage();
+        return this.getItem().getMaxDamage(this);
     }
 
     public boolean hurt(int p_220158_, RandomSource p_220159_, @Nullable ServerPlayer p_220160_) {
@@ -351,6 +_,21 @@
                 }
 
                 p_220158_ -= j;
+                // CraftBukkit start
+                if (p_220160_ != null) {
+                    org.bukkit.event.player.PlayerItemDamageEvent event = new org.bukkit.event.player.PlayerItemDamageEvent(p_220160_.getBukkitEntity(), org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asCraftMirror(this), p_220158_);
+                    event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+                    if (p_220158_ != event.getDamage() || event.isCancelled()) {
+                        event.getPlayer().updateInventory();
+                    }
+                    if (event.isCancelled()) {
+                        return false;
+                    }
+
+                    p_220158_ = event.getDamage();
+                }
+                // CraftBukkit end
                 if (p_220158_ <= 0) {
                     return false;
                 }
@@ -369,9 +_,15 @@
     public <T extends LivingEntity> void hurtAndBreak(int p_41623_, T p_41624_, Consumer<T> p_41625_) {
         if (!p_41624_.level().isClientSide && (!(p_41624_ instanceof Player) || !((Player)p_41624_).getAbilities().instabuild)) {
             if (this.isDamageableItem()) {
+                p_41623_ = this.getItem().damageItem(this, p_41623_, p_41624_, p_41625_);
                 if (this.hurt(p_41623_, p_41624_.getRandom(), p_41624_ instanceof ServerPlayer ? (ServerPlayer)p_41624_ : null)) {
                     p_41625_.accept(p_41624_);
                     Item item = this.getItem();
+                    // CraftBukkit start - Check for item breaking
+                    if (this.count == 1 && p_41624_ instanceof Player) {
+                        org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callPlayerItemBreakEvent((Player) p_41624_, this);
+                    }
+                    // CraftBukkit end
                     this.shrink(1);
                     if (p_41624_ instanceof Player) {
                         ((Player)p_41624_).awardStat(Stats.ITEM_BROKEN.get(item));
@@ -418,7 +_,7 @@
     }
 
     public boolean isCorrectToolForDrops(BlockState p_41736_) {
-        return this.getItem().isCorrectToolForDrops(p_41736_);
+        return this.getItem().isCorrectToolForDrops(this, p_41736_);
     }
 
     public InteractionResult interactLivingEntity(Player p_41648_, LivingEntity p_41649_, InteractionHand p_41650_) {
@@ -430,6 +_,7 @@
             return EMPTY;
         } else {
             ItemStack itemstack = new ItemStack(this.getItem(), this.count);
+            net.neoforged.neoforge.attachment.AttachmentUtils.copyStackAttachments(this, itemstack);
             itemstack.setPopTime(this.getPopTime());
             if (this.tag != null) {
                 itemstack.tag = this.tag.copy();
@@ -465,8 +_,17 @@
         if (!p_150943_.is(p_150944_.getItem())) {
             return false;
         } else {
-            return p_150943_.isEmpty() && p_150944_.isEmpty() ? true : Objects.equals(p_150943_.tag, p_150944_.tag);
+            return p_150943_.isEmpty() && p_150944_.isEmpty() ? true : Objects.equals(p_150943_.tag, p_150944_.tag) && p_150943_.areAttachmentsCompatible(p_150944_);
         }
+    }
+
+    /**
+     * Neo: Check if the attachments of this stack and another stack are compatible.
+     * If not, they cannot be stacked.
+     * @see #areAttachmentsCompatible(net.neoforged.neoforge.attachment.AttachmentHolder, net.neoforged.neoforge.attachment.AttachmentHolder)
+     */
+    public boolean areAttachmentsCompatible(ItemStack other) {
+        return areAttachmentsCompatible(this, other);
     }
 
     public String getDescriptionId() {
@@ -522,6 +_,17 @@
         return this.tag;
     }
 
+    // CraftBukkit start
+    @Nullable
+    private CompoundTag getTagClone() {
+        return this.tag == null ? null : this.tag.copy();
+    }
+
+    private void setTagClone(@Nullable CompoundTag nbtttagcompound) {
+        this.setTag(nbtttagcompound == null ? null : nbtttagcompound.copy());
+    }
+    // CraftBukkit end
+
     public CompoundTag getOrCreateTag() {
         if (this.tag == null) {
             this.setTag(new CompoundTag());
@@ -560,7 +_,7 @@
 
     public void setTag(@Nullable CompoundTag p_41752_) {
         this.tag = p_41752_;
-        if (this.getItem().canBeDepleted()) {
+        if (this.getItem().isDamageable(this)) {
             this.setDamageValue(this.getDamageValue());
         }
 
@@ -619,7 +_,7 @@
 
     public List<Component> getTooltipLines(@Nullable Player p_41652_, TooltipFlag p_41653_) {
         List<Component> list = Lists.newArrayList();
-        MutableComponent mutablecomponent = Component.empty().append(this.getHoverName()).withStyle(this.getRarity().color);
+        MutableComponent mutablecomponent = Component.empty().append(this.getHoverName()).withStyle(this.getRarity().getStyleModifier());
         if (this.hasCustomHoverName()) {
             mutablecomponent.withStyle(ChatFormatting.ITALIC);
         }
@@ -792,6 +_,7 @@
             list.add(DISABLED_ITEM_TOOLTIP);
         }
 
+        net.neoforged.neoforge.event.EventHooks.onItemTooltip(this, p_41652_, list, p_41653_);
         return list;
     }
 
@@ -800,7 +_,7 @@
     }
 
     private int getHideFlags() {
-        return this.hasTag() && this.tag.contains("HideFlags", 99) ? this.tag.getInt("HideFlags") : 0;
+        return this.hasTag() && this.tag.contains("HideFlags", 99) ? this.tag.getInt("HideFlags") : this.getItem().getDefaultTooltipHideFlags(this);
     }
 
     public void hideTooltipPart(ItemStack.TooltipPart p_41655_) {
@@ -921,9 +_,10 @@
                 }
             }
         } else {
-            multimap = this.getItem().getDefaultAttributeModifiers(p_41639_);
+            multimap = this.getItem().getAttributeModifiers(p_41639_, this);
         }
 
+        multimap = net.neoforged.neoforge.common.CommonHooks.getAttributeModifiers(this, p_41639_, multimap);
         return multimap;
     }
 
@@ -943,6 +_,13 @@
         listtag.add(compoundtag);
     }
 
+    // CraftBukkit start
+    @Deprecated
+    public void setItem(Item item) {
+        this.item = item;
+    }
+    // CraftBukkit end
+
     public Component getDisplayName() {
         MutableComponent mutablecomponent = Component.empty().append(this.getHoverName());
         if (this.hasCustomHoverName()) {
@@ -951,7 +_,7 @@
 
         MutableComponent mutablecomponent1 = ComponentUtils.wrapInSquareBrackets(mutablecomponent);
         if (!this.isEmpty()) {
-            mutablecomponent1.withStyle(this.getRarity().color)
+            mutablecomponent1.withStyle(this.getRarity().getStyleModifier())
                 .withStyle(p_220170_ -> p_220170_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this))));
         }
 
@@ -1002,6 +_,8 @@
         this.getItem().onUseTick(p_41732_, p_41733_, this, p_41734_);
     }
 
+    /** @deprecated Forge: Use {@linkplain IItemStackExtension#onDestroyed(ItemEntity, net.minecraft.world.damagesource.DamageSource) damage source sensitive version} */
+    @Deprecated
     public void onDestroyed(ItemEntity p_150925_) {
         this.getItem().onDestroyed(p_150925_);
     }
