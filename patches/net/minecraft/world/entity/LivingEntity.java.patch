--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -119,14 +_,16 @@
 import net.minecraft.world.scores.PlayerTeam;
 import org.slf4j.Logger;
 
-public abstract class LivingEntity extends Entity implements Attackable {
+public abstract class LivingEntity extends Entity implements Attackable, net.neoforged.neoforge.common.extensions.ILivingEntityExtension {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final String TAG_ACTIVE_EFFECTS = "active_effects";
     private static final UUID SPEED_MODIFIER_SOUL_SPEED_UUID = UUID.fromString("87f46a96-686f-4796-b035-22e16ee9e038");
     private static final UUID SPEED_MODIFIER_POWDER_SNOW_UUID = UUID.fromString("1eaf83ff-7207-4596-b37a-d7a07b3ec4ce");
+    private static final UUID SLOW_FALLING_ID = UUID.fromString("A5B6CF2A-2F7C-31EF-9022-7C3E7D5E6ABA");
     private static final AttributeModifier SPEED_MODIFIER_SPRINTING = new AttributeModifier(
         UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D"), "Sprinting speed boost", 0.3F, AttributeModifier.Operation.MULTIPLY_TOTAL
     );
+    private static final AttributeModifier SLOW_FALLING = new AttributeModifier(SLOW_FALLING_ID, "Slow falling acceleration reduction", -0.07, AttributeModifier.Operation.ADDITION); // Add -0.07 to 0.08 so we get the vanilla default of 0.01
     public static final int HAND_SLOTS = 2;
     public static final int ARMOR_SLOTS = 4;
     public static final int EQUIPMENT_SLOT_OFFSET = 98;
@@ -229,11 +_,33 @@
     private float swimAmountO;
     protected Brain<?> brain;
     private boolean skipDropExperience;
+    // CraftBukkit start
+    public int expToDrop;
+    public boolean forceDrops;
+    public java.util.ArrayList<org.bukkit.inventory.ItemStack> drops = new java.util.ArrayList<org.bukkit.inventory.ItemStack>();
+    public final org.bukkit.craftbukkit.v1_20_R3.attribute.CraftAttributeMap craftAttributes;
+    public boolean collides = true;
+    public java.util.Set<UUID> collidableExemptions = new java.util.HashSet<>();
+    public boolean bukkitPickUpLoot;
+
+    @Override
+    public float getBukkitYaw() {
+        return getYHeadRot();
+    }
+    // CraftBukkit end
+    // Spigot start
+    public void inactiveTick()
+    {
+        super.inactiveTick();
+        ++this.noActionTime; // Above all the floats
+    }
+    // Spigot end
 
     protected LivingEntity(EntityType<? extends LivingEntity> p_20966_, Level p_20967_) {
         super(p_20966_, p_20967_);
         this.attributes = new AttributeMap(DefaultAttributes.getSupplier(p_20966_));
-        this.setHealth(this.getMaxHealth());
+        this.craftAttributes = new org.bukkit.craftbukkit.v1_20_R3.attribute.CraftAttributeMap(attributes); // CraftBukkit
+        // CraftBukkit - this.setHealth(this.getMaxHealth()); inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
         this.blocksBuilding = true;
         this.rotA = (float)((Math.random() + 1.0) * 0.01F);
         this.reapplyPosition();
@@ -241,7 +_,15 @@
         this.setYRot((float)(Math.random() * (float) (Math.PI * 2)));
         this.yHeadRot = this.getYRot();
         this.setMaxUpStep(0.6F);
+        this.entityData.set(DATA_HEALTH_ID, (float) this.getAttributeBaseValue(Attributes.MAX_HEALTH));
+        if (!(this instanceof net.minecraft.world.entity.player.Player)) postInit();
+    }
+
+    @Override
+    protected void postInit(){
+        super.postInit();
         NbtOps nbtops = NbtOps.INSTANCE;
+        var dyn = new Dynamic<>(nbtops, nbtops.createMap(ImmutableMap.of(nbtops.createString("memories"), nbtops.emptyMap())));
         this.brain = this.makeBrain(new Dynamic<>(nbtops, nbtops.createMap(ImmutableMap.of(nbtops.createString("memories"), nbtops.emptyMap()))));
     }
 
@@ -284,7 +_,11 @@
             .add(Attributes.MOVEMENT_SPEED)
             .add(Attributes.ARMOR)
             .add(Attributes.ARMOR_TOUGHNESS)
-            .add(Attributes.MAX_ABSORPTION);
+            .add(Attributes.MAX_ABSORPTION)
+            .add(net.neoforged.neoforge.common.NeoForgeMod.SWIM_SPEED.value())
+            .add(net.neoforged.neoforge.common.NeoForgeMod.NAMETAG_DISTANCE.value())
+            .add(net.neoforged.neoforge.common.NeoForgeMod.ENTITY_GRAVITY.value())
+            .add(net.neoforged.neoforge.common.NeoForgeMod.STEP_HEIGHT.value());
     }
 
     @Override
@@ -314,7 +_,15 @@
             float f = (float)Mth.ceil(this.fallDistance - 3.0F);
             double d4 = Math.min((double)(0.2F + f / 15.0F), 2.5);
             int i = (int)(150.0 * d4);
-            ((ServerLevel)this.level()).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, p_20992_), d0, d1, d2, i, 0.0, 0.0, 0.0, 0.15F);
+            if (!p_20992_.addLandingEffects((ServerLevel) this.level(), p_20993_, p_20992_, this, i)) {
+                // CraftBukkit start - visiblity api
+                if (this instanceof ServerPlayer) {
+                    ((ServerLevel)this.level()).sendParticles((ServerPlayer) this, new BlockParticleOption(ParticleTypes.BLOCK, p_20992_).setPos(p_20993_), this.getX(), this.getY(), this.getZ(), i, 0.0D, 0.0D, 0.0D, (double)0.15F, false);
+                } else {
+                    ((ServerLevel)this.level()).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, p_20992_).setPos(p_20993_), d0, d1, d2, i, 0.0D, 0.0D, 0.0D, (double)0.15F);
+                }
+                // CraftBukkit end
+            }
         }
 
         super.checkFallDamage(p_20990_, p_20991_, p_20992_, p_20993_);
@@ -323,6 +_,7 @@
         }
     }
 
+    @Deprecated //FORGE: Use canDrownInFluidType instead
     public final boolean canBreatheUnderwater() {
         return this.getType().is(EntityTypeTags.CAN_BREATHE_UNDER_WATER);
     }
@@ -364,6 +_,9 @@
                 }
             }
 
+            int airSupply = this.getAirSupply();
+            net.neoforged.neoforge.common.CommonHooks.onLivingBreathe(this, airSupply - decreaseAirSupply(airSupply), increaseAirSupply(airSupply) - airSupply);
+            if (false) // Forge: Handled in ForgeHooks#onLivingBreathe(LivingEntity, int, int)
             if (this.isEyeInFluid(FluidTags.WATER)
                 && !this.level().getBlockState(BlockPos.containing(this.getX(), this.getEyeY(), this.getZ())).is(Blocks.BUBBLE_COLUMN)) {
                 boolean flag1 = !this.canBreatheUnderwater()
@@ -402,7 +_,7 @@
             }
         }
 
-        if (this.isAlive() && (this.isInWaterRainOrBubble() || this.isInPowderSnow)) {
+        if (this.isAlive() && (this.isInWaterRainOrBubble() || this.isInPowderSnow || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
             this.extinguishFire();
         }
 
@@ -670,7 +_,7 @@
         if (!flag && !ItemStack.isSameItemSameTags(p_238394_, p_238395_) && !this.firstTick) {
             Equipable equipable = Equipable.get(p_238395_);
             if (!this.level().isClientSide() && !this.isSpectator()) {
-                if (!this.isSilent() && equipable != null && equipable.getEquipmentSlot() == p_238393_) {
+                if (!this.isSilent() && equipable != null && equipable.getEquipmentSlot() == p_238393_ && !isSilentEquip()) { //Ketting
                     this.level().playSound(null, this.getX(), this.getY(), this.getZ(), equipable.getEquipSound(), this.getSoundSource(), 1.0F, 1.0F);
                 }
 
@@ -681,6 +_,14 @@
         }
     }
 
+    //Ketting start - forge compat
+    public void onEquipItem(EquipmentSlot p_238393_, ItemStack p_238394_, ItemStack p_238395_, boolean silent) {
+        setSilentEquip(silent);
+        onEquipItem(p_238393_, p_238394_, p_238395_);
+        setSilentEquip(false);
+    }
+    //Ketting end
+
     @Override
     public void remove(Entity.RemovalReason p_276115_) {
         super.remove(p_276115_);
@@ -734,6 +_,17 @@
             }
         }
 
+        // CraftBukkit start
+        if (p_21096_.contains("Bukkit.MaxHealth")) {
+            Tag nbtbase = p_21096_.get("Bukkit.MaxHealth");
+            if (nbtbase.getId() == 5) {
+                this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((net.minecraft.nbt.FloatTag) nbtbase).getAsDouble());
+            } else if (nbtbase.getId() == 3) {
+                this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((net.minecraft.nbt.IntTag) nbtbase).getAsDouble());
+            }
+        }
+        // CraftBukkit end
+
         if (p_21096_.contains("Health", 99)) {
             this.setHealth(p_21096_.getFloat("Health"));
         }
@@ -768,15 +_,44 @@
         }
     }
 
+    // CraftBukkit start
+    private boolean isTickingEffects = false;
+    private List<ProcessableEffect> effectsToProcess = Lists.newArrayList();
+
+    private static class ProcessableEffect {
+
+        private MobEffect type;
+        private MobEffectInstance effect;
+        private final org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause;
+
+        private ProcessableEffect(MobEffectInstance effect, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+            this.effect = effect;
+            this.cause = cause;
+        }
+
+        private ProcessableEffect(MobEffect type, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+            this.type = type;
+            this.cause = cause;
+        }
+    }
+    // CraftBukkit end
+
     protected void tickEffects() {
         Iterator<MobEffect> iterator = this.activeEffects.keySet().iterator();
 
+        isTickingEffects = true; // CraftBukkit
         try {
             while(iterator.hasNext()) {
                 MobEffect mobeffect = iterator.next();
                 MobEffectInstance mobeffectinstance = this.activeEffects.get(mobeffect);
                 if (!mobeffectinstance.tick(this, () -> this.onEffectUpdated(mobeffectinstance, true, null))) {
-                    if (!this.level().isClientSide) {
+                    if (!this.level().isClientSide && !net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.living.MobEffectEvent.Expired(this, mobeffectinstance)).isCanceled()) {
+                        // CraftBukkit start
+                        org.bukkit.event.entity.EntityPotionEffectEvent event = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffectinstance, null, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.EXPIRATION);
+                        if (event.isCancelled()) {
+                            continue;
+                        }
+                        // CraftBukkit end
                         iterator.remove();
                         this.onEffectRemoved(mobeffectinstance);
                     }
@@ -787,6 +_,19 @@
         } catch (ConcurrentModificationException concurrentmodificationexception) {
         }
 
+        // CraftBukkit start
+        isTickingEffects = false;
+        for (ProcessableEffect e : effectsToProcess) {
+            if (e.effect != null) {
+                prepareAddEffect(e.cause);
+                addEffect(e.effect);
+            } else {
+                removeEffect(e.type, e.cause);
+            }
+        }
+        effectsToProcess.clear();
+        // CraftBukkit end
+
         if (this.effectsDirty) {
             if (!this.level().isClientSide) {
                 this.updateInvisibilityStatus();
@@ -834,8 +_,10 @@
             this.setInvisible(false);
         } else {
             Collection<MobEffectInstance> collection = this.activeEffects.values();
-            this.entityData.set(DATA_EFFECT_AMBIENCE_ID, areAllEffectsAmbient(collection));
-            this.entityData.set(DATA_EFFECT_COLOR_ID, PotionUtils.getColor(collection));
+            net.neoforged.neoforge.event.entity.living.PotionColorCalculationEvent event = new net.neoforged.neoforge.event.entity.living.PotionColorCalculationEvent(this, PotionUtils.getColor(collection), areAllEffectsAmbient(collection), collection);
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event);
+            this.entityData.set(DATA_EFFECT_AMBIENCE_ID, event.areParticlesHidden());
+            this.entityData.set(DATA_EFFECT_COLOR_ID, event.getColor());
             this.setInvisible(this.hasEffect(MobEffects.INVISIBILITY));
         }
     }
@@ -874,6 +_,7 @@
             }
         }
 
+        d0 = net.neoforged.neoforge.common.CommonHooks.getEntityVisibilityMultiplier(this, p_20969_, d0);
         return d0;
     }
 
@@ -908,6 +_,15 @@
         this.entityData.set(DATA_EFFECT_COLOR_ID, 0);
     }
 
+    //Ketting start
+    public final java.util.concurrent.atomic.AtomicReference<org.bukkit.event.entity.EntityPotionEffectEvent.Cause> ketting$removeAllEffects$cause = new java.util.concurrent.atomic.AtomicReference<>(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+
+    public boolean removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+        ketting$removeAllEffects$cause.set(cause);
+        return removeAllEffects();
+    }
+    //Ketting end
+
     public boolean removeAllEffects() {
         if (this.level().isClientSide) {
             return false;
@@ -916,7 +_,15 @@
 
             boolean flag;
             for(flag = false; iterator.hasNext(); flag = true) {
-                this.onEffectRemoved(iterator.next());
+                MobEffectInstance effect = iterator.next();
+                if(net.neoforged.neoforge.event.EventHooks.onEffectRemoved(this, effect, null)) continue;
+                // CraftBukkit start
+                org.bukkit.event.entity.EntityPotionEffectEvent event = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, ketting$removeAllEffects$cause.getAndSet(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN), org.bukkit.event.entity.EntityPotionEffectEvent.Action.CLEARED);
+                if (event.isCancelled()) {
+                    continue;
+                }
+                // CraftBukkit end
+                this.onEffectRemoved(effect);
                 iterator.remove();
             }
 
@@ -941,31 +_,78 @@
         return this.activeEffects.get(p_21125_);
     }
 
+    //Ketting start - mixin issue
+    private org.bukkit.event.entity.EntityPotionEffectEvent.Cause addEffect$cause = org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN;
+    public final void prepareAddEffect(org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+        this.addEffect$cause = cause;
+    }
+
     public final boolean addEffect(MobEffectInstance p_21165_) {
         return this.addEffect(p_21165_, null);
     }
 
     public boolean addEffect(MobEffectInstance p_147208_, @Nullable Entity p_147209_) {
-        if (!this.canBeAffected(p_147208_)) {
-            return false;
-        } else {
-            MobEffectInstance mobeffectinstance = this.activeEffects.get(p_147208_.getEffect());
-            boolean flag = false;
-            if (mobeffectinstance == null) {
-                this.activeEffects.put(p_147208_.getEffect(), p_147208_);
-                this.onEffectAdded(p_147208_, p_147209_);
-                flag = true;
-            } else if (mobeffectinstance.update(p_147208_)) {
-                this.onEffectUpdated(mobeffectinstance, true, p_147209_);
-                flag = true;
-            }
-
-            p_147208_.onEffectStarted(this);
-            return flag;
+        try {
+            org.spigotmc.AsyncCatcher.catchOp("effect add"); // Spigot
+            if (isTickingEffects) {
+                effectsToProcess.add(new ProcessableEffect(p_147208_, addEffect$cause));
+                return true;
+            }
+
+            if (!this.canBeAffected(p_147208_)) {
+                return false;
+            } else {
+                MobEffectInstance mobeffectinstance = this.activeEffects.get(p_147208_.getEffect());
+                boolean flag = false;
+                // CraftBukkit start
+                boolean override = false;
+                if (mobeffectinstance != null) {
+                    override = new MobEffectInstance(mobeffectinstance).update(p_147208_);
+                }
+
+                org.bukkit.event.entity.EntityPotionEffectEvent event = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffectinstance, p_147208_, addEffect$cause, override);
+                if (event.isCancelled()) {
+                    return false;
+                }
+                // CraftBukkit end
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.living.MobEffectEvent.Added(this, mobeffectinstance, p_147208_, p_147209_));
+                if (mobeffectinstance == null) {
+                    this.activeEffects.put(p_147208_.getEffect(), p_147208_);
+                    this.onEffectAdded(p_147208_, p_147209_);
+                    flag = true;
+                    // CraftBukkit start
+                } else if (event.isOverride()) {
+                    mobeffectinstance.update(p_147208_);
+                    // CraftBukkit end
+                    this.onEffectUpdated(mobeffectinstance, true, p_147209_);
+                    flag = true;
+                }
+
+                p_147208_.onEffectStarted(this);
+                return flag;
+            }
+        } finally {
+            this.addEffect$cause = org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN;
         }
     }
+
+    // CraftBukkit start
+    public boolean addEffect(MobEffectInstance mobeffect, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+        prepareAddEffect(cause);
+        return addEffect(mobeffect);
+    }
+
+    public boolean addEffect(MobEffectInstance p_147208_, @Nullable Entity p_147209_, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+        prepareAddEffect(cause);
+        return addEffect(p_147208_, p_147209_);
+    }
+    // CraftBukkit end
+    //Ketting end
 
     public boolean canBeAffected(MobEffectInstance p_21197_) {
+        net.neoforged.neoforge.event.entity.living.MobEffectEvent.Applicable event = new net.neoforged.neoforge.event.entity.living.MobEffectEvent.Applicable(this, p_21197_);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event);
+        if (event.getResult() != net.neoforged.bus.api.Event.Result.DEFAULT) return event.getResult() == net.neoforged.bus.api.Event.Result.ALLOW;
         if (this.getMobType() == MobType.UNDEAD) {
             MobEffect mobeffect = p_21197_.getEffect();
             if (mobeffect == MobEffects.REGENERATION || mobeffect == MobEffects.POISON) {
@@ -991,12 +_,51 @@
         return this.getMobType() == MobType.UNDEAD;
     }
 
+    //Ketting start
+    public final java.util.concurrent.atomic.AtomicReference<org.bukkit.event.entity.EntityPotionEffectEvent.Cause> ketting$removeEffectNoUpdate$cause = new java.util.concurrent.atomic.AtomicReference<>(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+    // CraftBukkit start
+    @SuppressWarnings("unused") //Ketting - CB compat
+    public @Nullable MobEffectInstance removeEffectNoUpdate(@Nullable MobEffect mobeffect, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+        ketting$removeEffectNoUpdate$cause.set(cause);
+        return removeEffectNoUpdate(mobeffect);
+    }
+    //Ketting end
+
     @Nullable
     public MobEffectInstance removeEffectNoUpdate(@Nullable MobEffect p_21164_) {
+        if (isTickingEffects) {
+            effectsToProcess.add(new ProcessableEffect(p_21164_, ketting$removeEffectNoUpdate$cause.getAndSet(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN))); //ketting
+            return null;
+        }
+
+        MobEffectInstance effect = this.activeEffects.get(p_21164_);
+        if (effect == null) {
+            ketting$removeEffectNoUpdate$cause.set(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);//ketting
+            return null;
+        }
+
+        org.bukkit.event.entity.EntityPotionEffectEvent event = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, ketting$removeEffectNoUpdate$cause.getAndSet(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN));
+        if (event.isCancelled()) {
+            return null;
+        }
+
         return this.activeEffects.remove(p_21164_);
     }
 
+    public final java.util.concurrent.atomic.AtomicReference<org.bukkit.event.entity.EntityPotionEffectEvent.Cause> ketting$removeEffect$cause = new java.util.concurrent.atomic.AtomicReference<>(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+
+    public boolean removeEffect(MobEffect p_21196_, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+        ketting$removeEffect$cause.set(cause);
+        return removeEffect(p_21196_);
+    }
+
     public boolean removeEffect(MobEffect p_21196_) {
+        if (net.neoforged.neoforge.event.EventHooks.onEffectRemoved(this, p_21196_, null)) {
+            ketting$removeEffect$cause.set(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+            return false;
+        }
+        ketting$removeEffectNoUpdate$cause.set(ketting$removeEffect$cause.getAndSet(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN));
+        // CraftBukkit end
         MobEffectInstance mobeffectinstance = this.removeEffectNoUpdate(p_21196_);
         if (mobeffectinstance != null) {
             this.onEffectRemoved(mobeffectinstance);
@@ -1070,18 +_,62 @@
         }
     }
 
+    // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
+    // Ketting - reverse that delegation, because mixins 
+    public @Nullable org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason ketting$heal$regainReason = null;
+    public void heal(float p_21116_, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason regainReason){
+        try{
+            ketting$heal$regainReason = regainReason;
+            heal(p_21116_);
+        }finally {
+            ketting$heal$regainReason = null;
+        }
+    }
+
     public void heal(float p_21116_) {
+        p_21116_ = net.neoforged.neoforge.event.EventHooks.onLivingHeal(this, p_21116_);
+        if (p_21116_ <= 0) return;
         float f = this.getHealth();
         if (f > 0.0F) {
-            this.setHealth(f + p_21116_);
+            org.bukkit.event.entity.EntityRegainHealthEvent event = new org.bukkit.event.entity.EntityRegainHealthEvent(this.getBukkitEntity(), p_21116_, ketting$heal$regainReason);
+            // Suppress during worldgen
+            if (this.valid) {
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (!event.isCancelled()) {
+                this.setHealth((float) (f + event.getAmount()));
+            }
+            // CraftBukkit end
         }
     }
 
     public float getHealth() {
+        // CraftBukkit start - Use unscaled health
+        if (this instanceof ServerPlayer) {
+            return (float) ((ServerPlayer) this).getBukkitEntity().getHealth();
+        }
+        // CraftBukkit end
         return this.entityData.get(DATA_HEALTH_ID);
     }
 
     public void setHealth(float p_21154_) {
+        // CraftBukkit start - Handle scaled health
+        if (this instanceof ServerPlayer) {
+            org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer player = ((ServerPlayer) this).getBukkitEntity();
+            // Squeeze
+            if (p_21154_ < 0.0F) {
+                player.setRealHealth(0.0D);
+            } else if (p_21154_ > player.getMaxHealth()) {
+                player.setRealHealth(player.getMaxHealth());
+            } else {
+                player.setRealHealth(p_21154_);
+            }
+
+            player.updateScaledHealth(false);
+            return;
+        }
+        // CraftBukkit end
         this.entityData.set(DATA_HEALTH_ID, Mth.clamp(p_21154_, 0.0F, this.getMaxHealth()));
     }
 
@@ -1091,11 +_,12 @@
 
     @Override
     public boolean hurt(DamageSource p_21016_, float p_21017_) {
+        if (!net.neoforged.neoforge.common.CommonHooks.onLivingAttack(this, p_21016_, p_21017_)) return false;
         if (this.isInvulnerableTo(p_21016_)) {
             return false;
         } else if (this.level().isClientSide) {
             return false;
-        } else if (this.isDeadOrDying()) {
+        } else if (this.isRemoved() || this.dead || this.isDeadOrDying()) { // CraftBukkit - Don't allow entities that got set to dead/killed elsewhere to get damaged and die
             return false;
         } else if (p_21016_.is(DamageTypeTags.IS_FIRE) && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
             return false;
@@ -1106,20 +_,25 @@
 
             this.noActionTime = 0;
             float f = p_21017_;
-            boolean flag = false;
+            boolean flag = p_21017_ > 0.0F && this.isDamageSourceBlocked(p_21016_); // Copied from below
             float f1 = 0.0F;
-            if (p_21017_ > 0.0F && this.isDamageSourceBlocked(p_21016_)) {
-                this.hurtCurrentlyUsedShield(p_21017_);
-                f1 = p_21017_;
-                p_21017_ = 0.0F;
-                if (!p_21016_.is(DamageTypeTags.IS_PROJECTILE)) {
-                    Entity entity = p_21016_.getDirectEntity();
-                    if (entity instanceof LivingEntity livingentity) {
-                        this.blockUsingShield(livingentity);
+            // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+            if (false && p_21017_ > 0.0F && this.isDamageSourceBlocked(p_21016_)) {
+                net.neoforged.neoforge.event.entity.living.ShieldBlockEvent ev = net.neoforged.neoforge.common.CommonHooks.onShieldBlock(this, p_21016_, p_21017_);
+                if(!ev.isCanceled()) {
+                    if (ev.shieldTakesDamage()) this.hurtCurrentlyUsedShield(p_21017_);
+                    f1 = ev.getBlockedDamage();
+                    p_21017_ -= ev.getBlockedDamage();
+                    if (!p_21016_.is(DamageTypeTags.IS_PROJECTILE)) {
+                        Entity entity = p_21016_.getDirectEntity();
+                        if (entity instanceof LivingEntity) {
+                            LivingEntity livingentity = (LivingEntity) entity;
+                            this.blockUsingShield(livingentity);
+                        }
                     }
-                }
 
-                flag = true;
+                    flag = p_21017_ <= 0;
+                }
             }
 
             if (p_21016_.is(DamageTypeTags.IS_FREEZING) && this.getType().is(EntityTypeTags.FREEZE_HURTS_EXTRA_TYPES)) {
@@ -1128,23 +_,34 @@
 
             this.walkAnimation.setSpeed(1.5F);
             boolean flag1 = true;
-            if ((float)this.invulnerableTime > 10.0F && !p_21016_.is(DamageTypeTags.BYPASSES_COOLDOWN)) {
+            if ((float)this.invulnerableTime > (float) this.invulnerableDuration / 2.0F && !p_21016_.is(DamageTypeTags.BYPASSES_COOLDOWN)) { // CraftBukkit - restore use of maxNoDamageTicks
                 if (p_21017_ <= this.lastHurt) {
                     return false;
                 }
 
-                this.actuallyHurt(p_21016_, p_21017_ - this.lastHurt);
+                // CraftBukkit start
+                // this.actuallyHurt(p_21016_, p_21017_ - this.lastHurt);
+                if (!this.damageEntity0(p_21016_, f - this.lastHurt)) {
+                    return false;
+                }
+                // CraftBukkit end
                 this.lastHurt = p_21017_;
                 flag1 = false;
             } else {
+                // CraftBukkit start
+                if (!this.damageEntity0(p_21016_, f)) {
+                    return false;
+                }
                 this.lastHurt = p_21017_;
-                this.invulnerableTime = 20;
-                this.actuallyHurt(p_21016_, p_21017_);
+                this.invulnerableTime = this.invulnerableDuration; // CraftBukkit - restore use of maxNoDamageTicks
+                // this.actuallyHurt(p_21016_, p_21017_);
+                // CraftBukkit end
                 this.hurtDuration = 10;
                 this.hurtTime = this.hurtDuration;
             }
 
-            if (p_21016_.is(DamageTypeTags.DAMAGES_HELMET) && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+            // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+            if (false && p_21016_.is(DamageTypeTags.DAMAGES_HELMET) && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
                 this.hurtHelmet(p_21016_, p_21017_);
                 p_21017_ *= 0.75F;
             }
@@ -1158,9 +_,9 @@
                 if (entity1 instanceof Player player1) {
                     this.lastHurtByPlayerTime = 100;
                     this.lastHurtByPlayer = player1;
-                } else if (entity1 instanceof Wolf wolf && wolf.isTame()) {
+                } else if (entity1 instanceof TamableAnimal tamableAnimal && tamableAnimal.isTame()) {
                     this.lastHurtByPlayerTime = 100;
-                    LivingEntity livingentity2 = wolf.getOwner();
+                    LivingEntity livingentity2 = tamableAnimal.getOwner();
                     if (livingentity2 instanceof Player player) {
                         this.lastHurtByPlayer = player;
                     } else {
@@ -1217,7 +_,7 @@
             if (this instanceof ServerPlayer) {
                 CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer)this, p_21016_, f, p_21017_, flag);
                 if (f1 > 0.0F && f1 < 3.4028235E37F) {
-                    ((ServerPlayer)this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(f1 * 10.0F));
+                    ((ServerPlayer)this).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_BLOCKED_BY_SHIELD), Math.round(f1 * 10.0F));
                 }
             }
 
@@ -1243,31 +_,51 @@
         } else {
             ItemStack itemstack = null;
 
+            // CraftBukkit start
+            InteractionHand hand = null;
+            ItemStack itemstack1 = ItemStack.EMPTY;
             for(InteractionHand interactionhand : InteractionHand.values()) {
-                ItemStack itemstack1 = this.getItemInHand(interactionhand);
-                if (itemstack1.is(Items.TOTEM_OF_UNDYING)) {
+                itemstack1 = this.getItemInHand(interactionhand);
+                if (itemstack1.is(Items.TOTEM_OF_UNDYING) && net.neoforged.neoforge.common.CommonHooks.onLivingUseTotem(this, p_21263_, itemstack1, interactionhand)) {
+                    hand = interactionhand; // CraftBukkit
                     itemstack = itemstack1.copy();
+                    // itemstack1.shrink(1); // CraftBukkit
+                    break;
+                }
+            }
+
+            org.bukkit.inventory.EquipmentSlot handSlot = (hand != null) ? org.bukkit.craftbukkit.v1_20_R3.CraftEquipmentSlot.getHand(hand) : null;
+            org.bukkit.event.entity.EntityResurrectEvent event = new org.bukkit.event.entity.EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity(), handSlot);
+            event.setCancelled(itemstack == null);
+            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+                if (!itemstack1.isEmpty()) {
                     itemstack1.shrink(1);
-                    break;
                 }
-            }
 
-            if (itemstack != null) {
-                if (this instanceof ServerPlayer serverplayer) {
-                    serverplayer.awardStat(Stats.ITEM_USED.get(Items.TOTEM_OF_UNDYING));
+                if (itemstack != null && this instanceof ServerPlayer) {
+                    // CraftBukkit end
+                    ServerPlayer serverplayer = (ServerPlayer)this;
+                    serverplayer.awardStat(Stats.ITEM_USED.get(Items.TOTEM_OF_UNDYING), 1);
                     CriteriaTriggers.USED_TOTEM.trigger(serverplayer, itemstack);
                     this.gameEvent(GameEvent.ITEM_INTERACT_FINISH);
                 }
 
                 this.setHealth(1.0F);
-                this.removeAllEffects();
+                // CraftBukkit start
+                this.removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+                prepareAddEffect(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
                 this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 900, 1));
+                prepareAddEffect(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
                 this.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 100, 1));
+                prepareAddEffect(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
                 this.addEffect(new MobEffectInstance(MobEffects.FIRE_RESISTANCE, 800, 0));
+                // CraftBukkit end
                 this.level().broadcastEntityEvent(this, (byte)35);
             }
 
-            return itemstack != null;
+            return !event.isCancelled(); // CraftBukkit
         }
     }
 
@@ -1328,6 +_,7 @@
     }
 
     public void die(DamageSource p_21014_) {
+        if (net.neoforged.neoforge.common.CommonHooks.onLivingDeath(this, p_21014_)) return;
         if (!this.isRemoved() && !this.dead) {
             Entity entity = p_21014_.getEntity();
             LivingEntity livingentity = this.getKillCredit();
@@ -1340,7 +_,7 @@
             }
 
             if (!this.level().isClientSide && this.hasCustomName()) {
-                LOGGER.info("Named entity {} died: {}", this, this.getCombatTracker().getDeathMessage().getString());
+                if (org.spigotmc.SpigotConfig.logNamedDeaths) LOGGER.info("Named entity {} died: {}", this, this.getCombatTracker().getDeathMessage().getString()); // Spigot
             }
 
             this.dead = true;
@@ -1364,54 +_,107 @@
         if (!this.level().isClientSide) {
             boolean flag = false;
             if (p_21269_ instanceof WitherBoss) {
-                if (this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+                if (net.neoforged.neoforge.event.EventHooks.getMobGriefingEvent(this.level(), p_21269_)) {
                     BlockPos blockpos = this.blockPosition();
                     BlockState blockstate = Blocks.WITHER_ROSE.defaultBlockState();
                     if (this.level().getBlockState(blockpos).isAir() && blockstate.canSurvive(this.level(), blockpos)) {
-                        this.level().setBlock(blockpos, blockstate, 3);
-                        flag = true;
+                        // CraftBukkit start - call EntityBlockFormEvent for Wither Rose
+                        flag = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.handleBlockFormEvent(this.level(), blockpos, blockstate, 3, this);;
+                        // CraftBukkit end
                     }
                 }
 
                 if (!flag) {
                     ItemEntity itementity = new ItemEntity(this.level(), this.getX(), this.getY(), this.getZ(), new ItemStack(Items.WITHER_ROSE));
+                    // CraftBukkit start
+                    org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+                    org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEvent(event);
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
                     this.level().addFreshEntity(itementity);
                 }
             }
         }
     }
 
+    //Ketting start - capture death drops
+    private @Nullable net.minecraft.world.entity.player.Inventory forgeCaptures = null;
+    protected @Nullable net.minecraft.world.entity.player.Inventory getForgeCapturesAndClear() {
+        net.minecraft.world.entity.player.Inventory temp = forgeCaptures;
+        forgeCaptures = null;
+        return temp;
+    }
     protected void dropAllDeathLoot(DamageSource p_21192_) {
         Entity entity = p_21192_.getEntity();
-        int i;
-        if (entity instanceof Player) {
-            i = EnchantmentHelper.getMobLooting((LivingEntity)entity);
-        } else {
-            i = 0;
-        }
+
+        int i = net.neoforged.neoforge.common.CommonHooks.getLootingLevel(this, entity, p_21192_);
+        this.captureDrops(new java.util.ArrayList<>());
 
         boolean flag = this.lastHurtByPlayerTime > 0;
+        this.dropEquipment(); // CraftBukkit - from below
         if (this.shouldDropLoot() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
             this.dropFromLootTable(p_21192_, flag);
             this.dropCustomDeathLoot(p_21192_, i, flag);
         }
 
-        this.dropEquipment();
+        // this.dropEquipment(); // CraftBukkit - moved up
         this.dropExperience();
+
+        
+        Collection<ItemEntity> drops = captureDrops(null);
+
+        if (this instanceof ServerPlayer player) {
+            forgeCaptures = new net.minecraft.world.entity.player.Inventory(player);
+            forgeCaptures.replaceWith(player.getInventory());
+            player.getInventory().clearContent();
+        }
+
+        if (!net.neoforged.neoforge.common.CommonHooks.onLivingDrops(this, p_21192_, drops, i, lastHurtByPlayerTime > 0)) {
+            drops.forEach(e -> level().addFreshEntity(e));
+            if (!(this instanceof ServerPlayer))
+                org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEntityDeathEvent(this, this.drops);
+        }
+
+        if (this instanceof ServerPlayer player) {
+            // grab potential items added to the inventory after the death event was called
+            net.minecraft.world.entity.player.Inventory captured = new net.minecraft.world.entity.player.Inventory(player);
+            captured.replaceWith(player.getInventory());
+
+            // restore the inventory to before the event was called
+            player.getInventory().clearContent();
+            player.getInventory().replaceWith(forgeCaptures);
+
+            // add the items that were added after the event was called
+            forgeCaptures.clearContent();
+            forgeCaptures.replaceWith(captured);
+        }
     }
+    //Ketting end
 
     protected void dropEquipment() {
     }
 
-    protected void dropExperience() {
-        if (this.level() instanceof ServerLevel
-            && !this.wasExperienceConsumed()
-            && (
-                this.isAlwaysExperienceDropper()
-                    || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)
-            )) {
-            ExperienceOrb.award((ServerLevel)this.level(), this.position(), this.getExperienceReward());
-        }
+    // CraftBukkit start
+    public int getExpReward() {
+        if (this.level() instanceof ServerLevel && !this.wasExperienceConsumed() && (this.isAlwaysExperienceDropper() || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT))) {
+            int i = this.getExperienceReward();
+            return i;
+        } else {
+            return 0;
+        }
+    }
+    // CraftBukkit end
+
+    public void dropExperience() {
+        // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+        if (true && !(this instanceof net.minecraft.world.entity.boss.enderdragon.EnderDragon)) { // CraftBukkit - SPIGOT-2420: Special case ender dragon will drop the xp over time
+            int reward = net.neoforged.neoforge.event.EventHooks.getExperienceDrop(this, this.lastHurtByPlayer, this.expToDrop);
+            ExperienceOrb.award((ServerLevel) this.level(), this.position(), reward);
+            this.expToDrop = 0;
+        }
+
     }
 
     protected void dropCustomDeathLoot(DamageSource p_21018_, int p_21019_, boolean p_21020_) {
@@ -1444,6 +_,11 @@
     }
 
     public void knockback(double p_147241_, double p_147242_, double p_147243_) {
+        net.neoforged.neoforge.event.entity.living.LivingKnockBackEvent event = net.neoforged.neoforge.common.CommonHooks.onLivingKnockBack(this, (float) p_147241_, p_147242_, p_147243_);
+        if(event.isCanceled()) return;
+        p_147241_ = event.getStrength();
+        p_147242_ = event.getRatioX();
+        p_147243_ = event.getRatioZ();
         p_147241_ *= 1.0 - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
         if (!(p_147241_ <= 0.0)) {
             this.hasImpulse = true;
@@ -1505,6 +_,28 @@
         return p_21202_.getEatingSound();
     }
 
+    // CraftBukkit start - Add delegate methods
+    public SoundEvent getHurtSound0(DamageSource damagesource) {
+        return getHurtSound(damagesource);
+    }
+
+    public SoundEvent getDeathSound0() {
+        return getDeathSound();
+    }
+
+    public SoundEvent getFallDamageSound0(int fallHeight) {
+        return getFallDamageSound(fallHeight);
+    }
+
+    public SoundEvent getDrinkingSound0(ItemStack itemstack) {
+        return getDrinkingSound(itemstack);
+    }
+
+    public SoundEvent getEatingSound0(ItemStack itemstack) {
+        return getEatingSound(itemstack);
+    }
+    // CraftBukkit end
+
     public Optional<BlockPos> getLastClimbablePos() {
         return this.lastClimbablePos;
     }
@@ -1515,15 +_,9 @@
         } else {
             BlockPos blockpos = this.blockPosition();
             BlockState blockstate = this.getFeetBlockState();
-            if (blockstate.is(BlockTags.CLIMBABLE)) {
-                this.lastClimbablePos = Optional.of(blockpos);
-                return true;
-            } else if (blockstate.getBlock() instanceof TrapDoorBlock && this.trapdoorUsableAsLadder(blockpos, blockstate)) {
-                this.lastClimbablePos = Optional.of(blockpos);
-                return true;
-            } else {
-                return false;
-            }
+            Optional<BlockPos> ladderPos = net.neoforged.neoforge.common.CommonHooks.isLivingOnLadder(blockstate, level(), blockpos, this);
+            if (ladderPos.isPresent()) this.lastClimbablePos = ladderPos;
+            return ladderPos.isPresent();
         }
     }
 
@@ -1545,12 +_,22 @@
 
     @Override
     public boolean causeFallDamage(float p_147187_, float p_147188_, DamageSource p_147189_) {
+        float[] ret = net.neoforged.neoforge.common.CommonHooks.onLivingFall(this, p_147187_, p_147188_);
+        if (ret == null) return false;
+        p_147187_ = ret[0];
+        p_147188_ = ret[1];
+
         boolean flag = super.causeFallDamage(p_147187_, p_147188_, p_147189_);
         int i = this.calculateFallDamage(p_147187_, p_147188_);
         if (i > 0) {
+            // CraftBukkit start
+            if (!this.hurt(p_147189_, (float)i)) {
+                return true;
+            }
+            // CraftBukkit end
             this.playSound(this.getFallDamageSound(i), 1.0F, 1.0F);
             this.playBlockFallSound();
-            this.hurt(p_147189_, (float)i);
+            // this.hurt(p_147189_, (float)i); // CraftBukkit - moved up
             return true;
         } else {
             return flag;
@@ -1572,9 +_,10 @@
             int i = Mth.floor(this.getX());
             int j = Mth.floor(this.getY() - 0.2F);
             int k = Mth.floor(this.getZ());
-            BlockState blockstate = this.level().getBlockState(new BlockPos(i, j, k));
+            BlockPos pos = new BlockPos(i, j, k);
+            BlockState blockstate = this.level().getBlockState(pos);
             if (!blockstate.isAir()) {
-                SoundType soundtype = blockstate.getSoundType();
+                SoundType soundtype = blockstate.getSoundType(level(), pos, this);
                 this.playSound(soundtype.getFallSound(), soundtype.getVolume() * 0.5F, soundtype.getPitch() * 0.75F);
             }
         }
@@ -1601,7 +_,11 @@
 
     protected float getDamageAfterArmorAbsorb(DamageSource p_21162_, float p_21163_) {
         if (!p_21162_.is(DamageTypeTags.BYPASSES_ARMOR)) {
+            //Ketting start - ignore damage
+            org.kettingpowered.ketting.utils.ArmorUtil.addIgnoreArmorDamage(p_21162_);
             this.hurtArmor(p_21162_, p_21163_);
+            org.kettingpowered.ketting.utils.ArmorUtil.removeIgnoreArmorDamage(p_21162_);
+            //Ketting end
             p_21163_ = CombatRules.getDamageAfterAbsorb(p_21163_, (float)this.getArmorValue(), (float)this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
         }
 
@@ -1612,7 +_,8 @@
         if (p_21193_.is(DamageTypeTags.BYPASSES_EFFECTS)) {
             return p_21194_;
         } else {
-            if (this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && !p_21193_.is(DamageTypeTags.BYPASSES_RESISTANCE)) {
+            // CraftBukkit - Moved to damageEntity0(DamageSource, float)
+            if (false && this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && !p_21193_.is(DamageTypeTags.BYPASSES_RESISTANCE)) {
                 int i = (this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
                 int j = 25 - i;
                 float f = p_21194_ * (float)j;
@@ -1621,9 +_,9 @@
                 float f2 = f1 - p_21194_;
                 if (f2 > 0.0F && f2 < 3.4028235E37F) {
                     if (this instanceof ServerPlayer) {
-                        ((ServerPlayer)this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f2 * 10.0F));
+                        ((ServerPlayer)this).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_RESISTED), Math.round(f2 * 10.0F));
                     } else if (p_21193_.getEntity() instanceof ServerPlayer) {
-                        ((ServerPlayer)p_21193_.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f2 * 10.0F));
+                        ((ServerPlayer)p_21193_.getEntity()).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_DEALT_RESISTED), Math.round(f2 * 10.0F));
                     }
                 }
             }
@@ -1643,8 +_,202 @@
         }
     }
 
+    // CraftBukkit start
+    protected boolean damageEntity0(final DamageSource damagesource, float f) { // void -> boolean, add final
+        if (!this.isInvulnerableTo(damagesource)) {
+            // Check if entity is a "human" aka player
+            final boolean human = this instanceof ServerPlayer;
+            float originalDamage = f;
+            // Cauldron start - apply forge damage hook
+            f = net.neoforged.neoforge.common.CommonHooks.onLivingHurt(this, damagesource, f);
+            // If the damage is negative return true
+            if (f < 0) return true;
+            // Thermos detect null damage
+            final boolean nulldmg = f == 0;
+            // Cauldron end
+            com.google.common.base.Function<Double, Double> hardHat = new com.google.common.base.Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    if (damagesource.is(DamageTypeTags.DAMAGES_HELMET) && !LivingEntity.this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+                        return -(f - (f * 0.75F));
+
+                    }
+                    return -0.0;
+                }
+            };
+            float hardHatModifier = hardHat.apply((double) f).floatValue();
+            f += hardHatModifier;
+
+            com.google.common.base.Function<Double, Double> blocking = new com.google.common.base.Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -((LivingEntity.this.isDamageSourceBlocked(damagesource)) ? f : 0.0);
+                }
+            };
+            float blockingModifier = blocking.apply((double) f).floatValue();
+            f += blockingModifier;
+
+            com.google.common.base.Function<Double, Double> armor = new com.google.common.base.Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(f - LivingEntity.this.getDamageAfterArmorAbsorb(damagesource, f.floatValue()));
+                }
+            };
+            float armorModifier = armor.apply((double) f).floatValue();
+            f += armorModifier;
+
+            com.google.common.base.Function<Double, Double> resistance = new com.google.common.base.Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    if (!damagesource.is(DamageTypeTags.BYPASSES_EFFECTS) && LivingEntity.this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && !damagesource.is(DamageTypeTags.BYPASSES_RESISTANCE)) {
+                        int i = (LivingEntity.this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
+                        int j = 25 - i;
+                        float f1 = f.floatValue() * (float) j;
+                        return -(f - (f1 / 25.0F));
+                    }
+                    return -0.0;
+                }
+            };
+            float resistanceModifier = resistance.apply((double) f).floatValue();
+            f += resistanceModifier;
+
+            com.google.common.base.Function<Double, Double> magic = new com.google.common.base.Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(f - LivingEntity.this.getDamageAfterMagicAbsorb(damagesource, f.floatValue()));
+                }
+            };
+            float magicModifier = magic.apply((double) f).floatValue();
+            f += magicModifier;
+
+            com.google.common.base.Function<Double, Double> absorption = new com.google.common.base.Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(Math.max(f - Math.max(f - LivingEntity.this.getAbsorptionAmount(), 0.0F), 0.0F));
+                }
+            };
+            float absorptionModifier = absorption.apply((double) f).floatValue();
+
+            org.bukkit.event.entity.EntityDamageEvent event = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
+            if (damagesource.getEntity() instanceof Player) {
+                ((Player) damagesource.getEntity()).resetAttackStrengthTicker(); // Moved from EntityHuman in order to make the cooldown reset get called after the damage event is fired
+            }
+            if (event.isCancelled()) {
+                return false;
+            }
+
+            f = (float) event.getFinalDamage();
+            if (nulldmg) return true; // Preclude any stupidity with null head items
+
+            // Resistance
+            if (event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.RESISTANCE) < 0) {
+                float f3 = (float) -event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.RESISTANCE);
+                if (f3 > 0.0F && f3 < 3.4028235E37F) {
+                    if (this instanceof ServerPlayer) {
+                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+                    } else if (damagesource.getEntity() instanceof ServerPlayer) {
+                        ((ServerPlayer) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+                    }
+                }
+            }
+
+            // Apply damage to helmet
+            if (damagesource.is(DamageTypeTags.DAMAGES_HELMET) && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+                this.hurtHelmet(damagesource, f);
+            }
+
+            // Apply damage to armor
+            if (!damagesource.is(DamageTypeTags.BYPASSES_ARMOR)) {
+                float armorDamage = (float) (event.getDamage() + event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING) + event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.HARD_HAT));
+                this.hurtArmor(damagesource, armorDamage);
+            }
+
+            // Apply blocking code // PAIL: steal from above
+            if (event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING) < 0) {
+                var ev = net.minecraftforge.event.ForgeEventFactory.onShieldBlock(this, damagesource, (float) event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING)); //Ketting
+
+                if (!ev.isCanceled()) {
+                    this.level().broadcastEntityEvent(this, (byte) 29); // SPIGOT-4635 - shield damage sound
+                    if (ev.shieldTakesDamage()) this.hurtCurrentlyUsedShield(-ev.getBlockedDamage());
+                    Entity entity = damagesource.getDirectEntity();
+
+                    if (entity instanceof LivingEntity) {
+                        this.blockUsingShield((LivingEntity) entity);
+                    }
+                }
+            }
+
+            absorptionModifier = (float) -event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.ABSORPTION);
+            this.setAbsorptionAmount(Math.max(this.getAbsorptionAmount() - absorptionModifier, 0.0F));
+            float f2 = absorptionModifier;
+
+            if (f2 > 0.0F && f2 < 3.4028235E37F && this instanceof Player) {
+                ((Player) this).awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+            }
+            if (f2 > 0.0F && f2 < 3.4028235E37F) {
+                Entity entity = damagesource.getEntity();
+
+                if (entity instanceof ServerPlayer) {
+                    ServerPlayer entityplayer = (ServerPlayer) entity;
+
+                    entityplayer.awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f2 * 10.0F));
+                }
+            }
+
+            if (f > 0 || !human) {
+                if (human) {
+                    // PAIL: Be sure to drag all this code from the EntityHuman subclass each update.
+                    ((Player) this).causeFoodExhaustion(damagesource.getFoodExhaustion(), org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED); // CraftBukkit - EntityExhaustionEvent
+                    if (f < 3.4028235E37F) {
+                        ((Player) this).awardStat(Stats.DAMAGE_TAKEN, Math.round(f * 10.0F));
+                    }
+                }
+                // CraftBukkit end
+                this.getCombatTracker().recordDamage(damagesource, f);
+                this.setHealth(this.getHealth() - f);
+                // CraftBukkit start
+                if (!human) {
+                    this.setAbsorptionAmount(this.getAbsorptionAmount() - f);
+                }
+                this.gameEvent(GameEvent.ENTITY_DAMAGE);
+
+                return true;
+            } else {
+                // Duplicate triggers if blocking
+                if (event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING) < 0) {
+                    if (this instanceof ServerPlayer) {
+                        CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, damagesource, f, originalDamage, true);
+                        f2 = (float) -event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING);
+                        if (f2 > 0.0F && f2 < 3.4028235E37F) {
+                            ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(originalDamage * 10.0F));
+                        }
+                    }
+
+                    if (damagesource.getEntity() instanceof ServerPlayer) {
+                        CriteriaTriggers.PLAYER_HURT_ENTITY.trigger((ServerPlayer) damagesource.getEntity(), this, damagesource, f, originalDamage, true);
+                    }
+
+                    return false;
+                } else {
+                    return originalDamage > 0;
+                }
+                // CraftBukkit end
+            }
+        }
+        return false; // CraftBukkit
+    }
+
+    //Ketting - this exists, so that the compiler doesn't try to optimize the else out. If it does, some mods have a mixin error.
+    protected boolean actuallyHurt$override = true;
     protected void actuallyHurt(DamageSource p_21240_, float p_21241_) {
+        if (actuallyHurt$override) {
+            damageEntity0(p_21240_, p_21241_);
+            return;
+        }
+        else
         if (!this.isInvulnerableTo(p_21240_)) {
+            p_21241_ = net.neoforged.neoforge.common.CommonHooks.onLivingHurt(this, p_21240_, p_21241_);
+            if (p_21241_ <= 0) return;
             p_21241_ = this.getDamageAfterArmorAbsorb(p_21240_, p_21241_);
             p_21241_ = this.getDamageAfterMagicAbsorb(p_21240_, p_21241_);
             float f1 = Math.max(p_21241_ - this.getAbsorptionAmount(), 0.0F);
@@ -1657,6 +_,7 @@
                 }
             }
 
+            f1 = net.neoforged.neoforge.common.CommonHooks.onLivingDamage(this, p_21240_, f1);
             if (f1 != 0.0F) {
                 this.getCombatTracker().recordDamage(p_21240_, f1);
                 this.setHealth(this.getHealth() - f1);
@@ -1692,8 +_,17 @@
     }
 
     public final void setArrowCount(int p_21318_) {
-        this.entityData.set(DATA_ARROW_COUNT_ID, p_21318_);
-    }
+        setArrowCount(p_21318_, false);
+    }
+
+    public final void setArrowCount(int p_21318_, boolean flag) {
+        org.bukkit.event.entity.ArrowBodyCountChangeEvent event = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callArrowBodyCountChangeEvent(this, getArrowCount(), p_21318_, flag);
+        if (event.isCancelled()) {
+            return;
+        }
+        this.entityData.set(LivingEntity.DATA_ARROW_COUNT_ID, event.getNewAmount());
+    }
+    // CraftBukkit end
 
     public final int getStingerCount() {
         return this.entityData.get(DATA_STINGER_COUNT_ID);
@@ -1716,6 +_,8 @@
     }
 
     public void swing(InteractionHand p_21012_, boolean p_21013_) {
+        ItemStack stack = this.getItemInHand(p_21012_);
+        if (!stack.isEmpty() && stack.onEntitySwing(this)) return;
         if (!this.swinging || this.swingTime >= this.getCurrentSwingDuration() / 2 || this.swingTime < 0) {
             this.swingTime = -1;
             this.swinging = true;
@@ -1825,8 +_,10 @@
 
     private void swapHandItems() {
         ItemStack itemstack = this.getItemBySlot(EquipmentSlot.OFFHAND);
-        this.setItemSlot(EquipmentSlot.OFFHAND, this.getItemBySlot(EquipmentSlot.MAINHAND));
-        this.setItemSlot(EquipmentSlot.MAINHAND, itemstack);
+        var event = net.neoforged.neoforge.common.CommonHooks.onLivingSwapHandItems(this);
+        if (event.isCanceled()) return;
+        this.setItemSlot(EquipmentSlot.OFFHAND, event.getItemSwappedToOffHand());
+        this.setItemSlot(EquipmentSlot.MAINHAND, event.getItemSwappedToMainHand());
     }
 
     @Override
@@ -1925,6 +_,27 @@
 
     public abstract ItemStack getItemBySlot(EquipmentSlot p_21127_);
 
+    // CraftBukkit start
+    public void setItemSlot(EquipmentSlot slot, ItemStack itemstack, boolean silent) {
+        //Ketting start - no mixin injects pls
+        setSilentEquip(silent);
+        this.setItemSlot(slot, itemstack);
+        setSilentEquip(false);
+        //Ketting end
+    }
+    // CraftBukkit end
+
+    //Ketting start
+    private boolean setItemSlot$silent = false;
+    protected boolean isSilentEquip() {
+        return setItemSlot$silent;
+    }
+
+    protected void setSilentEquip(boolean silent) {
+        setItemSlot$silent = silent;
+    }
+    //Ketting end
+    
     @Override
     public abstract void setItemSlot(EquipmentSlot p_21036_, ItemStack p_21037_);
 
@@ -2018,14 +_,17 @@
         }
 
         this.hasImpulse = true;
+        net.neoforged.neoforge.common.CommonHooks.onLivingJump(this);
     }
 
+    @Deprecated // FORGE: use sinkInFluid instead
     protected void goDownInWater() {
-        this.setDeltaMovement(this.getDeltaMovement().add(0.0, -0.04F, 0.0));
+        this.sinkInFluid(net.neoforged.neoforge.common.NeoForgeMod.WATER_TYPE.value());
     }
 
+    @Deprecated // FORGE: use jumpInFluid instead
     protected void jumpInLiquid(TagKey<Fluid> p_204043_) {
-        this.setDeltaMovement(this.getDeltaMovement().add(0.0, 0.04F, 0.0));
+        this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)0.04F * this.getAttribute(net.neoforged.neoforge.common.NeoForgeMod.SWIM_SPEED.value()).getValue(), 0.0D));
     }
 
     protected float getWaterSlowDown() {
@@ -2039,13 +_,18 @@
     public void travel(Vec3 p_21280_) {
         if (this.isControlledByLocalInstance()) {
             double d0 = 0.08;
+            AttributeInstance gravity = this.getAttribute(net.neoforged.neoforge.common.NeoForgeMod.ENTITY_GRAVITY.value());
             boolean flag = this.getDeltaMovement().y <= 0.0;
             if (flag && this.hasEffect(MobEffects.SLOW_FALLING)) {
-                d0 = 0.01;
+                if (!gravity.hasModifier(SLOW_FALLING)) gravity.addTransientModifier(SLOW_FALLING);
+            } else if (gravity.hasModifier(SLOW_FALLING)) {
+                gravity.removeModifier(SLOW_FALLING_ID);
             }
+            d0 = gravity.getValue();
 
             FluidState fluidstate = this.level().getFluidState(this.blockPosition());
-            if (this.isInWater() && this.isAffectedByFluids() && !this.canStandOnFluid(fluidstate)) {
+            if ((this.isInWater() || (this.isInFluidType(fluidstate) && fluidstate.getFluidType() != net.neoforged.neoforge.common.NeoForgeMod.LAVA_TYPE.value())) && this.isAffectedByFluids() && !this.canStandOnFluid(fluidstate)) {
+                if (this.isInWater() || (this.isInFluidType(fluidstate) && !this.moveInFluid(fluidstate, p_21280_, d0))) {
                 double d9 = this.getY();
                 float f4 = this.isSprinting() ? 0.9F : this.getWaterSlowDown();
                 float f5 = 0.02F;
@@ -2067,6 +_,7 @@
                     f4 = 0.96F;
                 }
 
+                f5 *= (float)this.getAttribute(net.neoforged.neoforge.common.NeoForgeMod.SWIM_SPEED.value()).getValue();
                 this.moveRelative(f5, p_21280_);
                 this.move(MoverType.SELF, this.getDeltaMovement());
                 Vec3 vec36 = this.getDeltaMovement();
@@ -2080,6 +_,7 @@
                 if (this.horizontalCollision && this.isFree(vec32.x, vec32.y + 0.6F - this.getY() + d9, vec32.z)) {
                     this.setDeltaMovement(vec32.x, 0.3F, vec32.z);
                 }
+                }
             } else if (this.isInLava() && this.isAffectedByFluids() && !this.canStandOnFluid(fluidstate)) {
                 double d8 = this.getY();
                 this.moveRelative(0.02F, p_21280_);
@@ -2138,11 +_,12 @@
                 }
 
                 if (this.onGround() && !this.level().isClientSide) {
+                    if (getSharedFlag(7) && !org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
                     this.setSharedFlag(7, false);
                 }
             } else {
                 BlockPos blockpos = this.getBlockPosBelowThatAffectsMyMovement();
-                float f2 = this.level().getBlockState(blockpos).getBlock().getFriction();
+                float f2 = this.level().getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getFriction(level(), this.getBlockPosBelowThatAffectsMyMovement(), this);
                 float f3 = this.onGround() ? f2 * 0.91F : 0.91F;
                 Vec3 vec35 = this.handleRelativeFrictionAndCalculateMovement(p_21280_, f2);
                 double d2 = vec35.y;
@@ -2238,7 +_,7 @@
             double d0 = Mth.clamp(p_21298_.x, -0.15F, 0.15F);
             double d1 = Mth.clamp(p_21298_.z, -0.15F, 0.15F);
             double d2 = Math.max(p_21298_.y, -0.15F);
-            if (d2 < 0.0 && !this.getFeetBlockState().is(Blocks.SCAFFOLDING) && this.isSuppressingSlidingDownLadder() && this instanceof Player) {
+            if (d2 < 0.0D && !this.getFeetBlockState().isScaffolding(this) && this.isSuppressingSlidingDownLadder() && this instanceof Player) {
                 d2 = 0.0;
             }
 
@@ -2271,6 +_,8 @@
 
     @Override
     public void tick() {
+        if (net.neoforged.neoforge.common.CommonHooks.onLivingTick(this)) return;
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityBaseTick.startTiming(); // Spigot
         super.tick();
         this.updatingUsingItem();
         this.updateSwimAmount();
@@ -2310,7 +_,9 @@
         }
 
         if (!this.isRemoved()) {
+            org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityBaseTick.stopTiming(); // Spigot
             this.aiStep();
+            org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityTickRest.startTiming(); // Spigot
         }
 
         double d1 = this.getX() - this.xo;
@@ -2391,6 +_,11 @@
         }
 
         this.refreshDirtyAttributes();
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityTickRest.stopTiming(); // Spigot
+    }
+
+    public void detectEquipmentUpdatesPublic() { // CraftBukkit
+        detectEquipmentUpdates(); //Ketting - just redirect this
     }
 
     private void detectEquipmentUpdates() {
@@ -2422,6 +_,7 @@
 
             ItemStack itemstack1 = this.getItemBySlot(equipmentslot);
             if (this.equipmentHasChanged(itemstack, itemstack1)) {
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.living.LivingEquipmentChangeEvent(this, equipmentslot, itemstack, itemstack1));
                 if (map == null) {
                     map = Maps.newEnumMap(EquipmentSlot.class);
                 }
@@ -2552,6 +_,7 @@
 
         this.setDeltaMovement(d0, d1, d2);
         this.level().getProfiler().push("ai");
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityAI.startTiming(); // Spigot
         if (this.isImmobile()) {
             this.jumping = false;
             this.xxa = 0.0F;
@@ -2561,11 +_,15 @@
             this.serverAiStep();
             this.level().getProfiler().pop();
         }
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityAI.stopTiming(); // Spigot
 
         this.level().getProfiler().pop();
         this.level().getProfiler().push("jump");
         if (this.jumping && this.isAffectedByFluids()) {
             double d3;
+            net.neoforged.neoforge.fluids.FluidType fluidType = this.getMaxHeightFluidType();
+            if (!fluidType.isAir()) d3 = this.getFluidTypeHeight(fluidType);
+            else
             if (this.isInLava()) {
                 d3 = this.getFluidHeight(FluidTags.LAVA);
             } else {
@@ -2576,15 +_,17 @@
             double d4 = this.getFluidJumpThreshold();
             if (!flag || this.onGround() && !(d3 > d4)) {
                 if (!this.isInLava() || this.onGround() && !(d3 > d4)) {
+                    if (fluidType.isAir() || this.onGround() && !(d3 > d4)) {
                     if ((this.onGround() || flag && d3 <= d4) && this.noJumpDelay == 0) {
                         this.jumpFromGround();
                         this.noJumpDelay = 10;
                     }
+                    } else this.jumpInFluid(fluidType);
                 } else {
-                    this.jumpInLiquid(FluidTags.LAVA);
+                    this.jumpInFluid(net.neoforged.neoforge.common.NeoForgeMod.LAVA_TYPE.value());
                 }
             } else {
-                this.jumpInLiquid(FluidTags.WATER);
+                this.jumpInFluid(net.neoforged.neoforge.common.NeoForgeMod.WATER_TYPE.value());
             }
         } else {
             this.noJumpDelay = 0;
@@ -2601,6 +_,7 @@
             this.resetFallDistance();
         }
 
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityAIMove.startTiming(); // Spigot
         label104: {
             LivingEntity livingentity = this.getControllingPassenger();
             if (livingentity instanceof Player player && this.isAlive()) {
@@ -2610,6 +_,7 @@
 
             this.travel(vec31);
         }
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot
 
         this.level().getProfiler().pop();
         this.level().getProfiler().push("freezing");
@@ -2635,7 +_,9 @@
             this.checkAutoSpinAttack(aabb, this.getBoundingBox());
         }
 
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityAICollision.startTiming(); // Spigot
         this.pushEntities();
+        org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.timerEntityAICollision.stopTiming(); // Spigot
         this.level().getProfiler().pop();
         if (!this.level().isClientSide && this.isSensitiveToWater() && this.isInWaterRainOrBubble()) {
             this.hurt(this.damageSources().drown(), 1.0F);
@@ -2650,6 +_,8 @@
         boolean flag = this.getSharedFlag(7);
         if (flag && !this.onGround() && !this.isPassenger() && !this.hasEffect(MobEffects.LEVITATION)) {
             ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
+            flag = itemstack.canElytraFly(this) && itemstack.elytraFlightTick(this, this.fallFlyTicks);
+            if (false) //Forge: Moved to ElytraItem
             if (itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack)) {
                 flag = true;
                 int i = this.fallFlyTicks + 1;
@@ -2669,6 +_,7 @@
         }
 
         if (!this.level().isClientSide) {
+            if (flag != this.getSharedFlag(7) && !org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
             this.setSharedFlag(7, flag);
         }
     }
@@ -2849,8 +_,15 @@
 
     @Override
     public boolean isPushable() {
-        return this.isAlive() && !this.isSpectator() && !this.onClimbable();
-    }
+        return this.isAlive() && !this.isSpectator() && !this.onClimbable() && this.collides; // CraftBukkit
+    }
+
+    // CraftBukkit start - collidable API
+    @Override
+    public boolean canCollideWithBukkit(Entity entity) {
+        return isPushable() && this.collides != this.collidableExemptions.contains(entity.getUUID());
+    }
+    // CraftBukkit end
 
     @Override
     public float getYHeadRot() {
@@ -2910,8 +_,11 @@
 
     private void updatingUsingItem() {
         if (this.isUsingItem()) {
-            if (ItemStack.isSameItem(this.getItemInHand(this.getUsedItemHand()), this.useItem)) {
-                this.useItem = this.getItemInHand(this.getUsedItemHand());
+            ItemStack itemStack = this.getItemInHand(this.getUsedItemHand());
+            if (net.neoforged.neoforge.common.CommonHooks.canContinueUsing(this.useItem, itemStack)) {
+                this.useItem = itemStack;
+            }
+            if (itemStack == this.useItem) {
                 this.updateUsingItem(this.useItem);
             } else {
                 this.stopUsingItem();
@@ -2920,19 +_,22 @@
     }
 
     protected void updateUsingItem(ItemStack p_147201_) {
+        if (!p_147201_.isEmpty())
+             this.useItemRemaining = net.neoforged.neoforge.event.EventHooks.onItemUseTick(this, p_147201_, this.getUseItemRemainingTicks());
+        if (this.getUseItemRemainingTicks() > 0)
         p_147201_.onUseTick(this.level(), this, this.getUseItemRemainingTicks());
         if (this.shouldTriggerItemUseEffects()) {
             this.triggerItemUseEffects(p_147201_, 5);
         }
 
-        if (--this.useItemRemaining == 0 && !this.level().isClientSide && !p_147201_.useOnRelease()) {
+        if (--this.useItemRemaining <= 0 && !this.level().isClientSide && !p_147201_.useOnRelease()) {
             this.completeUsingItem();
         }
     }
 
     private boolean shouldTriggerItemUseEffects() {
         int i = this.getUseItemRemainingTicks();
-        FoodProperties foodproperties = this.useItem.getItem().getFoodProperties();
+        FoodProperties foodproperties = this.useItem.getFoodProperties(this);
         boolean flag = foodproperties != null && foodproperties.isFastFood();
         flag |= i <= this.useItem.getUseDuration() - 7;
         return flag && i % 4 == 0;
@@ -2961,8 +_,10 @@
     public void startUsingItem(InteractionHand p_21159_) {
         ItemStack itemstack = this.getItemInHand(p_21159_);
         if (!itemstack.isEmpty() && !this.isUsingItem()) {
+            int duration = net.neoforged.neoforge.event.EventHooks.onItemUseStart(this, itemstack, itemstack.getUseDuration());
+            if (duration < 0) return; // Neo: Early return for negative values, as that indicates event cancellation.
             this.useItem = itemstack;
-            this.useItemRemaining = itemstack.getUseDuration();
+            this.useItemRemaining = duration;
             if (!this.level().isClientSide) {
                 this.setLivingEntityFlag(1, true);
                 this.setLivingEntityFlag(2, p_21159_ == InteractionHand.OFF_HAND);
@@ -3038,7 +_,29 @@
             } else {
                 if (!this.useItem.isEmpty() && this.isUsingItem()) {
                     this.triggerItemUseEffects(this.useItem, 16);
-                    ItemStack itemstack = this.useItem.finishUsingItem(this.level(), this);
+                    ItemStack copy = this.useItem.copy();
+                    // CraftBukkit start - fire PlayerItemConsumeEvent
+                    ItemStack forgeResult = net.neoforged.neoforge.event.EventHooks.onItemUseFinish(this, copy, getUseItemRemainingTicks(), this.useItem.finishUsingItem(this.level(), this));
+                    ItemStack itemstack;
+                    if (this instanceof ServerPlayer) {
+                        org.bukkit.inventory.ItemStack craftItem = org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asBukkitCopy(this.useItem);
+                        org.bukkit.inventory.EquipmentSlot hand = org.bukkit.craftbukkit.v1_20_R3.CraftEquipmentSlot.getHand(interactionhand);
+                        org.bukkit.event.player.PlayerItemConsumeEvent event = new org.bukkit.event.player.PlayerItemConsumeEvent((org.bukkit.entity.Player) this.getBukkitEntity(), craftItem, hand);
+                        this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                        if (event.isCancelled()) {
+                            // Update client
+                            ((ServerPlayer) this).getBukkitEntity().updateInventory();
+                            ((ServerPlayer) this).getBukkitEntity().updateScaledHealth();
+                            return;
+                        }
+
+                        itemstack = (craftItem.equals(event.getItem())) ? forgeResult : org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asNMSCopy(event.getItem()).finishUsingItem(this.level(), this);
+                    } else {
+                        itemstack = forgeResult;
+                    }
+                    // CraftBukkit end
+
                     if (itemstack != this.useItem) {
                         this.setItemInHand(interactionhand, itemstack);
                     }
@@ -3063,7 +_,11 @@
 
     public void releaseUsingItem() {
         if (!this.useItem.isEmpty()) {
+            if (!net.neoforged.neoforge.event.EventHooks.onUseItemStop(this, useItem, this.getUseItemRemainingTicks())) {
+                ItemStack copy = this instanceof Player ? useItem.copy() : null;
             this.useItem.releaseUsing(this.level(), this, this.getUseItemRemainingTicks());
+              if (copy != null && useItem.isEmpty()) net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem((Player)this, copy, getUsedItemHand());
+            }
             if (this.useItem.useOnRelease()) {
                 this.updatingUsingItem();
             }
@@ -3073,6 +_,7 @@
     }
 
     public void stopUsingItem() {
+        if (this.isUsingItem() && !this.useItem.isEmpty()) this.useItem.onStopUsing(this, useItemRemaining);
         if (!this.level().isClientSide) {
             boolean flag = this.isUsingItem();
             this.setLivingEntityFlag(1, false);
@@ -3088,7 +_,7 @@
     public boolean isBlocking() {
         if (this.isUsingItem() && !this.useItem.isEmpty()) {
             Item item = this.useItem.getItem();
-            if (item.getUseAnimation(this.useItem) != UseAnim.BLOCK) {
+            if (!this.useItem.canPerformAction(net.neoforged.neoforge.common.ToolActions.SHIELD_BLOCK)) {
                 return false;
             } else {
                 return item.getUseDuration(this.useItem) - this.useItemRemaining >= 5;
@@ -3138,15 +_,45 @@
             }
 
             if (flag1) {
-                this.teleportTo(p_20985_, d3, p_20987_);
+                // CraftBukkit start - Teleport event
+                // this.teleportTo(p_20985_, d3, p_20987_);
+
+                // first set position, to check if the place to teleport is valid
+                this.setPos(p_20985_, d3, p_20987_);
                 if (level.noCollision(this) && !level.containsAnyLiquid(this.getBoundingBox())) {
                     flag = true;
                 }
+                // now revert and call event if the teleport place is valid
+                this.setPos(d0, d1, d2);
+
+                if (flag) {
+                    if (!(this instanceof ServerPlayer)) {
+                        org.bukkit.event.entity.EntityTeleportEvent teleport = new org.bukkit.event.entity.EntityTeleportEvent(this.getBukkitEntity(), new org.bukkit.Location(this.level().getWorld(), d0, d1, d2), new org.bukkit.Location(this.level().getWorld(), p_20985_, d3, p_20987_));
+                        this.level().getCraftServer().getPluginManager().callEvent(teleport);
+                        if (!teleport.isCancelled()) {
+                            org.bukkit.Location to = teleport.getTo();
+                            this.teleportTo(to.getX(), to.getY(), to.getZ());
+                        } else {
+                            this.ketting$randomTeleportCB = Optional.empty(); // CraftBukkit // Ketting
+                            return false;
+                        }
+                    } else {
+                        // player teleport event is called in the underlining code
+                        ((ServerPlayer) this).connection.ketting$teleport$reason.set(this.ketting$teleportCause.getAndSet(org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN));
+                        ((ServerPlayer) this).connection.teleport(p_20985_, d3, p_20987_, this.getYRot(), this.getXRot(), java.util.Collections.emptySet());
+                        if (((ServerPlayer) this).connection.ketting$teleport$result) {
+                            this.ketting$randomTeleportCB = Optional.empty(); // CraftBukkit // Ketting
+                            return false;
+                        }
+                    }
+                }
+                // CraftBukkit end
             }
         }
 
         if (!flag) {
-            this.teleportTo(d0, d1, d2);
+            // this.teleportTo(d0, d1, d2); // CraftBukkit - already set the location back
+            this.ketting$randomTeleportCB = Optional.of(false); // CraftBukkit // Ketting
             return false;
         } else {
             if (p_20988_) {
@@ -3157,8 +_,19 @@
                 pathfindermob.getNavigation().stop();
             }
 
-            return true;
+            this.ketting$randomTeleportCB = Optional.of(true); // CraftBukkit // Ketting
+            return false;
         }
+    }
+
+    // Ketting start
+    public Optional<Boolean> ketting$randomTeleportCB = Optional.empty();
+    public java.util.concurrent.atomic.AtomicReference<org.bukkit.event.player.PlayerTeleportEvent.TeleportCause> ketting$teleportCause = new java.util.concurrent.atomic.AtomicReference<>(org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    public Optional<Boolean> randomTeleport(double p_20985_, double p_20986_, double p_20987_, boolean p_20988_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) { // CraftBukkit
+        this.ketting$teleportCause.set(cause);
+        this.randomTeleport(p_20985_, p_20986_, p_20987_, p_20988_);
+        return this.ketting$randomTeleportCB;
+        // Ketting end
     }
 
     public boolean isAffectedByPotions() {
@@ -3229,8 +_,8 @@
         }
 
         BlockState blockstate = this.level().getBlockState(p_21141_);
-        if (blockstate.getBlock() instanceof BedBlock) {
-            this.level().setBlock(p_21141_, blockstate.setValue(BedBlock.OCCUPIED, Boolean.valueOf(true)), 3);
+        if (blockstate.isBed(level(), p_21141_, this)) {
+            blockstate.setBedOccupied(level(), p_21141_, this, true);
         }
 
         this.setPose(Pose.SLEEPING);
@@ -3245,15 +_,17 @@
     }
 
     private boolean checkBedExists() {
-        return this.getSleepingPos().map(p_311581_ -> this.level().getBlockState(p_311581_).getBlock() instanceof BedBlock).orElse(false);
+        return this.getSleepingPos().map((p_289310_) -> {
+            return net.neoforged.neoforge.event.EventHooks.fireSleepingLocationCheck(this, p_289310_);
+        }).orElse(false);
     }
 
     public void stopSleeping() {
         this.getSleepingPos().filter(this.level()::hasChunkAt).ifPresent(p_261435_ -> {
             BlockState blockstate = this.level().getBlockState(p_261435_);
-            if (blockstate.getBlock() instanceof BedBlock) {
+            if (blockstate.isBed(level(), p_261435_, this)) {
                 Direction direction = blockstate.getValue(BedBlock.FACING);
-                this.level().setBlock(p_261435_, blockstate.setValue(BedBlock.OCCUPIED, Boolean.valueOf(false)), 3);
+                blockstate.setBedOccupied(level(), p_261435_, this, false);
                 Vec3 vec31 = BedBlock.findStandUpPosition(this.getType(), this.level(), p_261435_, direction, this.getYRot()).orElseGet(() -> {
                     BlockPos blockpos = p_261435_.above();
                     return new Vec3((double)blockpos.getX() + 0.5, (double)blockpos.getY() + 0.1, (double)blockpos.getZ() + 0.5);
@@ -3274,7 +_,9 @@
     @Nullable
     public Direction getBedOrientation() {
         BlockPos blockpos = this.getSleepingPos().orElse(null);
-        return blockpos != null ? BedBlock.getBedOrientation(this.level(), blockpos) : null;
+        if (blockpos == null) return Direction.UP;
+        BlockState state = this.level().getBlockState(blockpos);
+        return !state.isBed(level(), blockpos, this) ? Direction.UP : state.getBedDirection(level(), blockpos);
     }
 
     @Override
@@ -3292,7 +_,7 @@
     }
 
     public ItemStack getProjectile(ItemStack p_21272_) {
-        return ItemStack.EMPTY;
+        return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_21272_, ItemStack.EMPTY);
     }
 
     public ItemStack eat(Level p_21067_, ItemStack p_21068_) {
@@ -3321,8 +_,9 @@
     private void addEatEffect(ItemStack p_21064_, Level p_21065_, LivingEntity p_21066_) {
         Item item = p_21064_.getItem();
         if (item.isEdible()) {
-            for(Pair<MobEffectInstance, Float> pair : item.getFoodProperties().getEffects()) {
+            for(Pair<MobEffectInstance, Float> pair : p_21064_.getFoodProperties(this).getEffects()) {
                 if (!p_21065_.isClientSide && pair.getFirst() != null && p_21065_.random.nextFloat() < pair.getSecond()) {
+                    p_21066_.prepareAddEffect(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.FOOD); //Ketting
                     p_21066_.addEffect(new MobEffectInstance(pair.getFirst()));
                 }
             }
@@ -3356,6 +_,39 @@
         this.broadcastBreakEvent(p_21191_ == InteractionHand.MAIN_HAND ? EquipmentSlot.MAINHAND : EquipmentSlot.OFFHAND);
     }
 
+    /* ==== FORGE START ==== */
+    /***
+     * Removes all potion effects that have the given {@link net.neoforged.neoforge.common.EffectCure} in their set of cures
+     * @param cure the EffectCure being used
+     */
+    public boolean removeEffectsCuredBy(net.neoforged.neoforge.common.EffectCure cure) {
+        if (this.level().isClientSide)
+            return false;
+        boolean ret = false;
+        Iterator<MobEffectInstance> itr = this.activeEffects.values().iterator();
+        while (itr.hasNext()) {
+            MobEffectInstance effect = itr.next();
+            if (effect.getCures().contains(cure) && !net.neoforged.neoforge.event.EventHooks.onEffectRemoved(this, effect, cure)) {
+                this.onEffectRemoved(effect);
+                itr.remove();
+                ret = true;
+                this.effectsDirty = true;
+            }
+        }
+        return ret;
+    }
+
+    /**
+     * Returns true if the entity's rider (EntityPlayer) should face forward when mounted.
+     * currently only used in vanilla code by pigs.
+     *
+     * @param player The player who is riding the entity.
+     * @return If the player should orient the same direction as this entity.
+     */
+    public boolean shouldRiderFaceForward(Player player) {
+        return this instanceof net.minecraft.world.entity.animal.Pig;
+    }
+
     @Override
     public AABB getBoundingBoxForCulling() {
         if (this.getItemBySlot(EquipmentSlot.HEAD).is(Items.DRAGON_HEAD)) {
@@ -3367,6 +_,8 @@
     }
 
     public static EquipmentSlot getEquipmentSlotForItem(ItemStack p_147234_) {
+        final EquipmentSlot slot = p_147234_.getEquipmentSlot();
+        if (slot != null) return slot; // FORGE: Allow modders to set a non-default equipment slot for a stack; e.g. a non-armor chestplate-slot item
         Equipable equipable = Equipable.get(p_147234_);
         return equipable != null ? equipable.getEquipmentSlot() : EquipmentSlot.MAINHAND;
     }
@@ -3442,9 +_,14 @@
     }
 
     public boolean canDisableShield() {
-        return this.getMainHandItem().getItem() instanceof AxeItem;
+        return this.getMainHandItem().canDisableShield(this.useItem, this, this);
     }
 
+    /**
+     * Gets the value of the legacy {@link #maxUpStep} field.
+     * @deprecated Use {@link #getStepHeight()} to get the real step height value.
+     */
+    @Deprecated
     @Override
     public float maxUpStep() {
         float f = super.maxUpStep();
