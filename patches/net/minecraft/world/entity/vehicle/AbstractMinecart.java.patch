--- a/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -46,7 +_,7 @@
 import net.minecraft.world.phys.Vec3;
 import org.joml.Vector3f;
 
-public abstract class AbstractMinecart extends VehicleEntity {
+public abstract class AbstractMinecart extends VehicleEntity implements net.neoforged.neoforge.common.extensions.IAbstractMinecartExtension {
     private static final float LOWERED_PASSENGER_ATTACHMENT_Y = 0.0F;
     private static final float PASSENGER_ATTACHMENT_Y = 0.1875F;
     private static final EntityDataAccessor<Integer> DATA_ID_DISPLAY_BLOCK = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
@@ -65,6 +_,7 @@
     private double lerpYRot;
     private double lerpXRot;
     private Vec3 targetDeltaMovement = Vec3.ZERO;
+    private boolean canBePushed = true;
     private static final Map<RailShape, Pair<Vec3i, Vec3i>> EXITS = Util.make(Maps.newEnumMap(RailShape.class), p_38135_ -> {
         Vec3i vec3i = Direction.WEST.getNormal();
         Vec3i vec3i1 = Direction.EAST.getNormal();
@@ -85,6 +_,18 @@
         p_38135_.put(RailShape.NORTH_WEST, Pair.of(vec3i2, vec3i));
         p_38135_.put(RailShape.NORTH_EAST, Pair.of(vec3i2, vec3i1));
     });
+    private static net.neoforged.neoforge.common.IMinecartCollisionHandler COLLISIONS = null;
+
+    // CraftBukkit start
+    public boolean slowWhenEmpty = true;
+    private double derailedX = 0.5;
+    private double derailedY = 0.5;
+    private double derailedZ = 0.5;
+    private double flyingX = 0.95;
+    private double flyingY = 0.95;
+    private double flyingZ = 0.95;
+    public double maxSpeed = 0.4D;
+    // CraftBukkit end
 
     protected AbstractMinecart(EntityType<?> p_38087_, Level p_38088_) {
         super(p_38087_, p_38088_);
@@ -99,6 +_,14 @@
         this.zo = p_38094_;
     }
 
+    public net.neoforged.neoforge.common.IMinecartCollisionHandler getCollisionHandler() {
+        return COLLISIONS;
+    }
+
+    public static void registerCollisionHandler(@Nullable net.neoforged.neoforge.common.IMinecartCollisionHandler handler) {
+        COLLISIONS = handler;
+    }
+
     public static AbstractMinecart createMinecart(
         ServerLevel p_305794_,
         double p_38121_,
@@ -141,7 +_,7 @@
 
     @Override
     public boolean isPushable() {
-        return true;
+        return canBePushed;
     }
 
     @Override
@@ -238,6 +_,13 @@
 
     @Override
     public void tick() {
+        // CraftBukkit start
+        double prevX = this.getX();
+        double prevY = this.getY();
+        double prevZ = this.getZ();
+        float prevYaw = this.getYRot();
+        float prevPitch = this.getXRot();
+        // CraftBukkit end
         if (this.getHurtTime() > 0) {
             this.setHurtTime(this.getHurtTime() - 1);
         }
@@ -247,7 +_,7 @@
         }
 
         this.checkBelowWorld();
-        this.handleNetherPortal();
+        // this.handleNetherPortal(); // CraftBukkit - handled in postTick
         if (this.level().isClientSide) {
             if (this.lerpSteps > 0) {
                 this.lerpPositionAndRotationStep(this.lerpSteps, this.lerpX, this.lerpY, this.lerpZ, this.lerpYRot, this.lerpXRot);
@@ -272,9 +_,9 @@
             BlockPos blockpos = new BlockPos(k, i, j);
             BlockState blockstate = this.level().getBlockState(blockpos);
             this.onRails = BaseRailBlock.isRail(blockstate);
-            if (this.onRails) {
+            if (canUseRail() && this.onRails) {
                 this.moveAlongTrack(blockpos, blockstate);
-                if (blockstate.is(Blocks.ACTIVATOR_RAIL)) {
+                if (blockstate.getBlock() instanceof PoweredRailBlock && ((PoweredRailBlock) blockstate.getBlock()).isActivatorRail()) {
                     this.activateMinecart(k, i, j, blockstate.getValue(PoweredRailBlock.POWERED));
                 }
             } else {
@@ -299,8 +_,23 @@
             }
 
             this.setRot(this.getYRot(), this.getXRot());
-            if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01) {
-                List<Entity> list = this.level().getEntities(this, this.getBoundingBox().inflate(0.2F, 0.0, 0.2F), EntitySelector.pushableBy(this));
+            AABB box;
+            if (getCollisionHandler() != null) box = getCollisionHandler().getMinecartCollisionBox(this);
+            else box = this.getBoundingBox().inflate(0.2F, 0.0D, 0.2F);
+            // CraftBukkit start
+            org.bukkit.World bworld = this.level().getWorld();
+            org.bukkit.Location from = new org.bukkit.Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+            org.bukkit.Location to = org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation.toBukkit(this.position(), bworld, this.getYRot(), this.getXRot());
+            org.bukkit.entity.Vehicle vehicle = (org.bukkit.entity.Vehicle) this.getBukkitEntity();
+
+            this.level().getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+            if (!from.equals(to)) {
+                this.level().getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+            }
+            // CraftBukkit end
+            if (canBeRidden() && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
+                List<Entity> list = this.level().getEntities(this, box, EntitySelector.pushableBy(this));
                 if (!list.isEmpty()) {
                     for(Entity entity1 : list) {
                         if (!(entity1 instanceof Player)
@@ -308,15 +_,41 @@
                             && !(entity1 instanceof AbstractMinecart)
                             && !this.isVehicle()
                             && !entity1.isPassenger()) {
+                            // CraftBukkit start
+                            org.bukkit.event.vehicle.VehicleEntityCollisionEvent collisionEvent = new org.bukkit.event.vehicle.VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
+                            this.level().getCraftServer().getPluginManager().callEvent(collisionEvent);
+
+                            if (collisionEvent.isCancelled()) {
+                                continue;
+                            }
+                            // CraftBukkit end
                             entity1.startRiding(this);
                         } else {
+                            // CraftBukkit start
+                            if (!this.isPassengerOfSameVehicle(entity1)) {
+                                org.bukkit.event.vehicle.VehicleEntityCollisionEvent collisionEvent = new org.bukkit.event.vehicle.VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
+                                this.level().getCraftServer().getPluginManager().callEvent(collisionEvent);
+
+                                if (collisionEvent.isCancelled()) {
+                                    continue;
+                                }
+                            }
+                            // CraftBukkit end
                             entity1.push(this);
                         }
                     }
                 }
             } else {
-                for(Entity entity : this.level().getEntities(this, this.getBoundingBox().inflate(0.2F, 0.0, 0.2F))) {
+                for(Entity entity : this.level().getEntities(this, box)) {
                     if (!this.hasPassenger(entity) && entity.isPushable() && entity instanceof AbstractMinecart) {
+                        // CraftBukkit start
+                        org.bukkit.event.vehicle.VehicleEntityCollisionEvent collisionEvent = new org.bukkit.event.vehicle.VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
+                        this.level().getCraftServer().getPluginManager().callEvent(collisionEvent);
+
+                        if (collisionEvent.isCancelled()) {
+                            continue;
+                        }
+                        // CraftBukkit end
                         entity.push(this);
                     }
                 }
@@ -333,23 +_,34 @@
     }
 
     protected double getMaxSpeed() {
-        return (this.isInWater() ? 4.0 : 8.0) / 20.0;
+        return (this.isInWater() ? this.maxSpeed / 2.0D: this.maxSpeed); // CraftBukkit
     }
 
     public void activateMinecart(int p_38111_, int p_38112_, int p_38113_, boolean p_38114_) {
     }
 
     protected void comeOffTrack() {
-        double d0 = this.getMaxSpeed();
+        double d0 = this.onGround() ? this.getMaxSpeed() : getMaxSpeedAirLateral();
         Vec3 vec3 = this.getDeltaMovement();
         this.setDeltaMovement(Mth.clamp(vec3.x, -d0, d0), vec3.y, Mth.clamp(vec3.z, -d0, d0));
         if (this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.5));
+            // CraftBukkit start - replace magic numbers with our variables
+            this.setDeltaMovement(new Vec3(this.getDeltaMovement().x * this.derailedX, this.getDeltaMovement().y * this.derailedY, this.getDeltaMovement().z * this.derailedZ));
+            // CraftBukkit end
+        }
+
+        if (getMaxSpeedAirVertical() > 0 && getDeltaMovement().y > getMaxSpeedAirVertical()) {
+             if(Math.abs(getDeltaMovement().x) < 0.3f && Math.abs(getDeltaMovement().z) < 0.3f)
+                  setDeltaMovement(new Vec3(getDeltaMovement().x, 0.15f, getDeltaMovement().z));
+             else
+                  setDeltaMovement(new Vec3(getDeltaMovement().x, getMaxSpeedAirVertical(), getDeltaMovement().z));
         }
 
         this.move(MoverType.SELF, this.getDeltaMovement());
         if (!this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.95));
+            // CraftBukkit start - replace magic numbers with our variables
+            this.setDeltaMovement(new Vec3(this.getDeltaMovement().x * this.flyingX, this.getDeltaMovement().y * this.flyingY, this.getDeltaMovement().z * this.flyingZ));
+            // CraftBukkit end
         }
     }
 
@@ -362,18 +_,19 @@
         d1 = (double)p_38156_.getY();
         boolean flag = false;
         boolean flag1 = false;
-        if (p_38157_.is(Blocks.POWERED_RAIL)) {
+        BaseRailBlock baserailblock = (BaseRailBlock) p_38157_.getBlock();
+        if (baserailblock instanceof PoweredRailBlock && !((PoweredRailBlock) baserailblock).isActivatorRail()) {
             flag = p_38157_.getValue(PoweredRailBlock.POWERED);
             flag1 = !flag;
         }
 
-        double d3 = 0.0078125;
+        double d3 = getSlopeAdjustment();
         if (this.isInWater()) {
             d3 *= 0.2;
         }
 
         Vec3 vec31 = this.getDeltaMovement();
-        RailShape railshape = p_38157_.getValue(((BaseRailBlock)p_38157_.getBlock()).getShapeProperty());
+        RailShape railshape = ((BaseRailBlock)p_38157_.getBlock()).getRailDirection(p_38157_, this.level(), p_38156_, this);
         switch(railshape) {
             case ASCENDING_EAST:
                 this.setDeltaMovement(vec31.add(-d3, 0.0, 0.0));
@@ -419,7 +_,7 @@
             }
         }
 
-        if (flag1) {
+        if (flag1 && shouldDoRailFunctions()) {
             double d22 = this.getDeltaMovement().horizontalDistance();
             if (d22 < 0.03) {
                 this.setDeltaMovement(Vec3.ZERO);
@@ -448,10 +_,7 @@
         d0 = d23 + d4 * d14;
         d2 = d10 + d5 * d14;
         this.setPos(d0, d1, d2);
-        double d24 = this.isVehicle() ? 0.75 : 1.0;
-        double d25 = this.getMaxSpeed();
-        vec31 = this.getDeltaMovement();
-        this.move(MoverType.SELF, new Vec3(Mth.clamp(d24 * vec31.x, -d25, d25), 0.0, Mth.clamp(d24 * vec31.z, -d25, d25)));
+        this.moveMinecartOnRail(p_38156_);
         if (vec3i.getY() != 0 && Mth.floor(this.getX()) - p_38156_.getX() == vec3i.getX() && Mth.floor(this.getZ()) - p_38156_.getZ() == vec3i.getZ()) {
             this.setPos(this.getX(), this.getY() + (double)vec3i.getY(), this.getZ());
         } else if (vec3i1.getY() != 0 && Mth.floor(this.getX()) - p_38156_.getX() == vec3i1.getX() && Mth.floor(this.getZ()) - p_38156_.getZ() == vec3i1.getZ()
@@ -481,7 +_,10 @@
             this.setDeltaMovement(d26 * (double)(j - p_38156_.getX()), vec35.y, d26 * (double)(i - p_38156_.getZ()));
         }
 
-        if (flag) {
+        if (shouldDoRailFunctions())
+             baserailblock.onMinecartPass(p_38157_, level(), p_38156_, this);
+
+        if (flag && shouldDoRailFunctions()) {
             Vec3 vec36 = this.getDeltaMovement();
             double d27 = vec36.horizontalDistance();
             if (d27 > 0.01) {
@@ -524,7 +_,7 @@
     }
 
     protected void applyNaturalSlowdown() {
-        double d0 = this.isVehicle() ? 0.997 : 0.96;
+        double d0 = this.isVehicle() || !this.slowWhenEmpty ? 0.997D : 0.96D; // CraftBukkit - add !this.slowWhenEmpty
         Vec3 vec3 = this.getDeltaMovement();
         vec3 = vec3.multiply(d0, 0.0, d0);
         if (this.isInWater()) {
@@ -545,7 +_,7 @@
 
         BlockState blockstate = this.level().getBlockState(new BlockPos(i, j, k));
         if (BaseRailBlock.isRail(blockstate)) {
-            RailShape railshape = blockstate.getValue(((BaseRailBlock)blockstate.getBlock()).getShapeProperty());
+            RailShape railshape = ((BaseRailBlock)blockstate.getBlock()).getRailDirection(blockstate, this.level(), new BlockPos(i, j, k), this);
             p_38098_ = (double)j;
             if (railshape.isAscending()) {
                 p_38098_ = (double)(j + 1);
@@ -584,7 +_,7 @@
 
         BlockState blockstate = this.level().getBlockState(new BlockPos(i, j, k));
         if (BaseRailBlock.isRail(blockstate)) {
-            RailShape railshape = blockstate.getValue(((BaseRailBlock)blockstate.getBlock()).getShapeProperty());
+            RailShape railshape = ((BaseRailBlock)blockstate.getBlock()).getRailDirection(blockstate, this.level(), new BlockPos(i, j, k), this);
             Pair<Vec3i, Vec3i> pair = exits(railshape);
             Vec3i vec3i = pair.getFirst();
             Vec3i vec3i1 = pair.getSecond();
@@ -648,9 +_,21 @@
 
     @Override
     public void push(Entity p_38165_) {
+        if (getCollisionHandler() != null) {
+            getCollisionHandler().onEntityCollision(this, p_38165_);
+            return;
+        }
         if (!this.level().isClientSide) {
             if (!p_38165_.noPhysics && !this.noPhysics) {
                 if (!this.hasPassenger(p_38165_)) {
+                    // CraftBukkit start
+                    org.bukkit.event.vehicle.VehicleEntityCollisionEvent collisionEvent = new org.bukkit.event.vehicle.VehicleEntityCollisionEvent((org.bukkit.entity.Vehicle) this.getBukkitEntity(), p_38165_.getBukkitEntity());
+                    this.level().getCraftServer().getPluginManager().callEvent(collisionEvent);
+
+                    if (collisionEvent.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
                     double d0 = p_38165_.getX() - this.getX();
                     double d1 = p_38165_.getZ() - this.getZ();
                     double d2 = d0 * d0 + d1 * d1;
@@ -686,13 +_,11 @@
 
                             Vec3 vec32 = this.getDeltaMovement();
                             Vec3 vec33 = p_38165_.getDeltaMovement();
-                            if (((AbstractMinecart)p_38165_).getMinecartType() == AbstractMinecart.Type.FURNACE
-                                && this.getMinecartType() != AbstractMinecart.Type.FURNACE) {
+                            if (((AbstractMinecart)p_38165_).isPoweredCart() && !this.isPoweredCart()) {
                                 this.setDeltaMovement(vec32.multiply(0.2, 1.0, 0.2));
                                 this.push(vec33.x - d0, 0.0, vec33.z - d1);
                                 p_38165_.setDeltaMovement(vec33.multiply(0.95, 1.0, 0.95));
-                            } else if (((AbstractMinecart)p_38165_).getMinecartType() != AbstractMinecart.Type.FURNACE
-                                && this.getMinecartType() == AbstractMinecart.Type.FURNACE) {
+                            } else if (!((AbstractMinecart)p_38165_).isPoweredCart() && this.isPoweredCart()) {
                                 p_38165_.setDeltaMovement(vec33.multiply(0.2, 1.0, 0.2));
                                 p_38165_.push(vec32.x + d0, 0.0, vec32.z + d1);
                                 this.setDeltaMovement(vec32.multiply(0.95, 1.0, 0.95));
@@ -792,6 +_,42 @@
         this.getEntityData().set(DATA_ID_CUSTOM_DISPLAY, p_38139_);
     }
 
+    // Forge Start
+    private boolean canUseRail = true;
+    @Override public boolean canUseRail() { return canUseRail; }
+    @Override public void setCanUseRail(boolean value) { this.canUseRail = value; }
+    private float currentSpeedCapOnRail = getMaxCartSpeedOnRail();
+    @Override public float getCurrentCartSpeedCapOnRail() { return currentSpeedCapOnRail; }
+    @Override public void setCurrentCartSpeedCapOnRail(float value) { currentSpeedCapOnRail = Math.min(value, getMaxCartSpeedOnRail()); }
+    @org.jetbrains.annotations.Nullable private Float maxSpeedAirLateral = null;
+    @Override public float getMaxSpeedAirLateral() { return maxSpeedAirLateral == null ? (float) this.getMaxSpeed() : maxSpeedAirLateral; }
+    @Override public void setMaxSpeedAirLateral(float value) { maxSpeedAirLateral = value; }
+    private float maxSpeedAirVertical = DEFAULT_MAX_SPEED_AIR_VERTICAL;
+    @Override public float getMaxSpeedAirVertical() { return maxSpeedAirVertical; }
+    @Override public void setMaxSpeedAirVertical(float value) { maxSpeedAirVertical = value; }
+    private double dragAir = DEFAULT_AIR_DRAG;
+    @Override public double getDragAir() { return dragAir; }
+    @Override public void setDragAir(double value) { dragAir = value; }
+    @Override
+    public double getMaxSpeedWithRail() { //Non-default because getMaximumSpeed is protected
+        if (!canUseRail()) return getMaxSpeed();
+        BlockPos pos = this.getCurrentRailPosition();
+        BlockState state = this.level().getBlockState(pos);
+        if (!state.is(BlockTags.RAILS)) return getMaxSpeed();
+
+        float railMaxSpeed = ((BaseRailBlock)state.getBlock()).getRailMaxSpeed(state, this.level(), pos, this);
+        return Math.min(railMaxSpeed, getCurrentCartSpeedCapOnRail());
+    }
+    @Override
+    public void moveMinecartOnRail(BlockPos pos) { //Non-default because getMaximumSpeed is protected
+        AbstractMinecart mc = this;
+        double d24 = mc.isVehicle() ? 0.75D : 1.0D;
+        double d25 = mc.getMaxSpeedWithRail();
+        Vec3 vec3d1 = mc.getDeltaMovement();
+        mc.move(MoverType.SELF, new Vec3(Mth.clamp(d24 * vec3d1.x, -d25, d25), 0.0D, Mth.clamp(d24 * vec3d1.z, -d25, d25)));
+    }
+    // Forge end
+
     @Override
     public ItemStack getPickResult() {
         return new ItemStack(switch(this.getMinecartType()) {
@@ -813,4 +_,26 @@
         HOPPER,
         COMMAND_BLOCK;
     }
+
+    // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
+    public org.bukkit.util.Vector getFlyingVelocityMod() {
+        return new org.bukkit.util.Vector(flyingX, flyingY, flyingZ);
+    }
+
+    public void setFlyingVelocityMod(org.bukkit.util.Vector flying) {
+        flyingX = flying.getX();
+        flyingY = flying.getY();
+        flyingZ = flying.getZ();
+    }
+
+    public org.bukkit.util.Vector getDerailedVelocityMod() {
+        return new org.bukkit.util.Vector(derailedX, derailedY, derailedZ);
+    }
+
+    public void setDerailedVelocityMod(org.bukkit.util.Vector derailed) {
+        derailedX = derailed.getX();
+        derailedY = derailed.getY();
+        derailedZ = derailed.getZ();
+    }
+    // CraftBukkit end
 }
