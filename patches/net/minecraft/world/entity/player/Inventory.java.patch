--- a/net/minecraft/world/entity/player/Inventory.java
+++ b/net/minecraft/world/entity/player/Inventory.java
@@ -40,6 +_,54 @@
     public final Player player;
     private int timesChanged;
 
+    // CraftBukkit start - add fields and methods
+    public List<org.bukkit.entity.HumanEntity> transaction = new java.util.ArrayList<org.bukkit.entity.HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        List<ItemStack> combined = new java.util.ArrayList<ItemStack>(items.size() + armor.size() + offhand.size());
+        for (List<net.minecraft.world.item.ItemStack> sub : this.compartments) {
+            combined.addAll(sub);
+        }
+
+        return combined;
+    }
+
+    public List<ItemStack> getArmorContents() {
+        return this.armor;
+    }
+
+    public void onOpen(org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<org.bukkit.entity.HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner() {
+        return this.player.getBukkitEntity();
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public org.bukkit.Location getLocation() {
+        return player.getBukkitEntity().getLocation();
+    }
+    // CraftBukkit end
+
     public Inventory(Player p_35983_) {
         this.player = p_35983_;
     }
@@ -60,6 +_,28 @@
             && p_36015_.getCount() < this.getMaxStackSize();
     }
 
+    // CraftBukkit start - Watch method above! :D
+    public int canHold(ItemStack itemstack) {
+        int remains = itemstack.getCount();
+        for (int i = 0; i < this.items.size(); ++i) {
+            ItemStack itemstack1 = this.getItem(i);
+            if (itemstack1.isEmpty()) return itemstack.getCount();
+
+            if (this.hasRemainingSpaceForItem(itemstack1, itemstack)) {
+                remains -= (itemstack1.getMaxStackSize() < this.getMaxStackSize() ? itemstack1.getMaxStackSize() : this.getMaxStackSize()) - itemstack1.getCount();
+            }
+            if (remains <= 0) return itemstack.getCount();
+        }
+        ItemStack offhandItemStack = this.getItem(this.items.size() + this.armor.size());
+        if (this.hasRemainingSpaceForItem(offhandItemStack, itemstack)) {
+            remains -= (offhandItemStack.getMaxStackSize() < this.getMaxStackSize() ? offhandItemStack.getMaxStackSize() : this.getMaxStackSize()) - offhandItemStack.getCount();
+        }
+        if (remains <= 0) return itemstack.getCount();
+
+        return itemstack.getCount() - remains;
+    }
+    // CraftBukkit end
+
     public int getFreeSlot() {
         for(int i = 0; i < this.items.size(); ++i) {
             if (this.items.get(i).isEmpty()) {
@@ -137,7 +_,7 @@
 
         for(int k = 0; k < 9; ++k) {
             int l = (this.selected + k) % 9;
-            if (!this.items.get(l).isEnchanted()) {
+            if (!this.items.get(l).isNotReplaceableByPickAction(this.player, l)) {
                 return l;
             }
         }
@@ -186,7 +_,8 @@
         int i = p_36049_.getCount();
         ItemStack itemstack = this.getItem(p_36048_);
         if (itemstack.isEmpty()) {
-            itemstack = new ItemStack(item, 0);
+            itemstack = p_36049_.copy(); // Forge: Replace Item clone above to preserve item capabilities when picking the item up.
+            itemstack.setCount(0);
             if (p_36049_.hasTag()) {
                 itemstack.setTag(p_36049_.getTag().copy());
             }
@@ -230,13 +_,18 @@
     }
 
     public void tick() {
+        int slot = 0;
         for(NonNullList<ItemStack> nonnulllist : this.compartments) {
             for(int i = 0; i < nonnulllist.size(); ++i) {
                 if (!nonnulllist.get(i).isEmpty()) {
-                    nonnulllist.get(i).inventoryTick(this.player.level(), this.player, i, this.selected == i);
+                    // Neo: Fix the slot param to be the global index instead of the per-compartment index.
+                    // Neo: Fix the selected param to only be true for hotbar slots.
+                    nonnulllist.get(i).inventoryTick(this.player.level(), this.player, slot, this.selected == slot);
                 }
+                slot++;
             }
         }
+        armor.forEach(e -> e.onArmorTick(player.level(), player));
     }
 
     public boolean add(ItemStack p_36055_) {
@@ -284,6 +_,8 @@
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Adding item to inventory");
                 CrashReportCategory crashreportcategory = crashreport.addCategory("Item being added");
+                crashreportcategory.setDetail("Registry Name", () -> String.valueOf(net.minecraft.core.registries.BuiltInRegistries.ITEM.getKey(p_36042_.getItem())));
+                crashreportcategory.setDetail("Item Class", () -> p_36042_.getItem().getClass().getName());
                 crashreportcategory.setDetail("Item ID", Item.getId(p_36042_.getItem()));
                 crashreportcategory.setDetail("Item data", p_36042_.getDamageValue());
                 crashreportcategory.setDetail("Item name", () -> p_36042_.getHoverName().getString());
@@ -492,6 +_,7 @@
     }
 
     public void hurtArmor(DamageSource p_150073_, float p_150074_, int[] p_150075_) {
+        if (org.kettingpowered.ketting.utils.ArmorUtil.shouldIgnoreArmorDamage(p_150073_)) return; //Ketting
         if (!(p_150074_ <= 0.0F)) {
             p_150074_ /= 4.0F;
             if (p_150074_ < 1.0F) {
