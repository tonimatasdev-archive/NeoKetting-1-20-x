--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -112,7 +_,8 @@
 import net.minecraft.world.scores.Team;
 import org.slf4j.Logger;
 
-public abstract class Player extends LivingEntity {
+public abstract class Player extends LivingEntity implements net.neoforged.neoforge.common.extensions.IPlayerExtension {
+    public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final int MAX_NAME_LENGTH = 16;
     public static final HumanoidArm DEFAULT_MAIN_HAND = HumanoidArm.RIGHT;
@@ -143,10 +_,10 @@
     protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_RIGHT = SynchedEntityData.defineId(Player.class, EntityDataSerializers.COMPOUND_TAG);
     private long timeEntitySatOnShoulder;
     private final Inventory inventory = new Inventory(this);
-    protected PlayerEnderChestContainer enderChestInventory = new PlayerEnderChestContainer();
+    protected PlayerEnderChestContainer enderChestInventory = new PlayerEnderChestContainer(this); // CraftBukkit - add "this" to constructor
     public final InventoryMenu inventoryMenu;
     public AbstractContainerMenu containerMenu;
-    protected FoodData foodData = new FoodData();
+    protected FoodData foodData = new FoodData(this); // CraftBukkit - add "this" to constructor
     protected int jumpTriggerTime;
     public float oBob;
     public float bob;
@@ -174,7 +_,20 @@
     @Nullable
     public FishingHook fishing;
     protected float hurtDir;
-
+    private final java.util.Collection<MutableComponent> prefixes = new java.util.LinkedList<>();
+    private final java.util.Collection<MutableComponent> suffixes = new java.util.LinkedList<>();
+    @Nullable private Pose forcedPose;
+
+    // CraftBukkit start
+    public boolean fauxSleeping;
+    public int oldLevel = -1;
+
+    @Override
+    public org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity getBukkitEntity() {
+        return (org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity) super.getBukkitEntity();
+    }
+    // CraftBukkit end
+    
     public Player(Level p_250508_, BlockPos p_250289_, float p_251702_, GameProfile p_252153_) {
         super(EntityType.PLAYER, p_250508_);
         this.setUUID(p_252153_.getId());
@@ -206,7 +_,11 @@
             .add(Attributes.ATTACK_DAMAGE, 1.0)
             .add(Attributes.MOVEMENT_SPEED, 0.1F)
             .add(Attributes.ATTACK_SPEED)
-            .add(Attributes.LUCK);
+            .add(Attributes.LUCK)
+            .add(net.neoforged.neoforge.common.NeoForgeMod.BLOCK_REACH.value())
+            .add(Attributes.ATTACK_KNOCKBACK)
+            .add(net.neoforged.neoforge.common.NeoForgeMod.ENTITY_REACH.value())
+            .add(net.neoforged.neoforge.common.NeoForgeMod.CREATIVE_FLIGHT.value());
     }
 
     @Override
@@ -222,6 +_,7 @@
 
     @Override
     public void tick() {
+        net.neoforged.neoforge.event.EventHooks.onPlayerPreTick(this);
         this.noPhysics = this.isSpectator();
         if (this.isSpectator()) {
             this.setOnGround(false);
@@ -237,7 +_,7 @@
                 this.sleepCounter = 100;
             }
 
-            if (!this.level().isClientSide && this.level().isDay()) {
+            if (!this.level().isClientSide && !net.neoforged.neoforge.event.EventHooks.fireSleepingTimeCheck(this, getSleepingPos())) {
                 this.stopSleepInBed(false, true);
             }
         } else if (this.sleepCounter > 0) {
@@ -292,6 +_,7 @@
         this.turtleHelmetTick();
         this.cooldowns.tick();
         this.updatePlayerPose();
+        net.neoforged.neoforge.event.EventHooks.onPlayerPostTick(this);
     }
 
     @Override
@@ -319,6 +_,7 @@
     private void turtleHelmetTick() {
         ItemStack itemstack = this.getItemBySlot(EquipmentSlot.HEAD);
         if (itemstack.is(Items.TURTLE_HELMET) && !this.isEyeInFluid(FluidTags.WATER)) {
+            this.prepareAddEffect(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TURTLE_HELMET); //Ketting
             this.addEffect(new MobEffectInstance(MobEffects.WATER_BREATHING, 200, 0, false, false, true));
         }
     }
@@ -371,6 +_,10 @@
     }
 
     protected void updatePlayerPose() {
+        if(forcedPose != null) {
+            this.setPose(forcedPose);
+            return;
+        }
         if (this.canPlayerFitWithinBlocksAndEntitiesWhen(Pose.SWIMMING)) {
             Pose pose;
             if (this.isFallFlying()) {
@@ -487,8 +_,14 @@
     public void rideTick() {
         if (!this.level().isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
             this.stopRiding();
-            this.setShiftKeyDown(false);
-        } else {
+            // CraftBukkit start - SPIGOT-7316: no longer passenger, dismount and return
+            if (!this.isPassenger()) {
+                this.setShiftKeyDown(false);
+                return;
+            }
+        }
+        {
+            // CraftBukkit end
             super.rideTick();
             this.oBob = this.bob;
             this.bob = 0.0F;
@@ -510,7 +_,8 @@
 
         if (this.level().getDifficulty() == Difficulty.PEACEFUL && this.level().getGameRules().getBoolean(GameRules.RULE_NATURAL_REGENERATION)) {
             if (this.getHealth() < this.getMaxHealth() && this.tickCount % 20 == 0) {
-                this.heal(1.0F);
+                // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
+                this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN);
             }
 
             if (this.foodData.needsFood() && this.tickCount % 10 == 0) {
@@ -613,6 +_,7 @@
 
     @Override
     public void die(DamageSource p_36152_) {
+        if (net.neoforged.neoforge.common.CommonHooks.onLivingDeath(this, p_36152_)) return;
         super.die(p_36152_);
         this.reapplyPosition();
         if (!this.isSpectator()) {
@@ -667,12 +_,23 @@
 
     @Nullable
     public ItemEntity drop(ItemStack p_36177_, boolean p_36178_) {
-        return this.drop(p_36177_, false, p_36178_);
-    }
+        return net.neoforged.neoforge.common.CommonHooks.onPlayerTossEvent(this, p_36177_, p_36178_);
+    }
+
+    //Ketting start
+    public final java.util.concurrent.atomic.AtomicBoolean ketting$drop$callEvent = new java.util.concurrent.atomic.AtomicBoolean(true);
+    @Nullable
+    public ItemEntity drop(ItemStack p_36179_, boolean p_36180_, boolean p_36181_, boolean callEvent) {
+        ketting$drop$callEvent.set(callEvent);
+        // CraftBukkit start - SPIGOT-2942: Add boolean to call event
+        return drop(p_36179_, p_36180_, p_36181_);
+    }
+    //Ketting end
 
     @Nullable
     public ItemEntity drop(ItemStack p_36179_, boolean p_36180_, boolean p_36181_) {
         if (p_36179_.isEmpty()) {
+            ketting$drop$callEvent.set(true);
             return null;
         } else {
             if (this.level().isClientSide) {
@@ -705,11 +_,43 @@
                 );
             }
 
+            // CraftBukkit start - fire PlayerDropItemEvent
+            if (!ketting$drop$callEvent.getAndSet(true)) { // SPIGOT-2942: Add boolean to call event
+                return itementity;
+            }
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
+            org.bukkit.entity.Item drop = (org.bukkit.entity.Item) itementity.getBukkitEntity();
+
+            org.bukkit.event.player.PlayerDropItemEvent event = new org.bukkit.event.player.PlayerDropItemEvent(player, drop);
+            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
+                if (p_36181_ && (cur == null || cur.getAmount() == 0)) {
+                    // The complete stack was dropped
+                    player.getInventory().setItemInHand(drop.getItemStack());
+                } else if (p_36181_ && cur.isSimilar(drop.getItemStack()) && cur.getAmount() < cur.getMaxStackSize() && drop.getItemStack().getAmount() == 1) {
+                    // Only one item is dropped
+                    cur.setAmount(cur.getAmount() + 1);
+                    player.getInventory().setItemInHand(cur);
+                } else {
+                    // Fallback
+                    player.getInventory().addItem(drop.getItemStack());
+                }
+                return null;
+            }
+            // CraftBukkit end
+
             return itementity;
         }
     }
 
+    @Deprecated //Use location sensitive version below
     public float getDestroySpeed(BlockState p_36282_) {
+        return getDigSpeed(p_36282_, null);
+    }
+
+    public float getDigSpeed(BlockState p_36282_, @Nullable BlockPos pos) {
         float f = this.inventory.getDestroySpeed(p_36282_);
         if (f > 1.0F) {
             int i = EnchantmentHelper.getBlockEfficiency(this);
@@ -740,11 +_,12 @@
             f /= 5.0F;
         }
 
+        f = net.neoforged.neoforge.event.EventHooks.getBreakSpeed(this, p_36282_, f, pos);
         return f;
     }
 
     public boolean hasCorrectToolForDrops(BlockState p_36299_) {
-        return !p_36299_.requiresCorrectToolForDrops() || this.inventory.getSelected().isCorrectToolForDrops(p_36299_);
+        return net.neoforged.neoforge.event.EventHooks.doPlayerHarvestCheck(this, p_36299_, !p_36299_.requiresCorrectToolForDrops() || this.inventory.getSelected().isCorrectToolForDrops(p_36299_));
     }
 
     @Override
@@ -831,6 +_,7 @@
 
     @Override
     public boolean hurt(DamageSource p_36154_, float p_36155_) {
+        if (!net.neoforged.neoforge.common.CommonHooks.onPlayerAttack(this, p_36154_, p_36155_)) return false;
         if (this.isInvulnerableTo(p_36154_)) {
             return false;
         } else if (this.abilities.invulnerable && !p_36154_.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
@@ -841,12 +_,14 @@
                 return false;
             } else {
                 if (!this.level().isClientSide) {
-                    this.removeEntitiesOnShoulder();
+                    // this.removeEntitiesOnShoulder(); // CraftBukkit - moved down
                 }
 
-                if (p_36154_.scalesWithDifficulty()) {
+                p_36155_ = Math.max(0.0F, p_36154_.type().scaling().getScalingFunction().scaleDamage(p_36154_, this, p_36155_, this.level().getDifficulty()));
+
+                if (false && p_36154_.scalesWithDifficulty()) {
                     if (this.level().getDifficulty() == Difficulty.PEACEFUL) {
-                        p_36155_ = 0.0F;
+                        return false; // CraftBukkit - f = 0.0f -> return false
                     }
 
                     if (this.level().getDifficulty() == Difficulty.EASY) {
@@ -858,7 +_,13 @@
                     }
                 }
 
-                return p_36155_ == 0.0F ? false : super.hurt(p_36154_, p_36155_);
+                // CraftBukkit start - Don't filter out 0 damage
+                boolean damaged = super.hurt(p_36154_, p_36155_);
+                if (damaged) {
+                    this.removeEntitiesOnShoulder();
+                }
+                return damaged;
+                // CraftBukkit end
             }
         }
     }
@@ -877,13 +_,29 @@
     }
 
     public boolean canHarmPlayer(Player p_36169_) {
-        Team team = this.getTeam();
-        Team team1 = p_36169_.getTeam();
-        if (team == null) {
-            return true;
+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        org.bukkit.scoreboard.Team team;
+        if (p_36169_ instanceof ServerPlayer) {
+            ServerPlayer thatPlayer = (ServerPlayer) p_36169_;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
         } else {
-            return !team.isAlliedTo(team1) ? true : team.isAllowFriendlyFire();
-        }
+            // This should never be called, but is implemented anyway
+            org.bukkit.OfflinePlayer thisPlayer = p_36169_.level().getCraftServer().getOfflinePlayer(p_36169_.getScoreboardName());
+            team = p_36169_.level().getCraftServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        }
+
+        if (this instanceof ServerPlayer) {
+            return !team.hasPlayer(((ServerPlayer) this).getBukkitEntity());
+        }
+        return !team.hasPlayer(this.level().getCraftServer().getOfflinePlayer(this.getScoreboardName()));
+        // CraftBukkit end
     }
 
     @Override
@@ -898,7 +_,7 @@
 
     @Override
     protected void hurtCurrentlyUsedShield(float p_36383_) {
-        if (this.useItem.is(Items.SHIELD)) {
+        if (this.useItem.canPerformAction(net.neoforged.neoforge.common.ToolActions.SHIELD_BLOCK)) {
             if (!this.level().isClientSide) {
                 this.awardStat(Stats.ITEM_USED.get(this.useItem.getItem()));
             }
@@ -906,7 +_,11 @@
             if (p_36383_ >= 3.0F) {
                 int i = 1 + Mth.floor(p_36383_);
                 InteractionHand interactionhand = this.getUsedItemHand();
-                this.useItem.hurtAndBreak(i, this, p_219739_ -> p_219739_.broadcastBreakEvent(interactionhand));
+                this.useItem.hurtAndBreak(i, this, p_219739_ -> {
+                    p_219739_.broadcastBreakEvent(interactionhand);
+                    net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, this.useItem, interactionhand);
+                    stopUsingItem(); // Neo: Fix MC-168573 ("After breaking a shield, the player's off-hand can't finish using some items")
+                });
                 if (this.useItem.isEmpty()) {
                     if (interactionhand == InteractionHand.MAIN_HAND) {
                         this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
@@ -921,19 +_,36 @@
         }
     }
 
+    // CraftBukkit start
+    protected boolean damageEntity0(DamageSource p_36312_, float p_36313_) {
+        return super.damageEntity0(p_36312_, p_36313_);
+    }
+    //Ketting start - keep original method for mixins
+    // CraftBukkit end
+
     @Override
     protected void actuallyHurt(DamageSource p_36312_, float p_36313_) {
+        if (actuallyHurt$override) {
+            damageEntity0(p_36312_, p_36313_);
+            return;
+        }
+        else
+            //Ketting end - keep original method for mixins
         if (!this.isInvulnerableTo(p_36312_)) {
+            p_36313_ = net.neoforged.neoforge.common.CommonHooks.onLivingHurt(this, p_36312_, p_36313_);
+            if (p_36313_ <= 0) return;
             p_36313_ = this.getDamageAfterArmorAbsorb(p_36312_, p_36313_);
             p_36313_ = this.getDamageAfterMagicAbsorb(p_36312_, p_36313_);
             float f1 = Math.max(p_36313_ - this.getAbsorptionAmount(), 0.0F);
             this.setAbsorptionAmount(this.getAbsorptionAmount() - (p_36313_ - f1));
+            f1 = net.neoforged.neoforge.common.CommonHooks.onLivingDamage(this, p_36312_, f1);
             float f = p_36313_ - f1;
             if (f > 0.0F && f < 3.4028235E37F) {
                 this.awardStat(Stats.DAMAGE_ABSORBED, Math.round(f * 10.0F));
             }
 
             if (f1 != 0.0F) {
+                this.setFoodExhaustionReason(org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED); // Ketting
                 this.causeFoodExhaustion(p_36312_.getFoodExhaustion());
                 this.getCombatTracker().recordDamage(p_36312_, f1);
                 this.setHealth(this.getHealth() - f1);
@@ -991,6 +_,8 @@
 
             return InteractionResult.PASS;
         } else {
+            InteractionResult cancelResult = net.neoforged.neoforge.common.CommonHooks.onInteractEntity(this, p_36158_, p_36159_);
+            if (cancelResult != null) return cancelResult;
             ItemStack itemstack = this.getItemInHand(p_36159_);
             ItemStack itemstack1 = itemstack.copy();
             InteractionResult interactionresult = p_36158_.interact(this, p_36159_);
@@ -999,6 +_,9 @@
                     itemstack.setCount(itemstack1.getCount());
                 }
 
+                if (!this.abilities.instabuild && itemstack.isEmpty()) {
+                    net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, itemstack1, p_36159_);
+                }
                 return interactionresult;
             } else {
                 if (!itemstack.isEmpty() && p_36158_ instanceof LivingEntity) {
@@ -1010,6 +_,7 @@
                     if (interactionresult1.consumesAction()) {
                         this.level().gameEvent(GameEvent.ENTITY_INTERACT, p_36158_.position(), GameEvent.Context.of(this));
                         if (itemstack.isEmpty() && !this.abilities.instabuild) {
+                            net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, itemstack1, p_36159_);
                             this.setItemInHand(p_36159_, ItemStack.EMPTY);
                         }
 
@@ -1044,6 +_,7 @@
     }
 
     @Override
+    // Forge: Don't update this method to use IForgeEntity#getStepHeight() - https://github.com/MinecraftForge/MinecraftForge/issues/8922
     protected Vec3 maybeBackOffFromEdge(Vec3 p_36201_, MoverType p_36202_) {
         if (!this.abilities.flying
             && p_36201_.y <= 0.0
@@ -1098,6 +_,7 @@
         return p_36201_;
     }
 
+    // Forge: Don't update this method to use IForgeEntity#getStepHeight() - https://github.com/MinecraftForge/MinecraftForge/issues/9376
     private boolean isAboveGround() {
         return this.onGround()
             || this.fallDistance < this.maxUpStep()
@@ -1105,6 +_,7 @@
     }
 
     public void attack(Entity p_36347_) {
+        if (!net.neoforged.neoforge.common.CommonHooks.onPlayerAttackTarget(this, p_36347_)) return;
         if (p_36347_.isAttackable()) {
             if (!p_36347_.skipAttackInteraction(this)) {
                 float f = (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
@@ -1118,11 +_,10 @@
                 float f2 = this.getAttackStrengthScale(0.5F);
                 f *= 0.2F + f2 * f2 * 0.8F;
                 f1 *= f2;
-                this.resetAttackStrengthTicker();
                 if (f > 0.0F || f1 > 0.0F) {
                     boolean flag = f2 > 0.9F;
                     boolean flag1 = false;
-                    int i = 0;
+                    float i = (float)this.getAttributeValue(Attributes.ATTACK_KNOCKBACK); // Forge: Initialize this value to the attack knockback attribute of the player, which is by default 0
                     i += EnchantmentHelper.getKnockbackBonus(this);
                     if (this.isSprinting() && flag) {
                         this.level()
@@ -1140,8 +_,10 @@
                         && !this.isPassenger()
                         && p_36347_ instanceof LivingEntity;
                     flag2 = flag2 && !this.isSprinting();
+                    net.neoforged.neoforge.event.entity.player.CriticalHitEvent hitResult = net.neoforged.neoforge.common.CommonHooks.getCriticalHit(this, p_36347_, flag2, flag2 ? 1.5F : 1.0F);
+                    flag2 = hitResult != null;
                     if (flag2) {
-                        f *= 1.5F;
+                        f *= hitResult.getDamageModifier();
                     }
 
                     f += f1;
@@ -1149,9 +_,7 @@
                     double d0 = (double)(this.walkDist - this.walkDistO);
                     if (flag && !flag2 && !flag1 && this.onGround() && d0 < (double)this.getSpeed()) {
                         ItemStack itemstack = this.getItemInHand(InteractionHand.MAIN_HAND);
-                        if (itemstack.getItem() instanceof SwordItem) {
-                            flag3 = true;
-                        }
+                        flag3 = itemstack.canPerformAction(net.neoforged.neoforge.common.ToolActions.SWORD_SWEEP);
                     }
 
                     float f4 = 0.0F;
@@ -1160,8 +_,16 @@
                     if (p_36347_ instanceof LivingEntity) {
                         f4 = ((LivingEntity)p_36347_).getHealth();
                         if (j > 0 && !p_36347_.isOnFire()) {
-                            flag4 = true;
-                            p_36347_.setSecondsOnFire(1);
+                            // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                            org.bukkit.event.entity.EntityCombustByEntityEvent combustEvent = new org.bukkit.event.entity.EntityCombustByEntityEvent(this.getBukkitEntity(), p_36347_.getBukkitEntity(), 1);
+                            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+                            if (!combustEvent.isCancelled()) {
+                                flag4 = true;
+                                p_36347_.ketting$setSecondsOnFire$callEvent.set(false);
+                                p_36347_.setSecondsOnFire(combustEvent.getDuration());
+                            }
+                            // CraftBukkit end
                         }
                     }
 
@@ -1193,17 +_,17 @@
 
                             for(LivingEntity livingentity : this.level()
                                 .getEntitiesOfClass(LivingEntity.class, p_36347_.getBoundingBox().inflate(1.0, 0.25, 1.0))) {
+                                double entityReachSq = Mth.square(this.getEntityReach()); // Use entity reach instead of constant 9.0. Vanilla uses bottom center-to-center checks here, so don't update this to use canReach, since it uses closest-corner checks.
                                 if (livingentity != this
                                     && livingentity != p_36347_
                                     && !this.isAlliedTo(livingentity)
                                     && (!(livingentity instanceof ArmorStand) || !((ArmorStand)livingentity).isMarker())
-                                    && this.distanceToSqr(livingentity) < 9.0) {
-                                    livingentity.knockback(
-                                        0.4F,
-                                        (double)Mth.sin(this.getYRot() * (float) (Math.PI / 180.0)),
-                                        (double)(-Mth.cos(this.getYRot() * (float) (Math.PI / 180.0)))
-                                    );
-                                    livingentity.hurt(this.damageSources().playerAttack(this), f3);
+                                    && this.distanceToSqr(livingentity) < entityReachSq) {
+                                    // CraftBukkit start - Only apply knockback if the damage hits
+                                    if (livingentity.hurt(this.damageSources().playerAttack(this).sweep(), f4)) {
+                                        livingentity.knockback((double) 0.4F, (double) Mth.sin(this.getYRot() * ((float) Math.PI / 180F)), (double) (-Mth.cos(this.getYRot() * ((float) Math.PI / 180F))));
+                                    }
+                                    // CraftBukkit end
                                 }
                             }
 
@@ -1213,9 +_,26 @@
                         }
 
                         if (p_36347_ instanceof ServerPlayer && p_36347_.hurtMarked) {
-                            ((ServerPlayer)p_36347_).connection.send(new ClientboundSetEntityMotionPacket(p_36347_));
-                            p_36347_.hurtMarked = false;
-                            p_36347_.setDeltaMovement(vec3);
+                            // CraftBukkit start - Add Velocity Event
+                            boolean cancelled = false;
+                            org.bukkit.entity.Player player = (org.bukkit.entity.Player) p_36347_.getBukkitEntity();
+                            org.bukkit.util.Vector velocity = org.bukkit.craftbukkit.v1_20_R3.util.CraftVector.toBukkit(vec3);
+
+                            org.bukkit.event.player.PlayerVelocityEvent event = new org.bukkit.event.player.PlayerVelocityEvent(player, velocity.clone());
+                            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                            if (event.isCancelled()) {
+                                cancelled = true;
+                            } else if (!velocity.equals(event.getVelocity())) {
+                                player.setVelocity(event.getVelocity());
+                            }
+
+                            if (!cancelled) {
+                                ((ServerPlayer)p_36347_).connection.send(new ClientboundSetEntityMotionPacket(p_36347_));
+                                p_36347_.hurtMarked = false;
+                                p_36347_.setDeltaMovement(vec3);
+                            }
+                            // CraftBukkit end
                         }
 
                         if (flag2) {
@@ -1246,13 +_,15 @@
                         EnchantmentHelper.doPostDamageEffects(this, p_36347_);
                         ItemStack itemstack1 = this.getMainHandItem();
                         Entity entity = p_36347_;
-                        if (p_36347_ instanceof EnderDragonPart) {
-                            entity = ((EnderDragonPart)p_36347_).parentMob;
+                        if (p_36347_ instanceof net.neoforged.neoforge.entity.PartEntity) {
+                            entity = ((net.neoforged.neoforge.entity.PartEntity<?>) p_36347_).getParent();
                         }
 
                         if (!this.level().isClientSide && !itemstack1.isEmpty() && entity instanceof LivingEntity) {
+                            ItemStack copy = itemstack1.copy();
                             itemstack1.hurtEnemy((LivingEntity)entity, this);
                             if (itemstack1.isEmpty()) {
+                                net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, copy, InteractionHand.MAIN_HAND);
                                 this.setItemInHand(InteractionHand.MAIN_HAND, ItemStack.EMPTY);
                             }
                         }
@@ -1261,7 +_,15 @@
                             float f5 = f4 - ((LivingEntity)p_36347_).getHealth();
                             this.awardStat(Stats.DAMAGE_DEALT, Math.round(f5 * 10.0F));
                             if (j > 0) {
-                                p_36347_.setSecondsOnFire(j * 4);
+                                // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                                org.bukkit.event.entity.EntityCombustByEntityEvent combustEvent = new org.bukkit.event.entity.EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), j * 4);
+                                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+                                if (!combustEvent.isCancelled()) {
+                                    entity.ketting$setSecondsOnFire$callEvent.set(false);
+                                    entity.setSecondsOnFire(combustEvent.getDuration());
+                                }
+                                // CraftBukkit end
                             }
 
                             if (this.level() instanceof ServerLevel && f5 > 2.0F) {
@@ -1271,15 +_,22 @@
                             }
                         }
 
-                        this.causeFoodExhaustion(0.1F);
+                        this.setFoodExhaustionReason(org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.ATTACK);
+                        this.causeFoodExhaustion(this.level().spigotConfig.combatExhaustion); // Spigot - Change to use configurable value
                     } else {
                         this.level()
                             .playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_NODAMAGE, this.getSoundSource(), 1.0F, 1.0F);
                         if (flag4) {
                             p_36347_.clearFire();
                         }
+                        // CraftBukkit start - resync on cancelled event
+                        if (this instanceof ServerPlayer) {
+                            ((ServerPlayer) this).getBukkitEntity().updateInventory();
+                        }
+                        // CraftBukkit end
                     }
                 }
+                this.resetAttackStrengthTicker(); // FORGE: Moved from beginning of attack() so that getAttackStrengthScale() returns an accurate value during all attack events
             }
         }
     }
@@ -1296,7 +_,7 @@
         }
 
         if (this.random.nextFloat() < f) {
-            this.getCooldowns().addCooldown(Items.SHIELD, 100);
+            this.getCooldowns().addCooldown(this.getUseItem().getItem(), 100);
             this.stopUsingItem();
             this.level().broadcastEntityEvent(this, (byte)30);
         }
@@ -1352,12 +_,19 @@
     }
 
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_36203_) {
+        // CraftBukkit start
+        return this.startSleepInBed(p_36203_, false);
+    }
+
+    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_36203_, boolean force) {
+        // CraftBukkit end
         this.startSleeping(p_36203_);
         this.sleepCounter = 0;
         return Either.right(Unit.INSTANCE);
     }
 
     public void stopSleepInBed(boolean p_36226_, boolean p_36227_) {
+        net.neoforged.neoforge.event.EventHooks.onPlayerWakeup(this, p_36226_, p_36227_);
         super.stopSleeping();
         if (this.level() instanceof ServerLevel && p_36227_) {
             ((ServerLevel)this.level()).updateSleepingPlayerList();
@@ -1390,7 +_,7 @@
         } else if (block instanceof BedBlock && BedBlock.canSetSpawn(p_36131_)) {
             return BedBlock.findStandUpPosition(EntityType.PLAYER, p_36131_, p_36132_, blockstate.getValue(BedBlock.FACING), p_36133_);
         } else if (!p_36134_) {
-            return Optional.empty();
+            return blockstate.getRespawnPosition(EntityType.PLAYER, p_36131_, p_36132_, p_36133_, null);
         } else {
             boolean flag = block.isPossibleToRespawnInThis(blockstate);
             BlockState blockstate1 = p_36131_.getBlockState(p_36132_.above());
@@ -1449,9 +_,11 @@
         super.jumpFromGround();
         this.awardStat(Stats.JUMP);
         if (this.isSprinting()) {
-            this.causeFoodExhaustion(0.2F);
+            this.setFoodExhaustionReason(org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.JUMP_SPRINT);
+            this.causeFoodExhaustion(this.level().spigotConfig.jumpSprintExhaustion); // Spigot - Change to use configurable value
         } else {
-            this.causeFoodExhaustion(0.05F);
+            this.setFoodExhaustionReason(org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.JUMP);
+            this.causeFoodExhaustion(this.level().spigotConfig.jumpWalkExhaustion); // Spigot - Change to use configurable value
         }
     }
 
@@ -1474,7 +_,11 @@
             Vec3 vec31 = this.getDeltaMovement();
             this.setDeltaMovement(vec31.x, d2 * 0.6, vec31.z);
             this.resetFallDistance();
-            this.setSharedFlag(7, false);
+            // CraftBukkit start
+            if (getSharedFlag(7) && !org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
+                this.setSharedFlag(7, false);
+            }
+            // CraftBukkit end
         } else {
             super.travel(p_36359_);
         }
@@ -1500,7 +_,8 @@
 
     @Override
     public boolean causeFallDamage(float p_150093_, float p_150094_, DamageSource p_150095_) {
-        if (this.abilities.mayfly) {
+        if (this.mayFly()) {
+            net.neoforged.neoforge.event.EventHooks.onPlayerFall(this, p_150093_, p_150093_);
             return false;
         } else {
             if (p_150093_ >= 2.0F) {
@@ -1514,7 +_,7 @@
     public boolean tryToStartFallFlying() {
         if (!this.onGround() && !this.isFallFlying() && !this.isInWater() && !this.hasEffect(MobEffects.LEVITATION)) {
             ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
-            if (itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack)) {
+            if (itemstack.canElytraFly(this)) {
                 this.startFallFlying();
                 return true;
             }
@@ -1524,12 +_,24 @@
     }
 
     public void startFallFlying() {
-        this.setSharedFlag(7, true);
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callToggleGlideEvent(this, true).isCancelled()) {
+            this.setSharedFlag(7, true);
+        } else {
+            // SPIGOT-5542: must toggle like below
+            this.setSharedFlag(7, true);
+            this.setSharedFlag(7, false);
+        }
+        // CraftBukkit end
     }
 
     public void stopFallFlying() {
-        this.setSharedFlag(7, true);
-        this.setSharedFlag(7, false);
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
+            this.setSharedFlag(7, true);
+            this.setSharedFlag(7, false);
+        }
+        // CraftBukkit end
     }
 
     @Override
@@ -1543,13 +_,13 @@
     protected void playStepSound(BlockPos p_282121_, BlockState p_282194_) {
         if (this.isInWater()) {
             this.waterSwimSound();
-            this.playMuffledStepSound(p_282194_);
+            this.playMuffledStepSound(p_282194_, p_282121_);
         } else {
             BlockPos blockpos = this.getPrimaryStepSoundBlockPos(p_282121_);
             if (!p_282121_.equals(blockpos)) {
                 BlockState blockstate = this.level().getBlockState(blockpos);
                 if (blockstate.is(BlockTags.COMBINATION_STEP_SOUND_BLOCKS)) {
-                    this.playCombinationStepSounds(blockstate, p_282194_);
+                    this.playCombinationStepSounds(blockstate, p_282194_, blockpos, p_282121_);
                 } else {
                     super.playStepSound(blockpos, blockstate);
                 }
@@ -1578,6 +_,10 @@
     }
 
     public void giveExperiencePoints(int p_36291_) {
+        net.neoforged.neoforge.event.entity.player.PlayerXpEvent.XpChange event = new net.neoforged.neoforge.event.entity.player.PlayerXpEvent.XpChange(this, p_36291_);
+        if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event).isCanceled()) return;
+        p_36291_ = event.getAmount();
+
         this.increaseScore(p_36291_);
         this.experienceProgress += (float)p_36291_ / (float)this.getXpNeededForNextLevel();
         this.totalExperience = Mth.clamp(this.totalExperience + p_36291_, 0, Integer.MAX_VALUE);
@@ -1605,7 +_,7 @@
     }
 
     public void onEnchantmentPerformed(ItemStack p_36172_, int p_36173_) {
-        this.experienceLevel -= p_36173_;
+        giveExperienceLevels(-p_36173_);
         if (this.experienceLevel < 0) {
             this.experienceLevel = 0;
             this.experienceProgress = 0.0F;
@@ -1616,6 +_,10 @@
     }
 
     public void giveExperienceLevels(int p_36276_) {
+        net.neoforged.neoforge.event.entity.player.PlayerXpEvent.LevelChange event = new net.neoforged.neoforge.event.entity.player.PlayerXpEvent.LevelChange(this, p_36276_);
+        if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event).isCanceled()) return;
+        p_36276_ = event.getLevels();
+
         this.experienceLevel += p_36276_;
         if (this.experienceLevel < 0) {
             this.experienceLevel = 0;
@@ -1638,13 +_,32 @@
         }
     }
 
+    // CraftBukkit start
+    //Ketting start - mixin
+    private org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason causeFoodExhaustion$reason = org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.UNKNOWN;
+    public void setFoodExhaustionReason(org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason reason) {
+        this.causeFoodExhaustion$reason = reason;
+    }
+
     public void causeFoodExhaustion(float p_36400_) {
         if (!this.abilities.invulnerable) {
             if (!this.level().isClientSide) {
-                this.foodData.addExhaustion(p_36400_);
+                // CraftBukkit start
+                org.bukkit.event.entity.EntityExhaustionEvent event = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callPlayerExhaustionEvent(this, causeFoodExhaustion$reason, p_36400_);
+                if (!event.isCancelled()) {
+                    this.foodData.addExhaustion(event.getExhaustion());
+                }
+                // CraftBukkit end
             }
         }
-    }
+        causeFoodExhaustion$reason = org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.UNKNOWN;
+    }
+
+    public void causeFoodExhaustion(float p_36400_, org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason reason) {
+        setFoodExhaustionReason(reason);
+        causeFoodExhaustion(p_36400_);
+    }
+    //Ketting end
 
     public Optional<WardenSpawnTracker> getWardenSpawnTracker() {
         return Optional.empty();
@@ -1733,11 +_,11 @@
     public void setItemSlot(EquipmentSlot p_36161_, ItemStack p_36162_) {
         this.verifyEquippedItem(p_36162_);
         if (p_36161_ == EquipmentSlot.MAINHAND) {
-            this.onEquipItem(p_36161_, this.inventory.items.set(this.inventory.selected, p_36162_), p_36162_);
+            this.onEquipItem(p_36161_, this.inventory.items.set(this.inventory.selected, p_36162_), p_36162_, isSilentEquip()); //Ketting
         } else if (p_36161_ == EquipmentSlot.OFFHAND) {
-            this.onEquipItem(p_36161_, this.inventory.offhand.set(0, p_36162_), p_36162_);
+            this.onEquipItem(p_36161_, this.inventory.offhand.set(0, p_36162_), p_36162_, isSilentEquip()); //Ketting
         } else if (p_36161_.getType() == EquipmentSlot.Type.ARMOR) {
-            this.onEquipItem(p_36161_, this.inventory.armor.set(p_36161_.getIndex(), p_36162_), p_36162_);
+            this.onEquipItem(p_36161_, this.inventory.armor.set(p_36161_.getIndex(), p_36162_), p_36162_, isSilentEquip()); //Ketting
         }
     }
 
@@ -1773,25 +_,39 @@
 
     protected void removeEntitiesOnShoulder() {
         if (this.timeEntitySatOnShoulder + 20L < this.level().getGameTime()) {
+            //Ketting start - mixin inject
+            // CraftBukkit start
             this.respawnEntityOnShoulder(this.getShoulderEntityLeft());
-            this.setShoulderEntityLeft(new CompoundTag());
+            if (respawnEntityOnShoulder$return)
+                this.setShoulderEntityLeft(new CompoundTag());
+
             this.respawnEntityOnShoulder(this.getShoulderEntityRight());
-            this.setShoulderEntityRight(new CompoundTag());
+            if (respawnEntityOnShoulder$return)
+                this.setShoulderEntityRight(new CompoundTag());
+            // CraftBukkit end
         }
+
     }
 
+    private boolean respawnEntityOnShoulder$return = false;
     private void respawnEntityOnShoulder(CompoundTag p_36371_) {
+        respawnEntityOnShoulder$return = false; //reset
+
         if (!this.level().isClientSide && !p_36371_.isEmpty()) {
-            EntityType.create(p_36371_, this.level()).ifPresent(p_311703_ -> {
-                if (p_311703_ instanceof TamableAnimal) {
-                    ((TamableAnimal)p_311703_).setOwnerUUID(this.uuid);
+            respawnEntityOnShoulder$return = EntityType.create(p_36371_, this.level()).map((p_309218_) -> { // CraftBukkit
+                if (p_309218_ instanceof TamableAnimal) {
+                    ((TamableAnimal)p_309218_).setOwnerUUID(this.uuid);
                 }
 
-                p_311703_.setPos(this.getX(), this.getY() + 0.7F, this.getZ());
-                ((ServerLevel)this.level()).addWithUUID(p_311703_);
-            });
+                p_309218_.setPos(this.getX(), this.getY() + (double)0.7F, this.getZ());
+                return ((ServerLevel) this.level()).addWithUUID(p_309218_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SHOULDER_ENTITY); // CraftBukkit
+            }).orElse(true); // CraftBukkit
+            return;
         }
+
+        respawnEntityOnShoulder$return = true; // CraftBukkit
     }
+    //Ketting end
 
     @Override
     public abstract boolean isSpectator();
@@ -1819,7 +_,11 @@
 
     @Override
     public Component getDisplayName() {
-        MutableComponent mutablecomponent = PlayerTeam.formatNameForTeam(this.getTeam(), this.getName());
+        if (this.displayname == null) this.displayname = net.neoforged.neoforge.event.EventHooks.getPlayerDisplayName(this, this.getName());
+        MutableComponent mutablecomponent = Component.literal("");
+        mutablecomponent = prefixes.stream().reduce(mutablecomponent, MutableComponent::append);
+        mutablecomponent = mutablecomponent.append(PlayerTeam.formatNameForTeam(this.getTeam(), this.displayname));
+        mutablecomponent = suffixes.stream().reduce(mutablecomponent, MutableComponent::append);
         return this.decorateDisplayNameComponent(mutablecomponent);
     }
 
@@ -1966,25 +_,25 @@
             Predicate<ItemStack> predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getSupportedHeldProjectiles();
             ItemStack itemstack = ProjectileWeaponItem.getHeldProjectile(this, predicate);
             if (!itemstack.isEmpty()) {
-                return itemstack;
+                return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_36349_, itemstack);
             } else {
                 predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getAllSupportedProjectiles();
 
                 for(int i = 0; i < this.inventory.getContainerSize(); ++i) {
                     ItemStack itemstack1 = this.inventory.getItem(i);
                     if (predicate.test(itemstack1)) {
-                        return itemstack1;
+                        return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_36349_, itemstack1);
                     }
                 }
 
-                return this.abilities.instabuild ? new ItemStack(Items.ARROW) : ItemStack.EMPTY;
+                return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_36349_, this.abilities.instabuild ? new ItemStack(Items.ARROW) : ItemStack.EMPTY);
             }
         }
     }
 
     @Override
     public ItemStack eat(Level p_36185_, ItemStack p_36186_) {
-        this.getFoodData().eat(p_36186_.getItem(), p_36186_);
+        this.getFoodData().eat(p_36186_.getItem(), p_36186_, this);
         this.awardStat(Stats.ITEM_USED.get(p_36186_.getItem()));
         p_36185_.playSound(
             null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_BURP, SoundSource.PLAYERS, 0.5F, p_36185_.random.nextFloat() * 0.1F + 0.9F
@@ -2108,5 +_,39 @@
         public Component getMessage() {
             return this.message;
         }
+    }
+
+    // =========== FORGE START ==============//
+    public Collection<MutableComponent> getPrefixes() {
+         return this.prefixes;
+    }
+
+    public Collection<MutableComponent> getSuffixes() {
+         return this.suffixes;
+    }
+
+    private Component displayname = null;
+    /**
+     * Force the displayed name to refresh, by firing {@link net.neoforged.neoforge.event.entity.player.PlayerEvent.NameFormat}, using the real player name as event parameter.
+     */
+    public void refreshDisplayName() {
+        this.displayname = net.neoforged.neoforge.event.EventHooks.getPlayerDisplayName(this, this.getName());
+    }
+
+    /**
+     * Force a pose for the player. If set, the vanilla pose determination and clearance check is skipped. Make sure the pose is clear yourself (e.g. in PlayerTick).
+     * This has to be set just once, do not set it every tick.
+     * Make sure to clear (null) the pose if not required anymore and only use if necessary.
+     */
+    public void setForcedPose(@Nullable Pose pose) {
+        this.forcedPose = pose;
+    }
+
+    /**
+     * @return The forced pose if set, null otherwise
+     */
+    @Nullable
+    public Pose getForcedPose() {
+        return this.forcedPose;
     }
 }
