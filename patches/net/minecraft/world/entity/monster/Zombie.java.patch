--- a/net/minecraft/world/entity/monster/Zombie.java
+++ b/net/minecraft/world/entity/monster/Zombie.java
@@ -85,6 +_,7 @@
     private boolean canBreakDoors;
     private int inWaterTime;
     public int conversionTime;
+    private int lastTick = net.minecraft.server.MinecraftServer.currentTick; // CraftBukkit - add field
 
     public Zombie(EntityType<? extends Zombie> p_34271_, Level p_34272_) {
         super(p_34271_, p_34272_);
@@ -109,6 +_,7 @@
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this).setAlertOthers(ZombifiedPiglin.class));
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false));
+        if ( this.level().spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false)); // Spigot
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
         this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
     }
@@ -202,7 +_,10 @@
     public void tick() {
         if (!this.level().isClientSide && this.isAlive() && !this.isNoAi()) {
             if (this.isUnderWaterConverting()) {
-                --this.conversionTime;
+                // CraftBukkit start - Use wall time instead of ticks for conversion
+                int elapsedTicks = net.minecraft.server.MinecraftServer.currentTick - this.lastTick;
+                this.conversionTime -= elapsedTicks;
+                // CraftBukkit end
                 if (this.conversionTime < 0) {
                     this.doUnderWaterConversion();
                 }
@@ -219,6 +_,7 @@
         }
 
         super.tick();
+        this.lastTick = net.minecraft.server.MinecraftServer.currentTick; // CraftBukkit
     }
 
     @Override
@@ -249,11 +_,13 @@
     }
 
     public void startUnderWaterConversion(int p_34279_) {
+        this.lastTick = net.minecraft.server.MinecraftServer.currentTick; // CraftBukkit
         this.conversionTime = p_34279_;
         this.getEntityData().set(DATA_DROWNED_CONVERSION_ID, true);
     }
 
     protected void doUnderWaterConversion() {
+        if (!net.neoforged.neoforge.event.EventHooks.canLivingConvert(this, EntityType.DROWNED, (timer) -> this.conversionTime = timer)) return;
         this.convertToZombieType(EntityType.DROWNED);
         if (!this.isSilent()) {
             this.level().levelEvent(null, 1040, this.blockPosition(), 0);
@@ -261,10 +_,17 @@
     }
 
     protected void convertToZombieType(EntityType<? extends Zombie> p_34311_) {
+        ketting$convertTo$transformReason.set(org.bukkit.event.entity.EntityTransformEvent.TransformReason.DROWNED); //Ketting - CraftBukkit
+        ketting$convertTo$spawnReason.set(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DROWNED); //Ketting - CraftBukkit
         Zombie zombie = this.convertTo(p_34311_, true);
         if (zombie != null) {
             zombie.handleAttributes(zombie.level().getCurrentDifficultyAt(zombie.blockPosition()).getSpecialMultiplier());
             zombie.setCanBreakDoors(zombie.supportsBreakDoorGoal() && this.canBreakDoors());
+            net.neoforged.neoforge.event.EventHooks.onLivingConvert(this, zombie);
+            // CraftBukkit start - SPIGOT-5208: End conversion to stop event spam
+        } else {
+            ((org.bukkit.entity.Zombie) getBukkitEntity()).setConversionTime(-1);
+            // CraftBukkit end
         }
     }
 
@@ -285,14 +_,19 @@
                 livingentity = (LivingEntity)p_34288_.getEntity();
             }
 
-            if (livingentity != null
-                && this.level().getDifficulty() == Difficulty.HARD
-                && (double)this.random.nextFloat() < this.getAttributeValue(Attributes.SPAWN_REINFORCEMENTS_CHANCE)
-                && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
-                int i = Mth.floor(this.getX());
-                int j = Mth.floor(this.getY());
-                int k = Mth.floor(this.getZ());
-                Zombie zombie = new Zombie(this.level());
+            int i = Mth.floor(this.getX());
+            int j = Mth.floor(this.getY());
+            int k = Mth.floor(this.getZ());
+
+            net.neoforged.neoforge.event.entity.living.ZombieEvent.SummonAidEvent event = net.neoforged.neoforge.event.EventHooks.fireZombieSummonAid(this, level(), i, j, k, livingentity, this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).getValue());
+            if (event.getResult() == net.neoforged.bus.api.Event.Result.DENY) return true;
+            if (event.getResult() == net.neoforged.bus.api.Event.Result.ALLOW  ||
+                      (livingentity != null
+                      && this.level().getDifficulty() == Difficulty.HARD
+                      && (double)this.random.nextFloat() < this.getAttributeValue(Attributes.SPAWN_REINFORCEMENTS_CHANCE)
+                      && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING))) {
+
+                Zombie zombie = event.getCustomSummonedAid() != null && event.getResult() == net.neoforged.bus.api.Event.Result.ALLOW ? event.getCustomSummonedAid() : EntityType.ZOMBIE.create(this.level());
 
                 for(int l = 0; l < 50; ++l) {
                     int i1 = i + Mth.nextInt(this.random, 7, 40) * Mth.nextInt(this.random, -1, 1);
@@ -308,7 +_,9 @@
                             && this.level().isUnobstructed(zombie)
                             && this.level().noCollision(zombie)
                             && !this.level().containsAnyLiquid(zombie.getBoundingBox())) {
-                            zombie.setTarget(livingentity);
+                            if (livingentity != null) {
+                                zombie.setTarget(livingentity);
+                            }
                             zombie.finalizeSpawn(
                                 serverlevel, this.level().getCurrentDifficultyAt(zombie.blockPosition()), MobSpawnType.REINFORCEMENT, null, null
                             );
@@ -333,7 +_,15 @@
         if (flag) {
             float f = this.level().getCurrentDifficultyAt(this.blockPosition()).getEffectiveDifficulty();
             if (this.getMainHandItem().isEmpty() && this.isOnFire() && this.random.nextFloat() < f * 0.3F) {
-                p_34276_.setSecondsOnFire(2 * (int)f);
+                // CraftBukkit start
+                org.bukkit.event.entity.EntityCombustByEntityEvent event = new org.bukkit.event.entity.EntityCombustByEntityEvent(this.getBukkitEntity(), p_34276_.getBukkitEntity(), 2 * (int) f); // PAIL: fixme
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    p_34276_.ketting$setSecondsOnFire$callEvent.set(false);
+                    p_34276_.setSecondsOnFire(event.getDuration());
+                }
+                // CraftBukkit end
             }
         }
 
@@ -405,33 +_,42 @@
     @Override
     public boolean killedEntity(ServerLevel p_219160_, LivingEntity p_219161_) {
         boolean flag = super.killedEntity(p_219160_, p_219161_);
-        if ((p_219160_.getDifficulty() == Difficulty.NORMAL || p_219160_.getDifficulty() == Difficulty.HARD) && p_219161_ instanceof Villager villager) {
+        if ((p_219160_.getDifficulty() == Difficulty.NORMAL || p_219160_.getDifficulty() == Difficulty.HARD) && p_219161_ instanceof Villager villager && net.neoforged.neoforge.event.EventHooks.canLivingConvert(p_219161_, EntityType.ZOMBIE_VILLAGER, (timer) -> {})) {
             if (p_219160_.getDifficulty() != Difficulty.HARD && this.random.nextBoolean()) {
                 return flag;
             }
 
-            ZombieVillager zombievillager = villager.convertTo(EntityType.ZOMBIE_VILLAGER, false);
-            if (zombievillager != null) {
-                zombievillager.finalizeSpawn(
-                    p_219160_,
-                    p_219160_.getCurrentDifficultyAt(zombievillager.blockPosition()),
-                    MobSpawnType.CONVERSION,
-                    new Zombie.ZombieGroupData(false, true),
-                    null
-                );
-                zombievillager.setVillagerData(villager.getVillagerData());
-                zombievillager.setGossips(villager.getGossips().store(NbtOps.INSTANCE));
-                zombievillager.setTradeOffers(villager.getOffers().createTag());
-                zombievillager.setVillagerXp(villager.getVillagerXp());
-                if (!this.isSilent()) {
-                    p_219160_.levelEvent(null, 1026, this.blockPosition(), 0);
-                }
-
-                flag = false;
+            if (!net.neoforged.neoforge.event.EventHooks.canLivingConvert(p_219161_, EntityType.ZOMBIE_VILLAGER, (timer) -> {
+            })) {
+                return flag;
             }
+            // CraftBukkit start
+            flag = zombifyVillager(p_219160_, villager, this.blockPosition(), this.isSilent(), org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.INFECTION) == null;
         }
 
         return flag;
+    }
+
+    public static ZombieVillager zombifyVillager(ServerLevel p_219160_, Villager p_219161_, BlockPos blockPosition, boolean silent, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+        ZombieVillager zombieVillager = (ZombieVillager) p_219161_.convertTo(EntityType.ZOMBIE_VILLAGER, false, org.bukkit.event.entity.EntityTransformEvent.TransformReason.INFECTION, spawnReason);
+        // CraftBukkit end
+
+        if (zombieVillager != null) {
+            zombieVillager.finalizeSpawn(p_219160_, p_219160_.getCurrentDifficultyAt(zombieVillager.blockPosition()), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false, true), (CompoundTag) null);
+            zombieVillager.setVillagerData(p_219161_.getVillagerData());
+            zombieVillager.setGossips(p_219161_.getGossips().store(NbtOps.INSTANCE));
+            zombieVillager.setTradeOffers(p_219161_.getOffers().createTag());
+            zombieVillager.setVillagerXp(p_219161_.getVillagerXp());
+            net.neoforged.neoforge.event.EventHooks.onLivingConvert(p_219161_, zombieVillager);
+            // CraftBukkit start
+            if (!silent) {
+                p_219160_.levelEvent((Player) null, 1026, blockPosition, 0);
+            }
+
+            // flag = false;
+        }
+        return zombieVillager;
+        // CraftBukkit end
     }
 
     @Override
@@ -482,6 +_,7 @@
                             chicken1.finalizeSpawn(p_34297_, p_34298_, MobSpawnType.JOCKEY, null, null);
                             chicken1.setChickenJockey(true);
                             this.startRiding(chicken1);
+                            p_34297_.prepareAddFreshEntity(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.MOUNT);
                             p_34297_.addFreshEntity(chicken1);
                         }
                     }
