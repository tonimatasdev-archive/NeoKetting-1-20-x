--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -158,6 +_,7 @@
         PrimaryLevelData primaryleveldata = PrimaryLevelData.parse(
             dynamic, levelsettings, worlddimensions$complete.specialWorldProperty(), worldgensettings.options(), lifecycle
         );
+        primaryleveldata.pdc = ((Dynamic<Tag>) dynamic1).getElement("BukkitValues", null); // CraftBukkit - Add PDC to world
         return new LevelDataAndDimensions(primaryleveldata, worlddimensions$complete);
     }
 
@@ -365,18 +_,42 @@
         return this.backupDir;
     }
 
+    //Ketting start
+    public final java.util.concurrent.atomic.AtomicReference<ResourceKey<LevelStem>> ketting$validateAndCreateAccess$dimensionType = new java.util.concurrent.atomic.AtomicReference<>(null);
+    public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String p_289980_, ResourceKey<LevelStem> dimensionType) throws IOException, ContentValidationException {
+        ketting$validateAndCreateAccess$dimensionType.set(dimensionType);
+        return validateAndCreateAccess(p_289980_);
+    }
+    //Ketting end
+
     public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String p_289980_) throws IOException, ContentValidationException {
         Path path = this.getLevelPath(p_289980_);
         List<ForbiddenSymlinkInfo> list = this.worldDirValidator.validateDirectory(path, true);
         if (!list.isEmpty()) {
             throw new ContentValidationException(path, list);
         } else {
+            LevelStorageAccess.ketting$dimensionType = ketting$validateAndCreateAccess$dimensionType.getAndSet(null);
             return new LevelStorageSource.LevelStorageAccess(p_289980_, path);
         }
     }
 
+    //Ketting start - try merging both world systems
+    public LevelStorageSource.LevelStorageAccess deriveFromSource(LevelStorageSource.LevelStorageAccess source, ResourceKey<LevelStem> dimensionType) throws IOException {
+        return new LevelStorageSource.LevelStorageAccess(source, dimensionType);
+    }
+
+    public final java.util.concurrent.atomic.AtomicReference<ResourceKey<LevelStem>> ketting$createAccess$dimensionType = new java.util.concurrent.atomic.AtomicReference<>(null);
+
+    @SuppressWarnings("unused") //Ketting - CB compat
+    public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_, ResourceKey<LevelStem> dimensionType) throws IOException { // CraftBukkit
+        ketting$createAccess$dimensionType.set(dimensionType);
+        return this.createAccess(p_78261_);
+    }
+    //Ketting end
+
     public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_) throws IOException {
         Path path = this.getLevelPath(p_78261_);
+        LevelStorageAccess.ketting$dimensionType = ketting$createAccess$dimensionType.getAndSet(null); //Ketting
         return new LevelStorageSource.LevelStorageAccess(p_78261_, path);
     }
 
@@ -384,6 +_,20 @@
         return this.worldDirValidator;
     }
 
+    // CraftBukkit start
+    public static Path getStorageFolder(Path path, ResourceKey<LevelStem> dimensionType) {
+        if (dimensionType == LevelStem.OVERWORLD) {
+            return path;
+        } else if (dimensionType == LevelStem.NETHER) {
+            return path.resolve("DIM-1");
+        } else if (dimensionType == LevelStem.END) {
+            return path.resolve("DIM1");
+        } else {
+            return path.resolve("dimensions").resolve(dimensionType.location().getNamespace()).resolve(dimensionType.location().getPath());
+        }
+    }
+    // CraftBukkit end
+
     public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> levels) implements Iterable<LevelStorageSource.LevelDirectory> {
         public boolean isEmpty() {
             return this.levels.isEmpty();
@@ -434,12 +_,41 @@
         public final LevelStorageSource.LevelDirectory levelDirectory;
         private final String levelId;
         private final Map<LevelResource, Path> resources = Maps.newHashMap();
+        // CraftBukkit start
+        public @Nullable ResourceKey<LevelStem> dimensionType;
+
+        //Ketting start
+        public static @Nullable ResourceKey<LevelStem> ketting$dimensionType;
+
+        public void setDimensionType(ResourceKey<LevelStem> dimensionType) {
+            this.dimensionType = dimensionType;
+        }
+        //Ketting end
 
         LevelStorageAccess(String p_289967_, Path p_289988_) throws IOException {
             this.levelId = p_289967_;
             this.levelDirectory = new LevelStorageSource.LevelDirectory(p_289988_);
             this.lock = DirectoryLock.create(p_289988_);
-        }
+            //Ketting start
+            this.dimensionType = ketting$dimensionType;
+            ketting$dimensionType = null;
+        }
+
+        //Ketting start
+        LevelStorageAccess(LevelStorageAccess original, ResourceKey<LevelStem> dimensionType) {
+            this.dimensionType = dimensionType;
+
+            this.levelId = original.levelId;
+            this.levelDirectory = original.levelDirectory;
+            this.lock = original.lock;
+            this.resources.putAll(original.resources);
+        }
+        @SuppressWarnings("unused") //Ketting - keep for CB compat
+        LevelStorageAccess(String p_289967_, Path p_289988_, ResourceKey<LevelStem> dimensionType) throws IOException {
+            this(p_289967_, p_289988_);
+            this.dimensionType = dimensionType;
+        }
+        //Ketting end
 
         public void safeClose() {
             try {
@@ -466,7 +_,7 @@
         }
 
         public Path getDimensionPath(ResourceKey<Level> p_197395_) {
-            return DimensionType.getStorageFolder(p_197395_, this.levelDirectory.path());
+            return getStorageFolder(this.levelDirectory.path(), this.dimensionType); // CraftBukkit
         }
 
         private void checkLock() {
@@ -475,6 +_,18 @@
             }
         }
 
+        public void readAdditionalLevelSaveData(boolean fallback) {
+            checkLock();
+            Path path = fallback ? this.levelDirectory.oldDataFile() : this.levelDirectory.dataFile();
+            try {
+                var tag = readLightweightData(path);
+                if (tag instanceof CompoundTag compoundTag)
+                    net.neoforged.neoforge.common.CommonHooks.readAdditionalLevelSaveData(compoundTag, this.levelDirectory);
+            } catch (Exception e) {
+                LOGGER.error("Exception reading {}", path, e);
+            }
+        }
+
         public PlayerDataStorage createPlayerStorage() {
             this.checkLock();
             return new PlayerDataStorage(this, LevelStorageSource.this.fixerUpper);
@@ -485,6 +_,12 @@
             return LevelStorageSource.this.makeLevelSummary(p_307314_, this.levelDirectory, false);
         }
 
+        public CompoundTag getDataTagRaw(boolean fallback) throws IOException {
+            this.checkLock();
+            return LevelStorageSource.readLevelDataTagRaw(fallback ? this.levelDirectory.oldDataFile() : this.levelDirectory.dataFile());
+
+        }
+
         public Dynamic<?> getDataTag() throws IOException {
             return this.getDataTag(false);
         }
@@ -508,6 +_,7 @@
             CompoundTag compoundtag = p_78292_.createTag(p_78291_, p_78293_);
             CompoundTag compoundtag1 = new CompoundTag();
             compoundtag1.put("Data", compoundtag);
+            net.neoforged.neoforge.common.CommonHooks.writeAdditionalLevelSaveData(p_78292_, compoundtag1);
             this.saveLevelData(compoundtag1);
         }
 
@@ -529,6 +_,10 @@
             return !this.lock.isValid() ? Optional.empty() : Optional.of(this.levelDirectory.iconFile());
         }
 
+        public Path getWorldDir() {
+            return baseDir;
+        }
+
         public void deleteLevel() throws IOException {
             this.checkLock();
             final Path path = this.levelDirectory.lockFile();
@@ -578,6 +_,58 @@
             }
         }
 
+        //Ketting start
+        public void deleteLevelSilent() throws IOException {
+            this.checkLock();
+            final Path path = this.levelDirectory.lockFile();
+            LevelStorageSource.LOGGER.debug("Deleting level {}", (Object)this.levelId);
+
+            for(int i = 1; i <= 5; ++i) {
+                LevelStorageSource.LOGGER.debug("Attempt {}...", (int)i);
+
+                try {
+                    Files.walkFileTree(this.levelDirectory.path(), new SimpleFileVisitor<Path>() {
+                        public FileVisitResult visitFile(Path p_78323_, BasicFileAttributes p_78324_) throws IOException {
+                            if (!p_78323_.equals(path)) {
+                                LevelStorageSource.LOGGER.debug("Deleting {}", (Object)p_78323_);
+                                Files.delete(p_78323_);
+                            }
+
+                            return FileVisitResult.CONTINUE;
+                        }
+
+                        public FileVisitResult postVisitDirectory(Path p_78320_, @Nullable IOException p_78321_) throws IOException {
+                            if (p_78321_ != null) {
+                                throw p_78321_;
+                            } else {
+                                if (p_78320_.equals(LevelStorageAccess.this.levelDirectory.path())) {
+                                    LevelStorageAccess.this.lock.close();
+                                    Files.deleteIfExists(path);
+                                }
+
+                                Files.delete(p_78320_);
+                                return FileVisitResult.CONTINUE;
+                            }
+                        }
+                    });
+                    break;
+                } catch (IOException ioexception) {
+                    if (i >= 5) {
+                        throw ioexception;
+                    }
+
+                    LevelStorageSource.LOGGER.debug("Failed to delete {}", this.levelDirectory.path(), ioexception);
+
+                    try {
+                        Thread.sleep(500L);
+                    } catch (InterruptedException interruptedexception) {
+                    }
+                }
+            }
+
+        }
+        //Ketting end
+
         public void renameLevel(String p_78298_) throws IOException {
             this.modifyLevelDataWithoutDatafix(p_307270_ -> p_307270_.putString("LevelName", p_78298_.trim()));
         }
@@ -649,5 +_,12 @@
         public Instant getFileModificationTime(boolean p_307470_) {
             return LevelStorageSource.getFileModificationTime(p_307470_ ? this.levelDirectory.oldDataFile() : this.levelDirectory.dataFile());
         }
+
+        //Ketting start
+        public @Nullable LevelStorageSource reference;
+        public void setReference(LevelStorageSource levelstoragesource) {
+            this.reference = levelstoragesource;
+        }
+        //Ketting end
     }
 }
