--- a/net/minecraft/world/level/storage/loot/LootParams.java
+++ b/net/minecraft/world/level/storage/loot/LootParams.java
@@ -18,6 +_,7 @@
     private final Map<LootContextParam<?>, Object> params;
     private final Map<ResourceLocation, LootParams.DynamicDrop> dynamicDrops;
     private final float luck;
+    public boolean empty; //Ketting
 
     public LootParams(
         ServerLevel p_287766_, Map<LootContextParam<?>, Object> p_287705_, Map<ResourceLocation, LootParams.DynamicDrop> p_287642_, float p_287671_
@@ -123,16 +_,21 @@
             return this;
         }
 
+        //Ketting start
+        private LootParams create$lootParams;
         public LootParams create(LootContextParamSet p_287701_) {
             Set<LootContextParam<?>> set = Sets.difference(this.params.keySet(), p_287701_.getAllowed());
-            if (!set.isEmpty()) {
+            if (false && !set.isEmpty()) { // Forge: Allow mods to pass custom loot parameters (not part of the vanilla loot table) to the loot context.
                 throw new IllegalArgumentException("Parameters not allowed in this parameter set: " + set);
             } else {
                 Set<LootContextParam<?>> set1 = Sets.difference(p_287701_.getRequired(), this.params.keySet());
                 if (!set1.isEmpty()) {
                     throw new IllegalArgumentException("Missing required parameters: " + set1);
                 } else {
-                    return new LootParams(this.level, this.params, this.dynamicDrops, this.luck);
+                    create$lootParams = new LootParams(this.level, this.params, this.dynamicDrops, this.luck);
+                    create$lootParams.empty = p_287701_ == net.minecraft.world.level.storage.loot.parameters.LootContextParamSets.EMPTY;
+                    return create$lootParams;
+                    //Ketting end
                 }
             }
         }
