--- a/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
+++ b/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
@@ -43,10 +_,12 @@
     private boolean hasGeneratedPositions;
     private final List<Holder<StructureSet>> possibleStructureSets;
 
+    public static java.util.concurrent.atomic.AtomicReference<org.spigotmc.SpigotWorldConfig> ketting$createFor$conf = new java.util.concurrent.atomic.AtomicReference<>(null); //Ketting
     public static ChunkGeneratorStructureState createForFlat(
         RandomState p_256240_, long p_256404_, BiomeSource p_256274_, Stream<Holder<StructureSet>> p_256348_
     ) {
         List<Holder<StructureSet>> list = p_256348_.filter(p_255616_ -> hasBiomesForStructureSet(p_255616_.value(), p_256274_)).toList();
+        list = injectSpigot(list, ketting$createFor$conf.getAndSet(null));
         return new ChunkGeneratorStructureState(p_256240_, p_256274_, p_256404_, 0L, list);
     }
 
@@ -56,8 +_,69 @@
         List<Holder<StructureSet>> list = p_256659_.listElements()
             .filter(p_256144_ -> hasBiomesForStructureSet(p_256144_.value(), p_256653_))
             .collect(Collectors.toUnmodifiableList());
+        list = injectSpigot(list, ketting$createFor$conf.getAndSet(null));
         return new ChunkGeneratorStructureState(p_256197_, p_256653_, p_255806_, p_255806_, list);
     }
+
+    // Spigot start
+    private static List<Holder<StructureSet>> injectSpigot(List<Holder<StructureSet>> list, org.spigotmc.SpigotWorldConfig conf) {
+        return list.stream().map((holder) -> {
+            StructureSet structureset = holder.value();
+            if (structureset.placement() instanceof net.minecraft.world.level.levelgen.structure.placement.RandomSpreadStructurePlacement randomConfig) {
+                String name = holder.unwrapKey().orElseThrow().location().getPath();
+                int seed = randomConfig.salt;
+
+                switch (name) {
+                    case "desert_pyramids":
+                        seed = conf.desertSeed;
+                        break;
+                    case "end_cities":
+                        seed = conf.endCitySeed;
+                        break;
+                    case "nether_complexes":
+                        seed = conf.netherSeed;
+                        break;
+                    case "igloos":
+                        seed = conf.iglooSeed;
+                        break;
+                    case "jungle_temples":
+                        seed = conf.jungleSeed;
+                        break;
+                    case "woodland_mansions":
+                        seed = conf.mansionSeed;
+                        break;
+                    case "ocean_monuments":
+                        seed = conf.monumentSeed;
+                        break;
+                    case "nether_fossils":
+                        seed = conf.fossilSeed;
+                        break;
+                    case "ocean_ruins":
+                        seed = conf.oceanSeed;
+                        break;
+                    case "pillager_outposts":
+                        seed = conf.outpostSeed;
+                        break;
+                    case "ruined_portals":
+                        seed = conf.portalSeed;
+                        break;
+                    case "shipwrecks":
+                        seed = conf.shipwreckSeed;
+                        break;
+                    case "swamp_huts":
+                        seed = conf.swampSeed;
+                        break;
+                    case "villages":
+                        seed = conf.villageSeed;
+                        break;
+                }
+
+                structureset = new StructureSet(structureset.structures(), new net.minecraft.world.level.levelgen.structure.placement.RandomSpreadStructurePlacement(randomConfig.locateOffset, randomConfig.frequencyReductionMethod, randomConfig.frequency, seed, randomConfig.exclusionZone, randomConfig.spacing(), randomConfig.separation(), randomConfig.spreadType()));
+            }
+            return Holder.direct(structureset);
+        }).collect(Collectors.toUnmodifiableList());
+    }
+    // Spigot end
 
     private static boolean hasBiomesForStructureSet(StructureSet p_255766_, BiomeSource p_256424_) {
         Stream<Holder<Biome>> stream = p_255766_.structures().stream().flatMap(p_255738_ -> {
