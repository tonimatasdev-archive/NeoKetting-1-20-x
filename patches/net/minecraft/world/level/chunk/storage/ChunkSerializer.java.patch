--- a/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -95,7 +_,7 @@
         ChunkSource chunksource = p_188231_.getChunkSource();
         LevelLightEngine levellightengine = chunksource.getLightEngine();
         Registry<Biome> registry = p_188231_.registryAccess().registryOrThrow(Registries.BIOME);
-        Codec<PalettedContainerRO<Holder<Biome>>> codec = makeBiomeCodec(registry);
+        Codec<PalettedContainer<Holder<Biome>>> codec = makeBiomeCodecRW(registry); // CraftBukkit - read/write
         boolean flag2 = false;
 
         for(int j = 0; j < listtag.size(); ++j) {
@@ -114,7 +_,7 @@
                     );
                 }
 
-                PalettedContainerRO<Holder<Biome>> palettedcontainerro;
+                PalettedContainer<Holder<Biome>> palettedcontainerro; // CraftBukkit - read/write
                 if (compoundtag.contains("biomes", 10)) {
                     palettedcontainerro = codec.parse(NbtOps.INSTANCE, compoundtag.getCompound("biomes"))
                         .promotePartial(p_188274_ -> logErrors(p_188233_, k, p_188274_))
@@ -180,6 +_,8 @@
                 postLoadChunk(p_188231_, p_188234_),
                 blendingdata
             );
+            if (p_188234_.contains(net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager.LIGHT_NBT_KEY, net.minecraft.nbt.Tag.TAG_LIST))
+                Objects.requireNonNull(((LevelChunk)chunkaccess).getAuxLightManager(p_188233_)).deserializeNBT(p_188234_.getList(net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager.LIGHT_NBT_KEY, net.minecraft.nbt.Tag.TAG_COMPOUND));
         } else {
             ProtoChunkTicks<Block> protochunkticks = ProtoChunkTicks.load(
                 p_188234_.getList("block_ticks", 10), p_258992_ -> BuiltInRegistries.BLOCK.getOptional(ResourceLocation.tryParse(p_258992_)), p_188233_
@@ -206,6 +_,16 @@
             }
         }
 
+        if (p_188234_.contains(net.neoforged.neoforge.attachment.AttachmentHolder.ATTACHMENTS_NBT_KEY, net.minecraft.nbt.Tag.TAG_COMPOUND))
+            chunkaccess.readAttachmentsFromNBT(p_188234_.getCompound(net.neoforged.neoforge.attachment.AttachmentHolder.ATTACHMENTS_NBT_KEY));
+
+        // CraftBukkit start - load chunk persistent data from nbt - SPIGOT-6814: Already load PDC here to account for 1.17 to 1.18 chunk upgrading.
+        net.minecraft.nbt.Tag persistentBase = p_188234_.get("ChunkBukkitValues");
+        if (persistentBase instanceof CompoundTag) {
+            chunkaccess.persistentDataContainer.putAll((CompoundTag) persistentBase);
+        }
+        // CraftBukkit end
+        
         chunkaccess.setLightCorrect(flag);
         CompoundTag compoundtag2 = p_188234_.getCompound("Heightmaps");
         EnumSet<Heightmap.Types> enumset = EnumSet.noneOf(Heightmap.Types.class);
@@ -238,6 +_,7 @@
         }
 
         if (chunkstatus$chunktype == ChunkStatus.ChunkType.LEVELCHUNK) {
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
             return new ImposterProtoChunk((LevelChunk)chunkaccess, false);
         } else {
             ProtoChunk protochunk1 = (ProtoChunk)chunkaccess;
@@ -261,6 +_,7 @@
                 protochunk1.setCarvingMask(generationstep$carving, new CarvingMask(compoundtag4.getLongArray(s1), chunkaccess.getMinBuildHeight()));
             }
 
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
             return protochunk1;
         }
     }
@@ -275,6 +_,12 @@
         );
     }
 
+    // CraftBukkit start - read/write
+    private static Codec<PalettedContainer<Holder<Biome>>> makeBiomeCodecRW(Registry<Biome> iregistry) {
+        return PalettedContainer.codecRW(iregistry.asHolderIdMap(), iregistry.holderByNameCodec(), PalettedContainer.Strategy.SECTION_BIOMES, iregistry.getHolderOrThrow(Biomes.PLAINS));
+    }
+    // CraftBukkit end
+
     public static CompoundTag write(ServerLevel p_63455_, ChunkAccess p_63456_) {
         ChunkPos chunkpos = p_63456_.getPos();
         CompoundTag compoundtag = NbtUtils.addCurrentDataVersion(new CompoundTag());
@@ -373,6 +_,11 @@
 
             compoundtag.put("CarvingMasks", compoundtag4);
         }
+        else if (p_63456_ instanceof LevelChunk levelChunk){
+
+             Tag lightTag = levelChunk.getAuxLightManager(chunkpos).serializeNBT();
+             if (lightTag != null) compoundtag.put(net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager.LIGHT_NBT_KEY, lightTag);
+        }
 
         saveTicks(p_63455_, compoundtag, p_63456_.getTicksForSerialization());
         compoundtag.put("PostProcessing", packOffsets(p_63456_.getPostProcessing()));
@@ -384,11 +_,22 @@
             }
         }
 
+        try {
+            final CompoundTag capTag = p_63456_.writeAttachmentsToNBT();
+            if (capTag != null) compoundtag.put(net.neoforged.neoforge.attachment.AttachmentHolder.ATTACHMENTS_NBT_KEY, capTag);
+        } catch (Exception exception) {
+            LOGGER.error("Failed to write chunk attachments. An attachment has likely thrown an exception trying to write state. It will not persist. Report this to the mod author", exception);
+        }
         compoundtag.put("Heightmaps", compoundtag2);
         compoundtag.put(
             "structures",
             packStructureData(StructurePieceSerializationContext.fromLevel(p_63455_), chunkpos, p_63456_.getAllStarts(), p_63456_.getAllReferences())
         );
+        // CraftBukkit start - store chunk persistent data in nbt
+        if (!p_63456_.persistentDataContainer.isEmpty()) { // SPIGOT-6814: Always save PDC to account for 1.17 to 1.18 chunk upgrading.
+            compoundtag.put("ChunkBukkitValues", p_63456_.persistentDataContainer.toTagCompound());
+        }
+        // CraftBukkit end
         return compoundtag;
     }
 
@@ -407,10 +_,13 @@
         ListTag listtag = getListOfCompoundsOrNull(p_196892_, "entities");
         ListTag listtag1 = getListOfCompoundsOrNull(p_196892_, "block_entities");
         return listtag == null && listtag1 == null ? null : p_196904_ -> {
+            p_196891_.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
             if (listtag != null) {
                 p_196891_.addLegacyChunkEntities(EntityType.loadEntitiesRecursive(listtag, p_196891_));
             }
+            p_196891_.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot
 
+            p_196891_.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot
             if (listtag1 != null) {
                 for(int i = 0; i < listtag1.size(); ++i) {
                     CompoundTag compoundtag = listtag1.getCompound(i);
@@ -426,6 +_,7 @@
                     }
                 }
             }
+            p_196891_.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot
         };
     }
 
