--- a/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -54,7 +_,7 @@
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
-public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiomeSource, LightChunk, StructureAccess {
+public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiomeSource, LightChunk, StructureAccess, net.neoforged.neoforge.attachment.IAttachmentHolder {
     public static final int NO_FILLED_SECTION = -1;
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final LongSet EMPTY_REFERENCE_SET = new LongOpenHashSet();
@@ -80,14 +_,19 @@
     protected final LevelHeightAccessor levelHeightAccessor;
     protected final LevelChunkSection[] sections;
 
+    // CraftBukkit start - SPIGOT-6814: move to IChunkAccess to account for 1.17 to 1.18 chunk upgrading.
+    private static final org.bukkit.craftbukkit.v1_20_R3.persistence.CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.v1_20_R3.persistence.CraftPersistentDataTypeRegistry();
+    public org.bukkit.craftbukkit.v1_20_R3.persistence.DirtyCraftPersistentDataContainer persistentDataContainer = new org.bukkit.craftbukkit.v1_20_R3.persistence.DirtyCraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+    // CraftBukkit end
+
     public ChunkAccess(
-        ChunkPos p_187621_,
-        UpgradeData p_187622_,
-        LevelHeightAccessor p_187623_,
-        Registry<Biome> p_187624_,
-        long p_187625_,
-        @Nullable LevelChunkSection[] p_187626_,
-        @Nullable BlendingData p_187627_
+            ChunkPos p_187621_,
+            UpgradeData p_187622_,
+            LevelHeightAccessor p_187623_,
+            Registry<Biome> p_187624_,
+            long p_187625_,
+            @Nullable LevelChunkSection[] p_187626_,
+            @Nullable BlendingData p_187627_
     ) {
         this.chunkPos = p_187621_;
         this.upgradeData = p_187622_;
@@ -106,10 +_,15 @@
         }
 
         replaceMissingSections(p_187624_, this.sections);
+        // CraftBukkit start
+        this.biomeRegistry = p_187624_;
     }
+
+    public final Registry<Biome> biomeRegistry;
+    // CraftBukkit end
 
     private static void replaceMissingSections(Registry<Biome> p_281389_, LevelChunkSection[] p_282796_) {
-        for(int i = 0; i < p_282796_.length; ++i) {
+        for (int i = 0; i < p_282796_.length; ++i) {
             if (p_282796_[i] == null) {
                 p_282796_[i] = new LevelChunkSection(p_281389_);
             }
@@ -130,7 +_,7 @@
     public int getHighestFilledSectionIndex() {
         LevelChunkSection[] alevelchunksection = this.getSections();
 
-        for(int i = alevelchunksection.length - 1; i >= 0; --i) {
+        for (int i = alevelchunksection.length - 1; i >= 0; --i) {
             LevelChunkSection levelchunksection = alevelchunksection[i];
             if (!levelchunksection.hasOnlyAir()) {
                 return i;
@@ -141,7 +_,7 @@
     }
 
     @Deprecated(
-        forRemoval = true
+            forRemoval = true
     )
     public int getHighestSectionPosition() {
         int i = this.getHighestFilledSectionIndex();
@@ -250,7 +_,7 @@
             p_62076_ = this.getMaxBuildHeight() - 1;
         }
 
-        for(int i = p_62075_; i <= p_62076_; i += 16) {
+        for (int i = p_62075_; i <= p_62076_; i += 16) {
             if (!this.getSection(this.getSectionIndex(i)).hasOnlyAir()) {
                 return false;
             }
@@ -261,10 +_,12 @@
 
     public void setUnsaved(boolean p_62094_) {
         this.unsaved = p_62094_;
+        if (!p_62094_)
+            this.persistentDataContainer.dirty(false); // CraftBukkit - SPIGOT-6814: chunk was saved, pdc is no longer dirty
     }
 
     public boolean isUnsaved() {
-        return this.unsaved;
+        return this.unsaved || this.persistentDataContainer.dirty(); // CraftBukkit - SPIGOT-6814: chunk is unsaved if pdc was mutated
     }
 
     public abstract ChunkStatus getStatus();
@@ -308,23 +_,33 @@
 
     @Override
     public final void findBlockLightSources(BiConsumer<BlockPos, BlockState> p_285269_) {
-        this.findBlocks(p_284897_ -> p_284897_.getLightEmission() != 0, p_285269_);
+        this.findBlocks(p_284897_ -> p_284897_.hasDynamicLightEmission() || p_284897_.getLightEmission(net.minecraft.world.level.EmptyBlockGetter.INSTANCE, BlockPos.ZERO) != 0, (p_284897_, pos) -> p_284897_.getLightEmission(this, pos) != 0, p_285269_);
     }
 
     public void findBlocks(Predicate<BlockState> p_285343_, BiConsumer<BlockPos, BlockState> p_285030_) {
+        findBlocks(p_285343_, (state, pos) -> p_285343_.test(state), p_285030_);
+    }
+
+    @Deprecated(forRemoval = true)
+    public void findBlocks(java.util.function.BiPredicate<BlockState, BlockPos> p_285343_, BiConsumer<BlockPos, BlockState> p_285030_) {
+        findBlocks(state -> p_285343_.test(state, BlockPos.ZERO), p_285343_, p_285030_);
+    }
+
+    public void findBlocks(Predicate<BlockState> p_285343_, java.util.function.BiPredicate<BlockState, BlockPos> fineFilter, BiConsumer<BlockPos, BlockState> p_285030_) {
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-        for(int i = this.getMinSection(); i < this.getMaxSection(); ++i) {
+        for (int i = this.getMinSection(); i < this.getMaxSection(); ++i) {
             LevelChunkSection levelchunksection = this.getSection(this.getSectionIndexFromSectionY(i));
             if (levelchunksection.maybeHas(p_285343_)) {
                 BlockPos blockpos = SectionPos.of(this.chunkPos, i).origin();
 
-                for(int j = 0; j < 16; ++j) {
-                    for(int k = 0; k < 16; ++k) {
-                        for(int l = 0; l < 16; ++l) {
+                for (int j = 0; j < 16; ++j) {
+                    for (int k = 0; k < 16; ++k) {
+                        for (int l = 0; l < 16; ++l) {
                             BlockState blockstate = levelchunksection.getBlockState(l, j, k);
-                            if (p_285343_.test(blockstate)) {
-                                p_285030_.accept(blockpos$mutableblockpos.setWithOffset(blockpos, l, j, k), blockstate);
+                            blockpos$mutableblockpos.setWithOffset(blockpos, l, j, k);
+                            if (fineFilter.test(blockstate, blockpos$mutableblockpos)) {
+                                p_285030_.accept(blockpos$mutableblockpos, blockstate);
                             }
                         }
                     }
@@ -428,6 +_,27 @@
         }
     }
 
+    // CraftBukkit start
+    public void setBiome(int i, int j, int k, Holder<Biome> biome) {
+        try {
+            int l = QuartPos.fromBlock(this.getMinBuildHeight());
+            int i1 = l + QuartPos.fromBlock(this.getHeight()) - 1;
+            int j1 = Mth.clamp(j, l, i1);
+            int k1 = this.getSectionIndex(QuartPos.toBlock(j1));
+
+            this.sections[k1].setBiome(i & 3, j1 & 3, k & 3, biome);
+        } catch (Throwable throwable) {
+            CrashReport crashreport = CrashReport.forThrowable(throwable, "Setting biome");
+            CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Biome being set");
+
+            crashreportsystemdetails.setDetail("Location", () -> {
+                return CrashReportCategory.formatLocation(this, i, j, k);
+            });
+            throw new ReportedException(crashreport);
+        }
+    }
+    // CraftBukkit end
+
     public void fillBiomesFromNoise(BiomeResolver p_187638_, Climate.Sampler p_187639_) {
         ChunkPos chunkpos = this.getPos();
         int i = QuartPos.fromBlock(chunkpos.getMinBlockX());
@@ -469,4 +_,70 @@
 
     public static record TicksToSave(SerializableTickContainer<Block> blocks, SerializableTickContainer<Fluid> fluids) {
     }
+
+    // FORGE START
+    private final net.neoforged.neoforge.attachment.AttachmentHolder.AsField attachmentHolder = new net.neoforged.neoforge.attachment.AttachmentHolder.AsField(this);
+
+    @Override
+    public boolean hasAttachments() {
+        return getAttachmentHolder().hasAttachments();
+    }
+
+    @Override
+    public boolean hasData(net.neoforged.neoforge.attachment.AttachmentType<?> type) {
+        return getAttachmentHolder().hasData(type);
+    }
+
+    @Override
+    public <T> T getData(net.neoforged.neoforge.attachment.AttachmentType<T> type) {
+        return getAttachmentHolder().getData(type);
+    }
+
+    @Override
+    public <T> java.util.Optional<T> getExistingData(net.neoforged.neoforge.attachment.AttachmentType<T> type) {
+        return getAttachmentHolder().getExistingData(type);
+    }
+
+    @Override
+    @Nullable
+    public <T> T setData(net.neoforged.neoforge.attachment.AttachmentType<T> type, T data) {
+        setUnsaved(true);
+        return getAttachmentHolder().setData(type, data);
+    }
+
+    @Override
+    @Nullable
+    public <T> T removeData(net.neoforged.neoforge.attachment.AttachmentType<T> type) {
+        setUnsaved(true);
+        return getAttachmentHolder().removeData(type);
+    }
+
+    /**
+     * <strong>FOR INTERNAL USE ONLY</strong>
+     * <p>
+     * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+     */
+    @org.jetbrains.annotations.ApiStatus.Internal
+    @Nullable
+    public final CompoundTag writeAttachmentsToNBT() {
+        return getAttachmentHolder().serializeAttachments();
+    }
+
+    /**
+     * <strong>FOR INTERNAL USE ONLY</strong>
+     * <p>
+     * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+     *
+     */
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public final void readAttachmentsFromNBT(CompoundTag tag) {
+        getAttachmentHolder().deserializeInternal(tag);
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    protected net.neoforged.neoforge.attachment.AttachmentHolder.AsField getAttachmentHolder() {
+        return attachmentHolder;
+    }
+    @Nullable
+    public net.minecraft.world.level.LevelAccessor getWorldForge() { return null; }
 }
