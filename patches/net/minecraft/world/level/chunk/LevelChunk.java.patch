--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -48,7 +_,7 @@
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
-public class LevelChunk extends ChunkAccess {
+public class LevelChunk extends ChunkAccess implements net.neoforged.neoforge.attachment.IAttachmentHolder {
     static final Logger LOGGER = LogUtils.getLogger();
     private static final TickingBlockEntity NULL_TICKER = new TickingBlockEntity() {
         @Override
@@ -73,6 +_,7 @@
     private final Map<BlockPos, LevelChunk.RebindableTickingBlockEntityWrapper> tickersInLevel = Maps.newHashMap();
     private boolean loaded;
     public final Level level;
+    public final ServerLevel levelCB; //Ketting
     @Nullable
     private Supplier<FullChunkStatus> fullStatus;
     @Nullable
@@ -98,6 +_,15 @@
     ) {
         super(p_196855_, p_196856_, p_196854_, p_196854_.registryAccess().registryOrThrow(Registries.BIOME), p_196859_, p_196860_, p_196862_);
         this.level = p_196854_;
+
+        //Ketting start - craftbukkit
+        ServerLevel levelCB = null;
+        try {
+            levelCB = (ServerLevel) level;
+        } catch (ClassCastException ignored) {}
+        this.levelCB = levelCB;
+        //Ketting end
+        
         this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap<>();
 
         for(Heightmap.Types heightmap$types : Heightmap.Types.values()) {
@@ -111,6 +_,11 @@
         this.fluidTicks = p_196858_;
     }
 
+    // CraftBukkit start
+    public boolean mustNotSave;
+    public boolean needsDecoration;
+    // CraftBukkit end
+
     public LevelChunk(ServerLevel p_196850_, ProtoChunk p_196851_, @Nullable LevelChunk.PostLoadProcessor p_196852_) {
         this(
             p_196850_,
@@ -137,6 +_,7 @@
         this.setAllStarts(p_196851_.getAllStarts());
         this.setAllReferences(p_196851_.getAllReferences());
 
+        net.neoforged.neoforge.attachment.AttachmentUtils.copyChunkAttachmentsOnPromotion(p_196851_.getAttachmentHolder(), this.getAttachmentHolder());
         for(Entry<Heightmap.Types, Heightmap> entry : p_196851_.getHeightmaps()) {
             if (ChunkStatus.FULL.heightmapsAfter().contains(entry.getKey())) {
                 this.setHeightmap(entry.getKey(), entry.getValue().getRawData());
@@ -146,6 +_,10 @@
         this.skyLightSources = p_196851_.skyLightSources;
         this.setLightCorrect(p_196851_.isLightCorrect());
         this.unsaved = true;
+        this.needsDecoration = true; // CraftBukkit
+        // CraftBukkit start
+        this.persistentDataContainer = p_196851_.persistentDataContainer; // SPIGOT-6814: copy PDC to account for 1.17 to 1.18 chunk upgrading.
+        // CraftBukkit end
     }
 
     @Override
@@ -232,6 +_,18 @@
         }
     }
 
+    // CraftBukkit start
+    //Ketting start - reverse delegation
+    public final java.util.concurrent.atomic.AtomicBoolean ketting$setBlockState$doPlace = new java.util.concurrent.atomic.AtomicBoolean(true);
+
+    @Nullable
+    public BlockState setBlockState(BlockPos p_62865_, BlockState p_62866_, boolean p_62867_, boolean doPlace) {
+        ketting$setBlockState$doPlace.set(doPlace);
+        return setBlockState(p_62865_, p_62866_, p_62867_);
+    }
+    //Ketting end
+    // CraftBukkit end
+
     @Nullable
     @Override
     public BlockState setBlockState(BlockPos p_62865_, BlockState p_62866_, boolean p_62867_) {
@@ -268,16 +_,18 @@
                 }
 
                 boolean flag2 = blockstate.hasBlockEntity();
-                if (!this.level.isClientSide) {
+                // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
+                //Ketting - combine forge and bukkit snapshot capture. Also query doPlace first, so it always gets reset
+                if (ketting$setBlockState$doPlace.getAndSet(true) && !this.level.isClientSide && (!this.level.captureBlockSnapshots || (!this.level.captureBlockStates || block instanceof net.minecraft.world.level.block.BaseEntityBlock))) {
                     blockstate.onRemove(this.level, p_62865_, p_62866_, p_62867_);
-                } else if (!blockstate.is(block) && flag2) {
+                } else if ((!blockstate.is(block) || !p_62866_.hasBlockEntity()) && flag2) {
                     this.removeBlockEntity(p_62865_);
                 }
 
                 if (!levelchunksection.getBlockState(j, k, l).is(block)) {
                     return null;
                 } else {
-                    if (!this.level.isClientSide) {
+                    if (!this.level.isClientSide && !this.level.captureBlockSnapshots) {
                         p_62866_.onPlace(this.level, p_62865_, blockstate, p_62867_);
                     }
 
@@ -320,7 +_,17 @@
 
     @Nullable
     public BlockEntity getBlockEntity(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
-        BlockEntity blockentity = this.blockEntities.get(p_62868_);
+        // CraftBukkit start
+        BlockEntity blockentity = level.capturedTileEntities.get(p_62868_);
+        if (blockentity == null) {
+            blockentity = (BlockEntity) this.blockEntities.get(p_62868_);
+        }
+        // CraftBukkit end
+
+        if (blockentity != null && blockentity.isRemoved()) {
+            blockEntities.remove(p_62868_);
+            blockentity = null;
+        }
         if (blockentity == null) {
             CompoundTag compoundtag = this.pendingBlockEntities.remove(p_62868_);
             if (compoundtag != null) {
@@ -338,9 +_,6 @@
                     this.addAndRegisterBlockEntity(blockentity);
                 }
             }
-        } else if (blockentity.isRemoved()) {
-            this.blockEntities.remove(p_62868_);
-            return null;
         }
 
         return blockentity;
@@ -355,6 +_,7 @@
             }
 
             this.updateBlockEntityTicker(p_156391_);
+            this.level.addFreshBlockEntities(java.util.List.of(p_156391_));
         }
     }
 
@@ -385,7 +_,15 @@
             BlockEntity blockentity = this.blockEntities.put(blockpos.immutable(), p_156374_);
             if (blockentity != null && blockentity != p_156374_) {
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(blockpos);
             }
+            // CraftBukkit start
+        } else {
+            System.out.println("Attempted to place a tile entity (" + p_156374_ + ") at " + p_156374_.getBlockPos().getX() + "," + p_156374_.getBlockPos().getY() + "," + p_156374_.getBlockPos().getZ()
+                    + " (" + getBlockState(blockpos) + ") where there was no entity tile!");
+            System.out.println("Chunk coordinates: " + (this.chunkPos.x * 16) + "," + (this.chunkPos.z * 16));
+            new Exception().printStackTrace();
+            // CraftBukkit end
         }
     }
 
@@ -394,9 +_,14 @@
     public CompoundTag getBlockEntityNbtForSaving(BlockPos p_62932_) {
         BlockEntity blockentity = this.getBlockEntity(p_62932_);
         if (blockentity != null && !blockentity.isRemoved()) {
+            try {
             CompoundTag compoundtag1 = blockentity.saveWithFullMetadata();
             compoundtag1.putBoolean("keepPacked", false);
             return compoundtag1;
+            } catch (Exception e) {
+                LOGGER.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+                return null;
+            }
         } else {
             CompoundTag compoundtag = this.pendingBlockEntities.get(p_62932_);
             if (compoundtag != null) {
@@ -412,6 +_,13 @@
     public void removeBlockEntity(BlockPos p_62919_) {
         if (this.isInLevel()) {
             BlockEntity blockentity = this.blockEntities.remove(p_62919_);
+
+            // CraftBukkit start - SPIGOT-5561: Also remove from pending map
+            if (!pendingBlockEntities.isEmpty()) {
+                pendingBlockEntities.remove(p_62919_);
+            }
+            // CraftBukkit end
+
             if (blockentity != null) {
                 Level levelx = this.level;
                 if (levelx instanceof ServerLevel serverlevel) {
@@ -419,6 +_,7 @@
                 }
 
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(p_62919_);
             }
         }
 
@@ -455,6 +_,57 @@
         }
     }
 
+    // CraftBukkit start
+    public void loadCallback() {
+        org.bukkit.Server server = this.level.getCraftServer();
+        if (server != null) {
+            /*
+             * If it's a new world, the first few chunks are generated inside
+             * the World constructor. We can't reliably alter that, so we have
+             * no way of creating a CraftWorld/CraftServer at that point.
+             */
+            org.bukkit.Chunk bukkitChunk = new org.bukkit.craftbukkit.v1_20_R3.CraftChunk(this);
+            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, this.needsDecoration));
+
+            if (this.needsDecoration) {
+                this.needsDecoration = false;
+                java.util.Random random = new java.util.Random();
+                random.setSeed(levelCB.getSeed());
+                long xRand = random.nextLong() / 2L * 2L + 1L;
+                long zRand = random.nextLong() / 2L * 2L + 1L;
+                random.setSeed((long) this.chunkPos.x * xRand + (long) this.chunkPos.z * zRand ^ levelCB.getSeed());
+
+                org.bukkit.World world = this.level.getWorld();
+                if (world != null) {
+                    this.level.populating = true;
+                    try {
+                        for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
+                            populator.populate(world, random, bukkitChunk);
+                        }
+                    } finally {
+                        this.level.populating = false;
+                    }
+                }
+                server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
+            }
+        }
+    }
+
+    public void unloadCallback() {
+        org.bukkit.Server server = this.level.getCraftServer();
+        org.bukkit.Chunk bukkitChunk = new org.bukkit.craftbukkit.v1_20_R3.CraftChunk(this);
+        org.bukkit.event.world.ChunkUnloadEvent unloadEvent = new org.bukkit.event.world.ChunkUnloadEvent(bukkitChunk, this.isUnsaved());
+        server.getPluginManager().callEvent(unloadEvent);
+        // note: saving can be prevented, but not forced if no saving is actually required
+        this.mustNotSave = !unloadEvent.isSaveChunk();
+    }
+
+    @Override
+    public boolean isUnsaved() {
+        return super.isUnsaved() && !this.mustNotSave;
+    }
+    // CraftBukkit end
+
     public boolean isEmpty() {
         return false;
     }
@@ -479,7 +_,7 @@
         p_187974_.accept((p_187968_, p_187969_, p_187970_) -> {
             BlockEntity blockentity = this.getBlockEntity(p_187968_, LevelChunk.EntityCreationType.IMMEDIATE);
             if (blockentity != null && p_187970_ != null && blockentity.getType() == p_187969_) {
-                blockentity.load(p_187970_);
+                blockentity.handleUpdateTag(p_187970_);
             }
         });
     }
@@ -587,6 +_,7 @@
     }
 
     public void clearAllBlockEntities() {
+        this.blockEntities.values().forEach(BlockEntity::onChunkUnloaded);
         this.blockEntities.values().forEach(BlockEntity::setRemoved);
         this.blockEntities.clear();
         this.tickersInLevel.values().forEach(p_187966_ -> p_187966_.rebind(NULL_TICKER));
@@ -594,6 +_,7 @@
     }
 
     public void registerAllBlockEntitiesAfterLevelLoad() {
+        this.level.addFreshBlockEntities(this.blockEntities.values());
         this.blockEntities.values().forEach(p_187988_ -> {
             Level level = this.level;
             if (level instanceof ServerLevel serverlevel) {
@@ -646,6 +_,15 @@
         return new LevelChunk.BoundTickingBlockEntity<>(p_156376_, p_156377_);
     }
 
+    // FORGE START
+    private final net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager auxLightManager = new net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager(this);
+
+    @Override
+    public net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager getAuxLightManager(ChunkPos pos) {
+        return auxLightManager;
+    }
+    // FORGE END
+
     class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
         private final T blockEntity;
         private final BlockEntityTicker<T> ticker;
@@ -663,7 +_,9 @@
                 if (LevelChunk.this.isTicking(blockpos)) {
                     try {
                         ProfilerFiller profilerfiller = LevelChunk.this.level.getProfiler();
+                        net.neoforged.neoforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(blockEntity);
                         profilerfiller.push(this::getType);
+                        this.blockEntity.tickTimer.startTiming(); // Spigot
                         BlockState blockstate = LevelChunk.this.getBlockState(blockpos);
                         if (this.blockEntity.getType().isValid(blockstate)) {
                             this.ticker.tick(LevelChunk.this.level, this.blockEntity.getBlockPos(), blockstate, this.blockEntity);
@@ -684,7 +_,17 @@
                         CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking block entity");
                         CrashReportCategory crashreportcategory = crashreport.addCategory("Block entity being ticked");
                         this.blockEntity.fillCrashReportCategory(crashreportcategory);
+
+                        if (net.neoforged.neoforge.common.NeoForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                            LOGGER.error("{}", crashreport.getFriendlyReport());
+                            blockEntity.setRemoved();
+                            LevelChunk.this.removeBlockEntity(blockEntity.getBlockPos());
+                        } else
                         throw new ReportedException(crashreport);
+                        // Spigot start
+                    } finally {
+                        this.blockEntity.tickTimer.stopTiming();
+                        // Spigot end
                     }
                 }
             }
@@ -715,6 +_,11 @@
         IMMEDIATE,
         QUEUED,
         CHECK;
+    }
+
+    @Override
+    public Level getWorldForge() {
+        return getLevel();
     }
 
     @FunctionalInterface
