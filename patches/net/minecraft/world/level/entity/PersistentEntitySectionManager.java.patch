--- a/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -37,6 +_,16 @@
     private final EntityLookup<T> visibleEntityStorage;
     final EntitySectionStorage<T> sectionStorage;
     private final LevelEntityGetter<T> entityGetter;
+
+    // CraftBukkit start - add method to get all entities in chunk
+    public List<Entity> getEntities(ChunkPos pos) {
+        return sectionStorage.getExistingSectionsInChunk(pos.toLong()).flatMap(EntitySection::getEntities).map(entity -> (Entity) entity).collect(Collectors.toList());
+    }
+
+    public boolean isPending(long pair) {
+        return chunkLoadStatuses.get(pair) == PersistentEntitySectionManager.ChunkLoadStatus.PENDING;
+    }
+    // CraftBukkit end
     private final Long2ObjectMap<Visibility> chunkVisibility = new Long2ObjectOpenHashMap<>();
     private final Long2ObjectMap<PersistentEntitySectionManager.ChunkLoadStatus> chunkLoadStatuses = new Long2ObjectOpenHashMap<>();
     private final LongSet chunksToUnload = new LongOpenHashSet();
@@ -71,7 +_,16 @@
         return this.addEntity(p_157534_, false);
     }
 
+    public boolean addNewEntityWithoutEvent(T entity) {
+        return this.addEntityWithoutEvent(entity, false);
+    }
+
     private boolean addEntity(T p_157539_, boolean p_157540_) {
+        if (p_157539_ instanceof Entity entity && net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityJoinLevelEvent(entity, entity.level(), p_157540_)).isCanceled()) return false;
+        return addEntityWithoutEvent(p_157539_, p_157540_);
+    }
+
+    private boolean addEntityWithoutEvent(T p_157539_, boolean p_157540_) {
         if (!this.addEntityUuid(p_157539_)) {
             return false;
         } else {
@@ -101,11 +_,17 @@
     }
 
     public void addLegacyChunkEntities(Stream<T> p_157553_) {
-        p_157553_.forEach(p_157607_ -> this.addEntity(p_157607_, true));
+        p_157553_.forEach(p_157607_ -> {
+            this.addEntity(p_157607_, true);
+            if (p_157607_ instanceof Entity entity) entity.onAddedToWorld();
+        });
     }
 
     public void addWorldGenChunkEntities(Stream<T> p_157560_) {
-        p_157560_.forEach(p_157605_ -> this.addEntity(p_157605_, false));
+        p_157560_.forEach(p_157605_ -> {
+            this.addEntity(p_157605_, false);
+            if (p_157605_ instanceof Entity entity) entity.onAddedToWorld();
+        });
     }
 
     void startTicking(T p_157565_) {
@@ -171,6 +_,13 @@
         }
     }
 
+    private final java.util.concurrent.atomic.AtomicBoolean ketting$storeChunkSections$callEvent = new java.util.concurrent.atomic.AtomicBoolean(false);
+    private boolean storeChunkSections(long p_157513_, Consumer<T> p_157514_, boolean callEvent) {
+        ketting$storeChunkSections$callEvent.set(callEvent);
+        // CraftBukkit start - add boolean for event call
+        return storeChunkSections(p_157513_, p_157514_);
+    }
+
     private boolean storeChunkSections(long p_157513_, Consumer<T> p_157514_) {
         PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager$chunkloadstatus = this.chunkLoadStatuses.get(p_157513_);
         if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.PENDING) {
@@ -182,16 +_,21 @@
                 .collect(Collectors.toList());
             if (list.isEmpty()) {
                 if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.LOADED) {
+                    if (ketting$storeChunkSections$callEvent.get()) org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEntitiesUnloadEvent(((net.minecraft.world.level.chunk.storage.EntityStorage) permanentStorage).level, new ChunkPos(p_157513_), ImmutableList.of()); // CraftBukkit
                     this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), ImmutableList.of()));
                 }
 
+                ketting$storeChunkSections$callEvent.set(false);
                 return true;
             } else if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.FRESH) {
+                ketting$storeChunkSections$callEvent.set(false);
                 this.requestChunkLoad(p_157513_);
                 return false;
             } else {
+                if (ketting$storeChunkSections$callEvent.get()) org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEntitiesUnloadEvent(((net.minecraft.world.level.chunk.storage.EntityStorage) permanentStorage).level, new ChunkPos(p_157513_), list.stream().map(entity -> (Entity) entity).collect(Collectors.toList())); // CraftBukkit
                 this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), list));
                 list.forEach(p_157514_);
+                ketting$storeChunkSections$callEvent.set(false);
                 return true;
             }
         }
@@ -207,6 +_,7 @@
     }
 
     private boolean processChunkUnload(long p_157569_) {
+        ketting$storeChunkSections$callEvent.set(true);
         boolean flag = this.storeChunkSections(p_157569_, p_157595_ -> p_157595_.getPassengersAndSelf().forEach(this::unloadEntity));
         if (!flag) {
             return false;
@@ -228,8 +_,15 @@
     private void processPendingLoads() {
         ChunkEntities<T> chunkentities;
         while((chunkentities = this.loadingInbox.poll()) != null) {
-            chunkentities.getEntities().forEach(p_157593_ -> this.addEntity(p_157593_, true));
+            chunkentities.getEntities().forEach(p_157593_ -> {
+                this.addEntity(p_157593_, true);
+                if (p_157593_ instanceof Entity entity) entity.onAddedToWorld();
+            });
             this.chunkLoadStatuses.put(chunkentities.getPos().toLong(), PersistentEntitySectionManager.ChunkLoadStatus.LOADED);
+            // CraftBukkit start - call entity load event
+            List<Entity> entities = getEntities(chunkentities.getPos());
+            org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEntitiesLoadEvent(((net.minecraft.world.level.chunk.storage.EntityStorage) permanentStorage).level, chunkentities.getPos(), entities);
+            // CraftBukkit end
         }
     }
 
@@ -278,8 +_,16 @@
         this.permanentStorage.flush(true);
     }
 
+    //Ketting start
+    public final java.util.concurrent.atomic.AtomicBoolean ketting$close$save = new java.util.concurrent.atomic.AtomicBoolean(true);
+    public void close(boolean save) throws IOException {
+        ketting$close$save.set(save);
+        close();
+    }
     @Override
     public void close() throws IOException {
+        if(ketting$close$save.getAndSet(true))
+        //Ketting end
         this.saveAll();
         this.permanentStorage.close();
     }
@@ -367,11 +_,13 @@
 
     class Callback implements EntityInLevelCallback {
         private final T entity;
+        private final Entity realEntity;
         private long currentSectionKey;
         private EntitySection<T> currentSection;
 
         Callback(T p_157614_, long p_157615_, EntitySection<T> p_157616_) {
             this.entity = p_157614_;
+            this.realEntity = p_157614_ instanceof Entity ? (Entity) p_157614_ : null;
             this.currentSectionKey = p_157615_;
             this.currentSection = p_157616_;
         }
@@ -390,9 +_,11 @@
                 PersistentEntitySectionManager.this.removeSectionIfEmpty(this.currentSectionKey, this.currentSection);
                 EntitySection<T> entitysection = PersistentEntitySectionManager.this.sectionStorage.getOrCreateSection(i);
                 entitysection.add(this.entity);
+                long oldSectionKey = currentSectionKey;
                 this.currentSection = entitysection;
                 this.currentSectionKey = i;
                 this.updateStatus(visibility, entitysection.getStatus());
+                if (this.realEntity != null) net.neoforged.neoforge.common.CommonHooks.onEntityEnterSection(this.realEntity, oldSectionKey, i);
             }
         }
 
