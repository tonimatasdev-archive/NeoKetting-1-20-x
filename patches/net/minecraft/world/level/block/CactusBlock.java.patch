--- a/net/minecraft/world/level/block/CactusBlock.java
+++ b/net/minecraft/world/level/block/CactusBlock.java
@@ -21,7 +_,7 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public class CactusBlock extends Block {
+public class CactusBlock extends Block implements net.neoforged.neoforge.common.IPlantable {
     public static final MapCodec<CactusBlock> CODEC = simpleCodec(CactusBlock::new);
     public static final IntegerProperty AGE = BlockStateProperties.AGE_15;
     public static final int MAX_AGE = 15;
@@ -41,6 +_,7 @@
 
     @Override
     public void tick(BlockState p_220908_, ServerLevel p_220909_, BlockPos p_220910_, RandomSource p_220911_) {
+        if (!p_220909_.isAreaLoaded(p_220910_, 1)) return; // Forge: prevent growing cactus from loading unloaded chunks with block update
         if (!p_220908_.canSurvive(p_220909_, p_220910_)) {
             p_220909_.destroyBlock(p_220910_, true);
         }
@@ -58,14 +_,18 @@
 
             if (i < 3) {
                 int j = p_220913_.getValue(AGE);
+                if(net.neoforged.neoforge.common.CommonHooks.onCropsGrowPre(p_220914_, blockpos, p_220913_, true)) {
+                    int modifier = p_220914_.spigotConfig.cactusModifier; // Spigot - SPIGOT-7159: Better modifier resolution
                 if (j == 15) {
                     p_220914_.setBlockAndUpdate(blockpos, this.defaultBlockState());
                     BlockState blockstate = p_220913_.setValue(AGE, Integer.valueOf(0));
                     p_220914_.setBlock(p_220915_, blockstate, 4);
                     p_220914_.neighborChanged(blockstate, blockpos, this, p_220915_, false);
-                } else {
+                } else if (modifier == 100 || p_220916_.nextFloat() < (modifier / (100.0f * 16))) { // Spigot - SPIGOT-7159: Better modifier resolution
                     p_220914_.setBlock(p_220915_, p_220913_.setValue(AGE, Integer.valueOf(j + 1)), 4);
                 }
+                net.neoforged.neoforge.common.CommonHooks.onCropsGrowPost(p_220914_, p_220915_, p_220913_);
+                }
             }
         }
     }
@@ -99,12 +_,14 @@
         }
 
         BlockState blockstate1 = p_51154_.getBlockState(p_51155_.below());
-        return (blockstate1.is(Blocks.CACTUS) || blockstate1.is(BlockTags.SAND)) && !p_51154_.getBlockState(p_51155_.above()).liquid();
+        return blockstate1.canSustainPlant(p_51154_, p_51155_, Direction.UP, this) && !p_51154_.getBlockState(p_51155_.above()).liquid();
     }
 
     @Override
     public void entityInside(BlockState p_51148_, Level p_51149_, BlockPos p_51150_, Entity p_51151_) {
+        org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.blockDamage = p_51149_.getWorld().getBlockAt(p_51150_.getX(), p_51150_.getY(), p_51150_.getZ()); // CraftBukkit
         p_51151_.hurt(p_51149_.damageSources().cactus(), 1.0F);
+        org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.blockDamage = null; // CraftBukkit
     }
 
     @Override
@@ -115,5 +_,15 @@
     @Override
     public boolean isPathfindable(BlockState p_51143_, BlockGetter p_51144_, BlockPos p_51145_, PathComputationType p_51146_) {
         return false;
+    }
+
+    @Override
+    public net.neoforged.neoforge.common.PlantType getPlantType(BlockGetter world, BlockPos pos) {
+        return net.neoforged.neoforge.common.PlantType.DESERT;
+    }
+
+    @Override
+    public BlockState getPlant(BlockGetter world, BlockPos pos) {
+        return defaultBlockState();
     }
 }
