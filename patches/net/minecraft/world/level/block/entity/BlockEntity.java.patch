--- a/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -15,7 +_,12 @@
 import net.minecraft.world.level.block.state.BlockState;
 import org.slf4j.Logger;
 
-public abstract class BlockEntity {
+public abstract class BlockEntity extends net.neoforged.neoforge.attachment.AttachmentHolder implements net.neoforged.neoforge.common.extensions.IBlockEntityExtension {
+    public org.spigotmc.CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.v1_20_R3.SpigotTimings.getTileEntityTimings(this); // Spigot
+    // CraftBukkit start - data containers
+    private static final org.bukkit.craftbukkit.v1_20_R3.persistence.CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.v1_20_R3.persistence.CraftPersistentDataTypeRegistry();
+    public org.bukkit.craftbukkit.v1_20_R3.persistence.CraftPersistentDataContainer persistentDataContainer;
+    // CraftBukkit end
     private static final Logger LOGGER = LogUtils.getLogger();
     private final BlockEntityType<?> type;
     @Nullable
@@ -23,6 +_,7 @@
     protected final BlockPos worldPosition;
     protected boolean remove;
     private BlockState blockState;
+    private CompoundTag customPersistentData;
 
     public BlockEntity(BlockEntityType<?> p_155228_, BlockPos p_155229_, BlockState p_155230_) {
         this.type = p_155228_;
@@ -48,9 +_,22 @@
     }
 
     public void load(CompoundTag p_155245_) {
+        // CraftBukkit start - read container
+        this.persistentDataContainer = new org.bukkit.craftbukkit.v1_20_R3.persistence.CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+
+        net.minecraft.nbt.Tag persistentDataTag = p_155245_.get("PublicBukkitValues");
+        if (persistentDataTag instanceof CompoundTag) {
+            this.persistentDataContainer.putAll((CompoundTag) persistentDataTag);
+        }
+        // CraftBukkit end
+        if (p_155245_.contains("NeoForgeData", net.minecraft.nbt.Tag.TAG_COMPOUND)) this.customPersistentData = p_155245_.getCompound("NeoForgeData");
+        if (p_155245_.contains(ATTACHMENTS_NBT_KEY, net.minecraft.nbt.Tag.TAG_COMPOUND)) deserializeAttachments(p_155245_.getCompound(ATTACHMENTS_NBT_KEY));
     }
 
     protected void saveAdditional(CompoundTag p_187471_) {
+        if (this.customPersistentData != null) p_187471_.put("NeoForgeData", this.customPersistentData.copy());
+        var attachmentsTag = serializeAttachments();
+        if (attachmentsTag != null) p_187471_.put(ATTACHMENTS_NBT_KEY, attachmentsTag);
     }
 
     public final CompoundTag saveWithFullMetadata() {
@@ -68,6 +_,11 @@
     public final CompoundTag saveWithoutMetadata() {
         CompoundTag compoundtag = new CompoundTag();
         this.saveAdditional(compoundtag);
+        // CraftBukkit start - store container
+        if (this.persistentDataContainer != null && !this.persistentDataContainer.isEmpty()) {
+            compoundtag.put("PublicBukkitValues", this.persistentDataContainer.toTagCompound());
+        }
+        // CraftBukkit end
         return compoundtag;
     }
 
@@ -161,10 +_,14 @@
 
     public void setRemoved() {
         this.remove = true;
+        this.invalidateCapabilities();
+        requestModelDataUpdate();
     }
 
     public void clearRemoved() {
         this.remove = false;
+        // Neo: invalidate capabilities on block entity placement
+        invalidateCapabilities();
     }
 
     public boolean triggerEvent(int p_58889_, int p_58890_) {
@@ -187,8 +_,38 @@
         return this.type;
     }
 
+    @Override
+    public CompoundTag getPersistentData() {
+        if (this.customPersistentData == null)
+            this.customPersistentData = new CompoundTag();
+        return this.customPersistentData;
+    }
+
+    @Override
+    @Nullable
+    public final <T> T setData(net.neoforged.neoforge.attachment.AttachmentType<T> type, T data) {
+        setChanged();
+        return super.setData(type, data);
+    }
+
+    @Override
+    @Nullable
+    public final <T> T removeData(net.neoforged.neoforge.attachment.AttachmentType<T> type) {
+        setChanged();
+        return super.removeData(type);
+    }
+
     @Deprecated
     public void setBlockState(BlockState p_155251_) {
         this.blockState = p_155251_;
     }
+
+    // CraftBukkit start - add method
+    public org.bukkit.inventory.InventoryHolder getOwner() {
+        if (level == null) return null;
+        org.bukkit.block.BlockState state = level.getWorld().getBlockAt(worldPosition.getX(), worldPosition.getY(), worldPosition.getZ()).getState();
+        if (state instanceof org.bukkit.inventory.InventoryHolder) return (org.bukkit.inventory.InventoryHolder) state;
+        return null;
+    }
+    // CraftBukkit end
 }
