--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -59,6 +_,7 @@
     public static final int NUM_DATA_VALUES = 4;
     public static final int BURN_TIME_STANDARD = 200;
     public static final int BURN_COOL_SPEED = 2;
+    private final RecipeType<? extends AbstractCookingRecipe> recipeType;
     protected NonNullList<ItemStack> items = NonNullList.withSize(3, ItemStack.EMPTY);
     int litTime;
     int litDuration;
@@ -69,9 +_,14 @@
         public int get(int p_58431_) {
             switch(p_58431_) {
                 case 0:
+                    if (litDuration > Short.MAX_VALUE) {
+                        // Neo: preserve litTime / litDuration ratio on the client as data slots are synced as shorts.
+                        return net.minecraft.util.Mth.floor(((double) litTime / litDuration) * Short.MAX_VALUE);
+                    }
+
                     return AbstractFurnaceBlockEntity.this.litTime;
                 case 1:
-                    return AbstractFurnaceBlockEntity.this.litDuration;
+                    return Math.min(AbstractFurnaceBlockEntity.this.litDuration, Short.MAX_VALUE);
                 case 2:
                     return AbstractFurnaceBlockEntity.this.cookingProgress;
                 case 3:
@@ -111,10 +_,26 @@
     ) {
         super(p_154991_, p_154992_, p_154993_);
         this.quickCheck = RecipeManager.createCheck((RecipeType<AbstractCookingRecipe>)p_154994_);
+        this.recipeType = p_154994_;
     }
 
+    /**@deprecated Forge: get burn times by calling CommonHooks#getBurnTime(ItemStack)*/ @Deprecated
     public static Map<Item, Integer> getFuel() {
         Map<Item, Integer> map = Maps.newLinkedHashMap();
+        buildFuels((e, time) -> e.ifRight(tag -> add(map, tag, time)).ifLeft(item -> add(map, item, time)));
+        return map;
+    }
+
+    private static void add(java.util.function.ObjIntConsumer<com.mojang.datafixers.util.Either<Item, TagKey<Item>>> consumer, ItemLike item, int time) {
+        consumer.accept(com.mojang.datafixers.util.Either.left(item.asItem()), time);
+    }
+
+    private static void add(java.util.function.ObjIntConsumer<com.mojang.datafixers.util.Either<Item, TagKey<Item>>> consumer, TagKey<Item> tag, int time) {
+        consumer.accept(com.mojang.datafixers.util.Either.right(tag), time);
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public static void buildFuels(java.util.function.ObjIntConsumer<com.mojang.datafixers.util.Either<Item, TagKey<Item>>> map) {
         add(map, Items.LAVA_BUCKET, 20000);
         add(map, Blocks.COAL_BLOCK, 16000);
         add(map, Items.BLAZE_ROD, 2400);
@@ -174,9 +_,42 @@
         add(map, Blocks.AZALEA, 100);
         add(map, Blocks.FLOWERING_AZALEA, 100);
         add(map, Blocks.MANGROVE_ROOTS, 300);
-        return map;
-    }
-
+    }
+
+    // CraftBukkit start - add fields and methods
+    private int maxStack = MAX_STACK;
+    public List<org.bukkit.entity.HumanEntity> transaction = new java.util.ArrayList<org.bukkit.entity.HumanEntity>();
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<org.bukkit.entity.HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    public Object2IntOpenHashMap<ResourceLocation> getRecipesUsed() {
+        return this.recipesUsed; // PAIL private -> public
+    }
+    // CraftBukkit end
+    
     private static boolean isNeverAFurnaceFuel(Item p_58398_) {
         return p_58398_.builtInRegistryHolder().is(ItemTags.NON_FLAMMABLE_WOOD);
     }
@@ -213,9 +_,9 @@
         super.load(p_155025_);
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
         ContainerHelper.loadAllItems(p_155025_, this.items);
-        this.litTime = p_155025_.getShort("BurnTime");
-        this.cookingProgress = p_155025_.getShort("CookTime");
-        this.cookingTotalTime = p_155025_.getShort("CookTimeTotal");
+        this.litTime = p_155025_.getInt("BurnTime");
+        this.cookingProgress = p_155025_.getInt("CookTime");
+        this.cookingTotalTime = p_155025_.getInt("CookTimeTotal");
         this.litDuration = this.getBurnDuration(this.items.get(1));
         CompoundTag compoundtag = p_155025_.getCompound("RecipesUsed");
 
@@ -227,9 +_,9 @@
     @Override
     protected void saveAdditional(CompoundTag p_187452_) {
         super.saveAdditional(p_187452_);
-        p_187452_.putShort("BurnTime", (short)this.litTime);
-        p_187452_.putShort("CookTime", (short)this.cookingProgress);
-        p_187452_.putShort("CookTimeTotal", (short)this.cookingTotalTime);
+        p_187452_.putInt("BurnTime", this.litTime);
+        p_187452_.putInt("CookTime", this.cookingProgress);
+        p_187452_.putInt("CookTimeTotal", this.cookingTotalTime);
         ContainerHelper.saveAllItems(p_187452_, this.items);
         CompoundTag compoundtag = new CompoundTag();
         this.recipesUsed.forEach((p_187449_, p_187450_) -> compoundtag.putInt(p_187449_.toString(), p_187450_));
@@ -255,28 +_,56 @@
             }
 
             int i = p_155017_.getMaxStackSize();
-            if (!p_155017_.isLit() && canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
-                p_155017_.litTime = p_155017_.getBurnDuration(itemstack);
+            if (!p_155017_.isLit() && p_155017_.canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+                // CraftBukkit start
+                org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack fuel = org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asCraftMirror(itemstack);
+
+                org.bukkit.event.inventory.FurnaceBurnEvent furnaceBurnEvent = new org.bukkit.event.inventory.FurnaceBurnEvent(org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock.at(p_155014_, p_155015_), fuel, p_155017_.getBurnDuration(itemstack));
+                p_155014_.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                if (furnaceBurnEvent.isCancelled()) {
+                    return;
+                }
+
+                p_155017_.litTime = furnaceBurnEvent.getBurnTime();
                 p_155017_.litDuration = p_155017_.litTime;
-                if (p_155017_.isLit()) {
+                if (p_155017_.isLit() && furnaceBurnEvent.isBurning()) {
+                    // CraftBukkit end
                     flag1 = true;
+                    if (itemstack.hasCraftingRemainingItem())
+                        p_155017_.items.set(1, itemstack.getCraftingRemainingItem());
+                    else
                     if (flag3) {
                         Item item = itemstack.getItem();
                         itemstack.shrink(1);
                         if (itemstack.isEmpty()) {
-                            Item item1 = item.getCraftingRemainingItem();
-                            p_155017_.items.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
+                            p_155017_.items.set(1, itemstack.getCraftingRemainingItem());
                         }
                     }
                 }
             }
 
-            if (p_155017_.isLit() && canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+            if (p_155017_.isLit() && p_155017_.canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+                // CraftBukkit start
+                if (recipeholder != null && p_155017_.cookingProgress == 0) {
+                    org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack source = org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asCraftMirror(p_155017_.items.get(0));
+                    org.bukkit.inventory.CookingRecipe<?> recipe = (org.bukkit.inventory.CookingRecipe<?>) recipeholder.toBukkitRecipe();
+
+                    org.bukkit.event.inventory.FurnaceStartSmeltEvent event = new org.bukkit.event.inventory.FurnaceStartSmeltEvent(org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock.at(p_155014_, p_155015_), source, recipe);
+                    p_155014_.getCraftServer().getPluginManager().callEvent(event);
+
+                    p_155017_.cookingTotalTime = event.getTotalCookTime();
+                }
+                // CraftBukkit end
                 ++p_155017_.cookingProgress;
                 if (p_155017_.cookingProgress == p_155017_.cookingTotalTime) {
                     p_155017_.cookingProgress = 0;
                     p_155017_.cookingTotalTime = getTotalCookTime(p_155014_, p_155017_);
-                    if (burn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+                    // Ketting start
+                    ketting$world = p_155017_.level;
+                    ketting$blockposition = p_155017_.worldPosition;
+                    // Ketting end
+                    if (p_155017_.burn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
                         p_155017_.setRecipeUsed(recipeholder);
                     }
 
@@ -300,9 +_,9 @@
         }
     }
 
-    private static boolean canBurn(RegistryAccess p_266924_, @Nullable RecipeHolder<?> p_301107_, NonNullList<ItemStack> p_155007_, int p_155008_) {
+    private boolean canBurn(RegistryAccess p_266924_, @Nullable RecipeHolder<?> p_301107_, NonNullList<ItemStack> p_155007_, int p_155008_) {
         if (!p_155007_.get(0).isEmpty() && p_301107_ != null) {
-            ItemStack itemstack = p_301107_.value().getResultItem(p_266924_);
+            ItemStack itemstack = ((RecipeHolder<net.minecraft.world.item.crafting.Recipe<WorldlyContainer>>) p_301107_).value().assemble(this, p_266924_);
             if (itemstack.isEmpty()) {
                 return false;
             } else {
@@ -311,10 +_,10 @@
                     return true;
                 } else if (!ItemStack.isSameItem(itemstack1, itemstack)) {
                     return false;
-                } else if (itemstack1.getCount() < p_155008_ && itemstack1.getCount() < itemstack1.getMaxStackSize()) {
+                } else if (itemstack1.getCount() + itemstack.getCount() <= p_155008_ && itemstack1.getCount() + itemstack.getCount() <= itemstack1.getMaxStackSize()) { // Forge fix: make furnace respect stack sizes in furnace recipes
                     return true;
                 } else {
-                    return itemstack1.getCount() < itemstack.getMaxStackSize();
+                    return itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize(); // Forge fix: make furnace respect stack sizes in furnace recipes
                 }
             }
         } else {
@@ -322,16 +_,51 @@
         }
     }
 
-    private static boolean burn(RegistryAccess p_266740_, @Nullable RecipeHolder<?> p_300910_, NonNullList<ItemStack> p_267073_, int p_267157_) {
-        if (p_300910_ != null && canBurn(p_266740_, p_300910_, p_267073_, p_267157_)) {
+    // Ketting start
+    private static Level ketting$world;
+    private static BlockPos ketting$blockposition;
+    // Ketting end
+    private boolean burn(RegistryAccess p_266740_, @Nullable RecipeHolder<?> p_300910_, NonNullList<ItemStack> p_267073_, int p_267157_) {
+        if (p_300910_ != null && this.canBurn(p_266740_, p_300910_, p_267073_, p_267157_)) {
             ItemStack itemstack = p_267073_.get(0);
-            ItemStack itemstack1 = p_300910_.value().getResultItem(p_266740_);
+            ItemStack itemstack1 = ((RecipeHolder<net.minecraft.world.item.crafting.Recipe<WorldlyContainer>>) p_300910_).value().assemble(this, p_266740_);
             ItemStack itemstack2 = p_267073_.get(2);
+
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack source = org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asBukkitCopy(itemstack1);
+
+            if (ketting$world != null && ketting$blockposition != null) { // Ketting
+                org.bukkit.event.inventory.FurnaceSmeltEvent furnaceSmeltEvent = new org.bukkit.event.inventory.FurnaceSmeltEvent(org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock.at(ketting$world, ketting$blockposition), source, result);
+                ketting$world.getCraftServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+                if (furnaceSmeltEvent.isCancelled()) {
+                    return false;
+                }
+
+                result = furnaceSmeltEvent.getResult();
+            }
+
+            itemstack1 = org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    p_267073_.set(2, itemstack1.copy());
+                } else if (org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.grow(itemstack1.getCount());
+                } else {
+                    return false;
+                }
+            } 
+            
+            /*
             if (itemstack2.isEmpty()) {
-                p_267073_.set(2, itemstack1.copy());
+               p_267073_.set(2, itemstack1.copy());
             } else if (itemstack2.is(itemstack1.getItem())) {
-                itemstack2.grow(1);
+               itemstack2.grow(itemstack1.getCount());
             }
+            */
+            // CraftBukkit end
 
             if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !p_267073_.get(1).isEmpty() && p_267073_.get(1).is(Items.BUCKET)) {
                 p_267073_.set(1, new ItemStack(Items.WATER_BUCKET));
@@ -349,16 +_,17 @@
             return 0;
         } else {
             Item item = p_58343_.getItem();
-            return getFuel().getOrDefault(item, 0);
+            return net.neoforged.neoforge.common.CommonHooks.getBurnTime(p_58343_, this.recipeType);
         }
     }
 
     private static int getTotalCookTime(Level p_222693_, AbstractFurnaceBlockEntity p_222694_) {
+        if (p_222693_ == null) return 200; // CraftBukkit - SPIGOT-4302
         return p_222694_.quickCheck.getRecipeFor(p_222694_, p_222693_).map(p_300840_ -> p_300840_.value().getCookingTime()).orElse(200);
     }
 
     public static boolean isFuel(ItemStack p_58400_) {
-        return getFuel().containsKey(p_58400_.getItem());
+        return net.neoforged.neoforge.common.CommonHooks.getBurnTime(p_58400_, null) > 0;
     }
 
     @Override
@@ -444,7 +_,7 @@
             return true;
         } else {
             ItemStack itemstack = this.items.get(1);
-            return isFuel(p_58390_) || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
+            return net.neoforged.neoforge.common.CommonHooks.getBurnTime(p_58390_, this.recipeType) > 0 || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
         }
     }
 
@@ -471,7 +_,22 @@
     public void awardUsedRecipes(Player p_58396_, List<ItemStack> p_282202_) {
     }
 
+    //Ketting start
+    public final java.util.concurrent.atomic.AtomicReference<ItemStack> ketting$awardUsedRecipesAndPopExperience$itemstack  = new java.util.concurrent.atomic.AtomicReference<>(null);
+    public final java.util.concurrent.atomic.AtomicInteger ketting$awardUsedRecipesAndPopExperience$amount = new java.util.concurrent.atomic.AtomicInteger(0);
+    @SuppressWarnings("unused") //Ketting - CB compat
+    public void awardUsedRecipesAndPopExperience(ServerPlayer p_155004_, ItemStack itemstack, int amount) { // CraftBukkit
+        ketting$awardUsedRecipesAndPopExperience$itemstack.set(itemstack);
+        ketting$awardUsedRecipesAndPopExperience$amount.set(amount);
+        awardUsedRecipesAndPopExperience(p_155004_);
+    }
+
     public void awardUsedRecipesAndPopExperience(ServerPlayer p_155004_) {
+        ketting$getRecipesToAwardAndPopExperience$blockposition.set(this.worldPosition);
+        ketting$getRecipesToAwardAndPopExperience$entityplayer.set(p_155004_);
+        ketting$getRecipesToAwardAndPopExperience$itemstack.set(ketting$awardUsedRecipesAndPopExperience$itemstack.getAndSet(null));
+        ketting$getRecipesToAwardAndPopExperience$amount.set(ketting$awardUsedRecipesAndPopExperience$amount.getAndSet(0));
+        //Ketting end
         List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(p_155004_.serverLevel(), p_155004_.position());
         p_155004_.awardRecipes(list);
 
@@ -484,13 +_,34 @@
         this.recipesUsed.clear();
     }
 
+    //Ketting start
+    public final java.util.concurrent.atomic.AtomicReference<BlockPos> ketting$getRecipesToAwardAndPopExperience$blockposition = new java.util.concurrent.atomic.AtomicReference<>(null);
+    public final java.util.concurrent.atomic.AtomicReference<ServerPlayer> ketting$getRecipesToAwardAndPopExperience$entityplayer = new java.util.concurrent.atomic.AtomicReference<>(null);
+    public final java.util.concurrent.atomic.AtomicReference<ItemStack> ketting$getRecipesToAwardAndPopExperience$itemstack  = new java.util.concurrent.atomic.AtomicReference<>(null);
+    public final java.util.concurrent.atomic.AtomicInteger ketting$getRecipesToAwardAndPopExperience$amount = new java.util.concurrent.atomic.AtomicInteger(0);
+    @SuppressWarnings("unused") //Ketting - CB Compat
+    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel p_154996_, Vec3 p_154997_, BlockPos blockposition, ServerPlayer entityplayer, ItemStack itemstack, int amount) {
+        ketting$getRecipesToAwardAndPopExperience$blockposition.set(blockposition);
+        ketting$getRecipesToAwardAndPopExperience$entityplayer.set(entityplayer);
+        ketting$getRecipesToAwardAndPopExperience$itemstack.set(itemstack);
+        ketting$getRecipesToAwardAndPopExperience$amount.set(amount);
+        return getRecipesToAwardAndPopExperience(p_154996_, p_154997_);
+    }
+    //Ketting end
     public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel p_154996_, Vec3 p_154997_) {
+        // CraftBukkit end
         List<RecipeHolder<?>> list = Lists.newArrayList();
 
         for(Entry<ResourceLocation> entry : this.recipesUsed.object2IntEntrySet()) {
             p_154996_.getRecipeManager().byKey(entry.getKey()).ifPresent(p_300839_ -> {
                 list.add(p_300839_);
-                createExperience(p_154996_, p_154997_, entry.getIntValue(), ((AbstractCookingRecipe)p_300839_.value()).getExperience());
+                // Ketting start - Add CraftBukkit
+                ketting$blockposition$1 = ketting$getRecipesToAwardAndPopExperience$blockposition.getAndSet(this.worldPosition);
+                ketting$entityhuman = ketting$getRecipesToAwardAndPopExperience$entityplayer.getAndSet(null);
+                ketting$itemstack = ketting$getRecipesToAwardAndPopExperience$itemstack.getAndSet(null);
+                ketting$amount = ketting$getRecipesToAwardAndPopExperience$amount.getAndSet(0);
+                // Ketting end
+                createExperience(p_154996_, p_154997_, entry.getIntValue(), ((AbstractCookingRecipe)p_300839_.value()).getExperience()); // CraftBukkit
             });
         }
 
@@ -504,8 +_,35 @@
             ++i;
         }
 
+        // CraftBukkit start - fire org.bukkit.event.inventory.FurnaceExtractEvent / BlockExpEvent
+        if (ketting$entityhuman != null && ketting$blockposition$1 != null && ketting$itemstack != null) { // Ketting
+            org.bukkit.event.block.BlockExpEvent event;
+            if (ketting$amount != 0) {
+                event = new org.bukkit.event.inventory.FurnaceExtractEvent((org.bukkit.entity.Player) ketting$entityhuman.getBukkitEntity(), org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock.at(p_154999_, ketting$blockposition$1), org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers.getMaterial(ketting$itemstack.getItem()), ketting$amount, i);
+            } else {
+                event = new org.bukkit.event.block.BlockExpEvent(org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock.at(p_154999_, ketting$blockposition$1), i);
+            }
+            p_154999_.getCraftServer().getPluginManager().callEvent(event);
+            i = event.getExpToDrop();
+        }
+        // CraftBukkit end
+
         ExperienceOrb.award(p_154999_, p_155000_, i);
     }
+
+    // Ketting start - Add CraftBukkit method
+    private static int ketting$amount;
+    private static Player ketting$entityhuman;
+    private static BlockPos ketting$blockposition$1;
+    private static ItemStack ketting$itemstack;
+    private static void createExperience(ServerLevel p_154999_, Vec3 p_155000_, int p_155001_, float p_155002_, BlockPos blockposition, Player entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
+        ketting$amount = amount;
+        ketting$entityhuman = entityhuman;
+        ketting$blockposition$1 = blockposition;
+        ketting$itemstack = itemstack;
+        createExperience(p_154999_, p_155000_, p_155001_, p_155002_);
+    }
+    // Ketting end
 
     @Override
     public void fillStackedContents(StackedContents p_58342_) {
