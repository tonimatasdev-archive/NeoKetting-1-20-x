--- a/net/minecraft/world/level/NaturalSpawner.java
+++ b/net/minecraft/world/level/NaturalSpawner.java
@@ -47,6 +_,7 @@
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
 
+// TODO: ForgeHooks.canEntitySpawn
 public final class NaturalSpawner {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int MIN_SPAWN_DISTANCE = 24;
@@ -71,7 +_,7 @@
                 continue;
             }
 
-            MobCategory mobcategory = entity.getType().getCategory();
+            MobCategory mobcategory = entity.getClassification(true);
             if (mobcategory != MobCategory.MISC) {
                 BlockPos blockpos = entity.blockPosition();
                 p_186527_.query(
@@ -105,16 +_,36 @@
         ServerLevel p_47030_, LevelChunk p_47031_, NaturalSpawner.SpawnState p_47032_, boolean p_47033_, boolean p_47034_, boolean p_47035_
     ) {
         p_47030_.getProfiler().push("spawner");
+        p_47030_.timings.mobSpawn.startTiming(); // Spigot
+
+        net.minecraft.world.level.storage.LevelData worlddata = p_47030_.getLevelData(); // CraftBukkit - Other mob type spawn tick rate
 
         for(MobCategory mobcategory : SPAWNING_CATEGORIES) {
+            // CraftBukkit start - Use per-world spawn limits
+            boolean spawnThisTick = true;
+            int limit = mobcategory.getMaxInstancesPerChunk();
+            org.bukkit.entity.SpawnCategory spawnCategory = org.bukkit.craftbukkit.v1_20_R3.util.CraftSpawnCategory.toBukkit(mobcategory);
+            if (org.bukkit.craftbukkit.v1_20_R3.util.CraftSpawnCategory.isValidForLimits(spawnCategory)) {
+                spawnThisTick = p_47030_.ticksPerSpawnCategory.getLong(spawnCategory) != 0 && worlddata.getGameTime() % p_47030_.ticksPerSpawnCategory.getLong(spawnCategory) == 0;
+                limit = p_47030_.getWorld().getSpawnLimit(spawnCategory);
+            }
+
+            if (!spawnThisTick || limit == 0) {
+                continue;
+            }
+
+            p_47032_.ketting$canSpawnForCategory$limit.set(limit);
             if ((p_47033_ || !mobcategory.isFriendly())
                 && (p_47034_ || mobcategory.isFriendly())
                 && (p_47035_ || !mobcategory.isPersistent())
                 && p_47032_.canSpawnForCategory(mobcategory, p_47031_.getPos())) {
+                // CraftBukkit end
                 spawnCategoryForChunk(mobcategory, p_47030_, p_47031_, p_47032_::canSpawn, p_47032_::afterSpawn);
             }
+            p_47032_.ketting$canSpawnForCategory$limit.set(Integer.MAX_VALUE);
         }
 
+        p_47030_.timings.mobSpawn.stopTiming(); // Spigot
         p_47030_.getProfiler().pop();
     }
 
@@ -197,11 +_,17 @@
                                     spawngroupdata = mob.finalizeSpawn(
                                         p_47040_, p_47040_.getCurrentDifficultyAt(mob.blockPosition()), MobSpawnType.NATURAL, spawngroupdata, null
                                     );
-                                    ++j;
-                                    ++l1;
+                                    // CraftBukkit start
+                                    // SPIGOT-7045: Give ocelot babies back their special spawn reason. Note: This is the only modification required as ocelots count as monsters which means they only spawn during normal chunk ticking and do not spawn during chunk generation as starter mobs.
+                                    p_47040_.prepareAddFreshEntityWithPassengers((mob instanceof net.minecraft.world.entity.animal.Ocelot && !((org.bukkit.entity.Ageable) mob.getBukkitEntity()).isAdult()) ? org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.OCELOT_BABY : org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NATURAL);
                                     p_47040_.addFreshEntityWithPassengers(mob);
-                                    p_47044_.run(mob, p_47041_);
-                                    if (j >= mob.getMaxSpawnClusterSize()) {
+                                    if (!mob.isRemoved()) {
+                                        ++j;
+                                        ++l1;
+                                        p_47044_.run(mob, p_47041_);
+                                    }
+                                    // CraftBukkit end
+                                    if (j >= net.neoforged.neoforge.event.EventHooks.getMaxSpawnPackSize(mob)) {
                                         return;
                                     }
 
@@ -278,7 +_,7 @@
             && p_46993_.removeWhenFarAway(p_46994_)) {
             return false;
         } else {
-            return p_46993_.checkSpawnRules(p_46992_, MobSpawnType.NATURAL) && p_46993_.checkSpawnObstruction(p_46992_);
+            return net.neoforged.neoforge.event.EventHooks.checkSpawnPosition(p_46993_, p_46992_, MobSpawnType.NATURAL);
         }
     }
 
@@ -310,9 +_,14 @@
         BlockPos p_220448_,
         @Nullable Holder<Biome> p_220449_
     ) {
-        return isInNetherFortressBounds(p_220448_, p_220444_, p_220447_, p_220445_)
-            ? NetherFortressStructure.FORTRESS_ENEMIES
-            : p_220446_.getMobsAt(p_220449_ != null ? p_220449_ : p_220444_.getBiome(p_220448_), p_220445_, p_220447_, p_220448_);
+        // Forge: Add in potential spawns, and replace hardcoded nether fortress mob list
+        if (isInNetherFortressBounds(p_220448_, p_220444_, p_220447_, p_220445_)) {
+            var monsterSpawns = p_220445_.registryAccess().registryOrThrow(Registries.STRUCTURE).getOrThrow(BuiltinStructures.FORTRESS).spawnOverrides().get(MobCategory.MONSTER);
+            if (monsterSpawns != null) { // structure modifiers can clear the spawn overrides
+                return net.neoforged.neoforge.event.EventHooks.getPotentialSpawns(p_220444_, p_220447_, p_220448_, monsterSpawns.spawns());
+            }
+        }
+        return net.neoforged.neoforge.event.EventHooks.getPotentialSpawns(p_220444_, p_220447_, p_220448_, p_220446_.getMobsAt(p_220449_ != null ? p_220449_ : p_220444_.getBiome(p_220448_), p_220445_, p_220447_, p_220448_));
     }
 
     public static boolean isInNetherFortressBounds(BlockPos p_220456_, ServerLevel p_220457_, MobCategory p_220458_, StructureManager p_220459_) {
@@ -351,6 +_,13 @@
         if (p_47052_ == SpawnPlacements.Type.NO_RESTRICTIONS) {
             return true;
         } else if (p_47055_ != null && p_47053_.getWorldBorder().isWithinBounds(p_47054_)) {
+            return p_47052_.canSpawnAt(p_47053_, p_47054_, p_47055_);
+        }
+        return false;
+    }
+
+    public static boolean canSpawnAtBody(SpawnPlacements.Type p_47052_, LevelReader p_47053_, BlockPos p_47054_, @Nullable EntityType<?> p_47055_) {
+        {
             BlockState blockstate = p_47053_.getBlockState(p_47054_);
             FluidState fluidstate = p_47053_.getFluidState(p_47054_);
             BlockPos blockpos = p_47054_.above();
@@ -363,15 +_,13 @@
                 case ON_GROUND:
                 default:
                     BlockState blockstate1 = p_47053_.getBlockState(blockpos1);
-                    if (!blockstate1.isValidSpawn(p_47053_, blockpos1, p_47055_)) {
+                    if (!blockstate1.isValidSpawn(p_47053_, blockpos1, p_47052_, p_47055_)) {
                         return false;
                     } else {
                         return isValidEmptySpawnBlock(p_47053_, p_47054_, blockstate, fluidstate, p_47055_)
                             && isValidEmptySpawnBlock(p_47053_, blockpos, p_47053_.getBlockState(blockpos), p_47053_.getFluidState(blockpos), p_47055_);
                     }
             }
-        } else {
-            return false;
         }
     }
 
@@ -431,8 +_,7 @@
 
                                 entity.moveTo(d0, (double)blockpos.getY(), d1, p_220454_.nextFloat() * 360.0F, 0.0F);
                                 if (entity instanceof Mob mob
-                                    && mob.checkSpawnRules(p_220451_, MobSpawnType.CHUNK_GENERATION)
-                                    && mob.checkSpawnObstruction(p_220451_)) {
+                                    && net.neoforged.neoforge.event.EventHooks.checkSpawnPosition(mob, p_220451_, MobSpawnType.CHUNK_GENERATION)) {
                                     spawngroupdata = mob.finalizeSpawn(
                                         p_220451_, p_220451_.getCurrentDifficultyAt(mob.blockPosition()), MobSpawnType.CHUNK_GENERATION, spawngroupdata, null
                                     );
@@ -562,8 +_,19 @@
             return this.unmodifiableMobCategoryCounts;
         }
 
+        //Ketting start
+        public final java.util.concurrent.atomic.AtomicInteger ketting$canSpawnForCategory$limit = new java.util.concurrent.atomic.AtomicInteger(Integer.MAX_VALUE);
+        @SuppressWarnings("unused") //Ketting - CB compat
+        boolean canSpawnForCategory(MobCategory p_186549_, ChunkPos p_186550_, int limit) {
+            ketting$canSpawnForCategory$limit.set(limit);
+            return canSpawnForCategory(p_186549_, p_186550_);
+        }
+        // CraftBukkit start
         boolean canSpawnForCategory(MobCategory p_186549_, ChunkPos p_186550_) {
-            int i = p_186549_.getMaxInstancesPerChunk() * this.spawnableChunkCount / NaturalSpawner.MAGIC_NUMBER;
+            int i = ketting$canSpawnForCategory$limit.getAndSet(Integer.MAX_VALUE) * this.spawnableChunkCount / NaturalSpawner.MAGIC_NUMBER;
+            //Ketting end
+            // CraftBukkit end
+
             if (this.mobCategoryCounts.getInt(p_186549_) >= i) {
                 return false;
             } else {
