--- a/net/minecraft/gametest/framework/GameTestServer.java
+++ b/net/minecraft/gametest/framework/GameTestServer.java
@@ -136,12 +_,30 @@
     public boolean initServer() {
         this.setPlayerList(new PlayerList(this, this.registries(), this.playerDataStorage, 1) {
         });
+        net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerAboutToStart(this);
+        // Ketting start
+        org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+        org.spigotmc.SpigotConfig.registerCommands();
+        if (this.getPort() < 0) {
+            this.setPort(25565);
+        }
+        try {
+            this.getConnection().startTcpServerListener(java.net.InetAddress.getLocalHost(), this.getPort());
+        } catch (java.io.IOException ioexception) {
+            LOGGER.warn("**** FAILED TO BIND TO PORT!");
+            LOGGER.warn("The exception was: {}", (Object)ioexception.toString());
+            LOGGER.warn("Perhaps a server is already running on that port?");
+            return false;
+        }
+        // Ketting end
+        this.prepareLoadLevel(storageSource.getLevelId()); //Ketting
         this.loadLevel();
         ServerLevel serverlevel = this.overworld();
         serverlevel.setDefaultSpawnPos(this.spawnPos, 0.0F);
         int i = 20000000;
         serverlevel.setWeatherParameters(20000000, 20000000, false, false);
         LOGGER.info("Started game test server");
+        net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStarting(this);
         return true;
     }
 
@@ -265,6 +_,13 @@
     public boolean shouldInformAdmins() {
         return false;
     }
+
+    // Ketting start
+    @Override
+    public org.bukkit.command.CommandSender getBukkitSender(net.minecraft.commands.CommandSourceStack wrapper) {
+        return null;
+    }
+    // Ketting end
 
     @Override
     public boolean isSingleplayerOwner(GameProfile p_177617_) {
