plugins {
    id 'java-library'
    id 'maven-publish'
}

rootProject.gradleutils.setupSigning(project: project, signAllPublications: true)

dynamicProject {
    runtime("${project.minecraft_version}-${project.neoform_version}",
            rootProject.layout.projectDirectory.dir('patches'),
            rootProject.layout.projectDirectory.dir('rejects'))
}

installerProfile {
    profile = 'NeoForge'
}

minecraft {
    accessTransformers {
        file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

sourceSets {
    main {
        java {
            srcDirs rootProject.file('src/main/java')
        }
        resources {
            srcDirs rootProject.file('src/main/resources'), rootProject.file('src/generated/resources')
        }
    }
}
configurations{
    kettinglauncher{
        transitive = false
    }
}

dependencies {
    runtimeOnly "cpw.mods:bootstraplauncher:${project.bootstraplauncher_version}"

    moduleOnly "cpw.mods:securejarhandler:${project.securejarhandler_version}"
    moduleOnly "org.ow2.asm:asm:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-commons:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-tree:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-util:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-analysis:${project.asm_version}"
    moduleOnly "cpw.mods:bootstraplauncher:${project.bootstraplauncher_version}"
    moduleOnly "net.neoforged:JarJarFileSystems:${project.jarjar_version}"

    installer ("net.neoforged.fancymodloader:loader:${project.fancy_mod_loader_version}") {
        exclude group: 'org.slf4j'
        exclude group: 'net.fabricmc'
    }
    installer ("net.neoforged.fancymodloader:earlydisplay:${project.fancy_mod_loader_version}") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.slf4j'
        exclude group: 'net.fabricmc'
    }
    installer "cpw.mods:securejarhandler:${project.securejarhandler_version}"
    installer "org.ow2.asm:asm:${project.asm_version}"
    installer "org.ow2.asm:asm-commons:${project.asm_version}"
    installer "org.ow2.asm:asm-tree:${project.asm_version}"
    installer "org.ow2.asm:asm-util:${project.asm_version}"
    installer "org.ow2.asm:asm-analysis:${project.asm_version}"
    installer "net.neoforged:accesstransformers:${project.accesstransformers_version}"
    installer "net.neoforged:bus:${project.eventbus_version}"
    installer "net.neoforged.fancymodloader:spi:${project.fancy_mod_loader_version}"
    installer "net.neoforged:coremods:${project.coremods_version}"
    installer "cpw.mods:modlauncher:${project.modlauncher_version}"
    installer "net.minecraftforge:unsafe:${project.unsafe_version}"
    installer "net.neoforged:mergetool:${project.mergetool_version}:api"
    installer "com.electronwill.night-config:core:${project.nightconfig_version}"
    installer "com.electronwill.night-config:toml:${project.nightconfig_version}"
    installer "org.apache.maven:maven-artifact:${project.apache_maven_artifact_version}"
    installer "net.jodah:typetools:${project.typetools_version}"
    installer "net.minecrell:terminalconsoleappender:${project.terminalconsoleappender_version}"
    installer("net.fabricmc:sponge-mixin:${project.mixin_version}") { transitive = false }
    installer "org.openjdk.nashorn:nashorn-core:${project.nashorn_core_version}"
    installer ("net.neoforged:JarJarSelector:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }
    // We depend on apache commons directly as there is a difference between the version the server uses and the one the client does
    installer "org.apache.commons:commons-lang3:${project.apache_commons_lang3_version}"
    installer ("net.neoforged:JarJarMetadata:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }
    
    // Ketting start
    installer("org.kettingpowered:kettingcore:1.3")
    installer("org.kettingpowered:kettingcommon:2.3.2")
    kettinglauncher("org.kettingpowered:kettinglauncher:1.3.3")
    installer("org.kettingpowered:terminal-colors:1.0.2")
    installer("org.yaml:snakeyaml:2.2")
    installer("org.apache.logging.log4j:log4j-iostreams:2.19.0")
    installer("net.md-5:bungeecord-chat:1.20-R0.1")
    installer("commons-lang:commons-lang:2.6")
    installer("com.googlecode.json-simple:json-simple:1.1.1")
    installer("org.xerial:sqlite-jdbc:3.44.1.0")
    installer("com.mysql:mysql-connector-j:8.2.0")
    installer("io.izzel:tools:1.3.0")
    installer("net.md-5:SpecialSource:1.11.3")
    installer("javax.inject:javax.inject:1")
    installer("com.github.oshi:oshi-core:6.4.5")
    installer("com.google.code.gson:gson:2.10.1")
    installer("com.google.guava:failureaccess:1.0.1")
    installer("com.google.guava:guava:31.1-jre")
    installer("com.ibm.icu:icu4j:73.2")
    installer("com.mojang:authlib:4.0.43")
    installer("com.mojang:blocklist:1.0.10")
    //installer("com.mojang:brigadier:1.1.8") //Ketting - We have our own brigadier
    installer("com.mojang:datafixerupper:6.0.8")
    installer("com.mojang:logging:1.1.1")
    installer("com.mojang:patchy:2.2.10")
    installer("com.mojang:text2speech:1.17.9")
    installer("commons-codec:commons-codec:1.16.0")
    installer("commons-io:commons-io:2.11.0")
    installer("commons-logging:commons-logging:1.2")
    installer("io.netty:netty-buffer:4.1.97.Final")
    installer("io.netty:netty-codec:4.1.97.Final")
    installer("io.netty:netty-common:4.1.97.Final")
    installer("io.netty:netty-handler:4.1.97.Final")
    installer("io.netty:netty-resolver:4.1.97.Final")
    installer("io.netty:netty-transport-classes-epoll:4.1.97.Final")
    installer("io.netty:netty-transport-native-epoll:4.1.97.Final")
    installer("io.netty:netty-transport-native-unix-common:4.1.97.Final")
    installer("io.netty:netty-transport:4.1.97.Final")
    installer("it.unimi.dsi:fastutil:8.5.12")
    installer("net.java.dev.jna:jna-platform:5.13.0")
    installer("net.java.dev.jna:jna:5.13.0")
    installer("net.sf.jopt-simple:jopt-simple:5.0.4")
    installer("org.apache.commons:commons-compress:1.22")
    installer("org.apache.commons:commons-lang3:3.12.0")
    installer("org.apache.httpcomponents:httpclient:4.5.13")
    installer("org.apache.httpcomponents:httpcore:4.4.16")
    installer("org.apache.logging.log4j:log4j-api:2.19.0")
    installer("org.apache.logging.log4j:log4j-core:2.19.0")
    installer("org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0")
    installer("org.joml:joml:1.10.5")
    // Ketting end
    
    compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"

    userdevCompileOnly jarJar("io.github.llamalad7:mixinextras-neoforge:${project.mixin_extras_version}"), {
        jarJar.ranged(it, "[${project.mixin_extras_version},)")
    }
}

ext {
    MC_VERSION = "1.20.4"
    FORGE_VERSION = "20.4.214"
    KETTING_VERSION = "0.0.0"
}

//Ketting start
org.kettingpowered.task.GenerateLibs.init();
tasks.register('generateKettingLibraries', org.kettingpowered.task.GenerateLibs) {}

tasks.register('kettingJar', Jar) {
    archiveExtension = 'jar'
    archiveBaseName = 'ketting'
    archiveClassifier = 'kettingJar'
    manifest{
        attributes 'Main-Class': 'org.kettingpowered.launcher.Main'
        attributes 'Launcher-Agent-Class': 'org.kettingpowered.launcher.Main'
        attributes 'Automatic-Module-Name': 'org.kettingpowered.kettinglauncher'
        attributes 'Bundled': 'true'
        attributes 'MinecraftVersion': minecraft_version
        attributes 'ForgeVersion': FORGE_VERSION
        attributes 'KettingVersion': KETTING_VERSION
        attributes([
                "Specification-Title": "Kettingpowered",
                "Specification-Vendor": "Kettingpowered",
                "Implementation-Title": "Ketting",
                "Implementation-Version": "dev-env",
                "Implementation-Vendor": "Kettingpowered",
        ], "org/kettingpowered/launcher/")
    }
    mustRunAfter ':setup'

    from(generateKettingLibraries) {
        rename {'data/ketting_libraries.txt'}
    }
    from {
        configurations.kettinglauncher.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    from(createLegacyInstallerJson.output) {
        rename { 'data/forge-' + MC_VERSION + '-' + FORGE_VERSION + '-' + KETTING_VERSION + '-installscript.json' }
    }

    //BUNDLED_PROJECTS.each { dep ->
    //    from(project(dep).tasks.jar.outputs) {
    //        rename { "data/${dep.substring(1)}-${MC_VERSION}-${FORGE_VERSION}-${KETTING_VERSION}.jar" } //substring with 1 to remove :
    //    }
    //}

    from(generateServerBinaryPatches.output) {
        rename { 'data/server.lzma' }
    }

    from(universalJar) {
        rename { 'data/forge-' + MC_VERSION + '-' + FORGE_VERSION + '-' + KETTING_VERSION + '-universal.jar' }
    }
}
//Ketting end

runTypes {
    client {
        singleInstance false
        client true

        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }

    server {
        server true

        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }

    gameTestServer {
        from project.runTypes.server

        gameTest true
    }

    gameTestClient {
        from project.runTypes.client

        gameTest true
    }

    data {
        dataGenerator true

        // Don't set modid here so we can reuse this runType for test datagen
        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }
}

runs {
    client { }
    server { }
    gameTestServer { }
    gameTestClient { }
    "Data" {
        configure project.runTypes.data

        programArguments.addAll '--mod', 'neoforge'

        modSources.add project.sourceSets.main

        idea {
            primarySourceSet project.sourceSets.main
        }
    }
}

runs.configureEach { it ->
    final File gameDir = project.file("run/${it.name}") as File
    gameDir.mkdirs();

    it.workingDirectory.set gameDir
    it.programArguments.addAll '--gameDir', gameDir.absolutePath
}

launcherProfile {
    arguments {
        game '--fml.neoForgeVersion'
        game project.version
        game '--fml.fmlVersion'
        game project.fancy_mod_loader_version
        game '--fml.mcVersion'
        game project.minecraft_version
        game '--fml.neoFormVersion'
        game project.neoform_version
    }
}

userdevProfile {
    runTypes.configureEach {
        argument '--fml.neoForgeVersion'
        argument project.version
        argument '--fml.fmlVersion'
        argument project.fancy_mod_loader_version
        argument '--fml.mcVersion'
        argument project.minecraft_version
        argument '--fml.neoFormVersion'
        argument project.neoform_version
    }
}

tasks.withType(Javadoc.class).configureEach {
    options.tags = [
            'apiNote:a:<em>API Note:</em>',
            'implSpec:a:<em>Implementation Requirements:</em>',
            'implNote:a:<em>Implementation Note:</em>'
    ]
    options.addStringOption('Xdoclint:all,-missing', '-public')
}

tasks.withType(GenerateModuleMetadata).configureEach { enabled = false }

configurations {
    forValidation {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }

        extendsFrom api, runtimeOnly
    }
}

artifacts {
    forValidation(jar.archiveFile) {
        builtBy(jar)
    }
}

minecraft {
    modIdentifier 'minecraft'
}

publishing {
    publications.create('NeoForge', MavenPublication) {
        groupId = project.group
        artifactId = project.name
        version = project.version

        from components.java

        artifacts = []

        afterEvaluate {
            artifact (signUniversalJar.output) {
                classifier 'universal'
            }
            artifact (signInstallerJar.output) {
                classifier 'installer'
            }
            artifact (userdevJar) {
                classifier 'userdev'
            }
            artifact (sourcesJar) {
                classifier 'sources'
            }
        }

        changelog.publish(it)

        versionMapping {
            usage('java-api') {
                fromResolutionOf('runtimeClasspath')
            }
            usage('java-runtime') {
                fromResolutionResult()
            }
        }

        pom {
            name = project.name
            description = 'Modifactions to Minecraft to enable mod developers.'
            url = 'https://github.com/NeoForged/NeoForge'

            scm {
                url = 'https://github.com/NeoForged/NeoForge'
                connection = 'scm:git:git://github.com/NeoForged/NeoForge.git'
                developerConnection = 'scm:git:git@github.com:NeoForged/NeoForge.git'
            }

            issueManagement {
                system = 'github'
                url = 'https://github.com/NeoForged/NeoForge/issues'
            }

            licenses {
                license {
                    name = 'LGPL 2.1'
                    url = 'https://github.com/NeoForged/NeoForge/blob/1.13-pre/LICENSE.txt'
                    distribution = 'repo'
                }
            }
        }
    }
    repositories {
        maven rootProject.gradleutils.getPublishingMaven()
    }
}
